C251 COMPILER V4.55,  enhanced_selector_api                                                13/12/18  16:27:38  PAGE 1   


C251 COMPILER V4.55, COMPILATION OF MODULE enhanced_selector_api
OBJECT MODULE PLACED IN ..\..\..\..\obj\lib\enhanced\enhanced_selector_api.obj
COMPILER INVOKED BY: C:\Keil\C251\BIN\C251.EXE ..\..\..\..\..\libsrc\midware\enhanced\fsel\enhanced_selector_api.c XSMAL
                    -L INTR2 FUNCTIONS(REENTRANT) ROM(HUGE) OPTIMIZE(9,SPEED) ORDER INCDIR(..\..\..\..\..\inc) DEFINE(_ACTIVE_USERPL,_ACTIVE_
                    -SHUFFLE,_ACTIVE_DIRL) DEBUG PRINT(..\..\..\..\obj\lib\enhanced\enhanced_selector_api.lst) OBJECT(..\..\..\..\obj\lib\enh
                    -anced\enhanced_selector_api.obj) 

stmt  level    source

    1          /*
    2           *******************************************************************************
    3           *                File selector
    4           *            enhanced library
    5           *
    6           *        (c) Copyright, Actions Co,Ld.
    7           *             All Right Reserved
    8           *
    9           *******************************************************************************
   10           */
   11          #include <actos.h>
   12          #include <enhanced.h>
   13          #include <stringH.h>
   14          #include <irq.h>
   15          
   16          #define RecSpare_addr 0x5a0
   17          
   18          #pragma name(MW_EH_FSEL_API)
   19          
   20          /*外部变量和函数*/
   21          extern bool fselGetNext(uint8 *strFile);
   22          extern bool fselGetPrev(uint8 *strFile);
   23          extern bool GetFilebyItem(uint8 *filename, uint16 ItemNum);
   24          extern bool fselUserPLEnt(file_location_t *location);
   25          extern uint8 fselSetLocationC(file_location_t *location);
   26          extern bool fselGetLocationC(file_location_t *location);
   27          extern bool fselGetLocationC_Switch(file_location_t *location);
   28          extern bool fselGetFileByNoInDiskC(char *strFile, const uint16 Num);
   29          extern uint8 fselScanDiskInfo(file_location_t *location, uint8 fsel_mode);
   30          extern bool fselGetNextFolder(uint8 *strFile);
   31          extern bool fselGetPrevFolder(uint8 *strFile);
   32          extern void get_total_num_from_list(file_location_t *location);
   33          extern void get_total_num_from_disk(file_location_t *location);
   34          extern bool fselGetLocationPL(file_location_t *location);
   35          extern uint8 fselSetLocationPL(file_location_t *location);
   36          extern bool UserPL_next(char *filename);
   37          extern bool UserPL_prev(char *filename);
   38          extern bool init_shuffle(uint16 num_total);
   39          
   40          uint8 fselMode; //Mode of select, Sequence, repeat one ...
   41          uint8 fselPLOrCommonDir; //playlist or common operation
   42          uint8 fselType; //Type of select,  Music or voice.
   43          uint8 fselError; // store error id;
   44          int8 fselDiskLetter;
   45          int8 fselDirLayer; //dir  layer
   46          uint16 fselFileNoInDisk;// 文件在全盘的序号
   47          uint16 fselTotalInDisk;// 全盘文件总数
   48          bool select_file_begin_flag;
   49          uint16 CurDirFileNum; //当前目录有效歌曲数量
   50          uint32 CurDirClusNo; //当前目录起始簇号，用于当前目录循环模式
   51          uint16 fselDirNoInDisk; //当前所在目录的序号
   52          uint16 fselTotalDir;
   53          uint8 dir_list_flag;
   54          
   55          #ifdef FILE_PLAY_LIST
   56          //for playlist
C251 COMPILER V4.55,  enhanced_selector_api                                                13/12/18  16:27:38  PAGE 2   

   57          uint16 shuffle_plist_total;
   58          uint8 far read_buf[512];
   59          static const uint8 plistName[] = {"ASDKMM  LIB"};
   60          #endif
   61          const uint8 ExtMusic[][4] =
   62          { "MP3", "WMA", "WAV", "MP1", "MP2" };
   63          const uint8 ExtVoice[][4] =
   64          { "WAV", "MP3" };
   65          const uint8 ExtAll[][4] =
   66          { "*  " };
   67          
   68          #ifdef _ACTIVE_USERPL
   69          extern uint8 User_ItemTotal;
   70          extern uint8 User_ItemCur;
   71          extern uint8 support_fav;
   72          #endif
   73          
   74          #pragma renamecode(MW_EH_FSEL_API)
   75          
   76          static uint8 GetExtSize(void)
   77          {
   78   1          if (fselType == FSEL_TYPE_MUSIC)
   79   1          {
   80   2              return sizeof(ExtMusic) / 4;
   81   2          }
   82   1          else if (fselType == FSEL_TYPE_VOICE)
   83   1          {
   84   2              return sizeof(ExtVoice) / 4;
   85   2          }
   86   1          else
   87   1          {
   88   2              return 0;
   89   2          }
   90   1          return 0;
   91   1      }
   92          
   93          /********************************************************************************
   94           * Description : Get name buffer of current extend
   95           *
   96           * Arguments  :  获得歌曲扩展名
   97           * Returns     :  the buffer of current file extend name
   98           * Notes       :     None
   99           *
  100           ********************************************************************************/
  101          static const uint8 *GetExtBuf(void)
  102          {
  103   1          ClearWatchDog();
  104   1          if (fselType == FSEL_TYPE_MUSIC)
  105   1          {
  106   2              return ExtMusic[0];
  107   2          }
  108   1          else if (fselType == FSEL_TYPE_VOICE)
  109   1          {
  110   2              return ExtVoice[0];
  111   2          }
  112   1          else if (fselType == DIRECTORY_ALL)
  113   1          {
  114   2              return ExtAll[0];
  115   2          }
  116   1          else
  117   1          {
  118   2              return 0;
  119   2          }
  120   1      }
  121          
  122          #ifdef FILE_PLAY_LIST
C251 COMPILER V4.55,  enhanced_selector_api                                                13/12/18  16:27:38  PAGE 3   

  123          void get_total_num_from_plist(file_location_t *location)
  124          {
  125   1          handle temp_list_fp;
  126   1          //uint8 read_buf[512];
  127   1          FS_CD(":");
  128   1          temp_list_fp = FS_FOpen(plistName, FS_OPEN_NORMAL);
  129   1          if(temp_list_fp == NULL)
  130   1          {
  131   2              get_total_num_from_disk(location);
  132   2          }
  133   1          else
  134   1          {
  135   2              FS_FRead(read_buf, 1, temp_list_fp);
  136   2              memcpy(&shuffle_plist_total, &read_buf[16], 2);
  137   2              FS_FClose(temp_list_fp);
  138   2          }
  139   1      }
  140          #endif
  141          /********************************************************************************
  142           * Description : Initialize the FSEL module
  143           *
  144           * Arguments  :
  145           type:   Select type,  is FSEL_TYPE_MUSIC or FSEL_TYPE_VOICE
  146           *            mode: Select mode, is FSEL_ALL_SEQUENCE or  FSEL_ALL_REPEATONE ...
  147           *            DirLevel: Directory deep level, 0 or 1 now.
  148           *
  149           * Returns     :
  150           *            TRUE: Successful,
  151           *            FALSE: Fail, detail information in fselError.
  152           * Notes       :Must call it before call other fsel Module functions
  153           *
  154           ********************************************************************************/
  155          void fsel_init_val(uint8 type, uint8 mode)
  156          {
  157   1          fselType = type;
  158   1          fselMode = mode;
  159   1          fselDirLayer = 0;
  160   1          fselFileNoInDisk = 0;
  161   1          fselDirNoInDisk = 0;
  162   1          CurDirClusNo = 0xfffffff0; //初始化文件不可能使用的簇号
  163   1          CurDirFileNum = 0; //当前目录循环播放时使用
  164   1          select_file_begin_flag = TRUE;
  165   1      }
  166          //uint8 fselScanDiskInfo(file_location_t *location)
  167          uint8 fselScanDiskInfo(file_location_t *location, uint8 fsel_mode)
  168          {
  169   1          //    uint8 fileNameTmp[12];
  170   1      #ifdef _ACTIVE_DIRL
  171   1          //    uint8 dir_buf[74];
  172   1          //    uint16 TempfselDirNoInDisk = 0;
  173   1          //   uint16 VramPage = 0;
  174   1      #endif
  175   1      
  176   1          dir_list_flag = 0;
  177   1      
  178   1          if (FALSE == FS_CD(":"))
  179   1          {
  180   2              return FALSE;
  181   2          }
  182   1      
  183   1      #ifdef _ACTIVE_DIRL
  184   1          //    memset(Dirlocation, 0, 512);
  185   1          //    memset(dir_buf, 0, 74);
  186   1          if(support_fav == 0)
  187   1          {
  188   2              dir_list_flag = 1;
C251 COMPILER V4.55,  enhanced_selector_api                                                13/12/18  16:27:38  PAGE 4   

  189   2          }
  190   1      #endif
  191   1          if (dir_list_flag == 0)
  192   1          {
  193   2      
  194   2      
  195   2      #ifdef FILE_PLAY_LIST
  196   2              if(fsel_mode == FSEL_TYPE_PLAYLIST)
  197   2              {
  198   3                  get_total_num_from_plist(location);
  199   3              }
  200   2              else
  201   2      #endif
  202   2              {
  203   3                  get_total_num_from_disk(location);
  204   3              }
  205   2      
  206   2          }
  207   1      #ifdef _ACTIVE_DIRL
  208   1          else
  209   1          {
  210   2              get_total_num_from_list(location);
  211   2      
  212   2          }
  213   1      #endif
  214   1      
  215   1          if (FALSE == FS_CD(":"))
  216   1          {
  217   2              return FALSE;
  218   2          }
  219   1          select_file_begin_flag = TRUE;
  220   1      
  221   1          return TRUE;
  222   1      
  223   1      }
  224          bool fselInit(uint8 type, uint8 mode, uint8 PlayListOrCommonDir, file_location_t *location, uint8 ScanFla
             -g)
  225          {
  226   1          uint8 fileNameTmp[12];
  227   1          uint16 fselDirNoInDisk_bak;
  228   1          uint32 *RecSpare = RecSpare_addr;
  229   1      
  230   1          fselDiskLetter = (int8) location->disk;
  231   1      
  232   1          if (ScanFlag == 1)
  233   1          {
  234   2              *RecSpare = 0xc00;
  235   2          }
  236   1      
  237   1          if (!DRV_ActiveDrive(fselDiskLetter, 1))
  238   1          {
  239   2              fselError = FSEL_ERR_DISK;
  240   2              return FALSE;
  241   2          }
  242   1      
  243   1          fsel_init_val(type, mode);
  244   1      
  245   1          if (FALSE == FS_CD(":"))
  246   1          {
  247   2              return FALSE;
  248   2          }
  249   1          if (FS_Dir(fileNameTmp, GetExtBuf(), FS_DIR_FILE, GetExtSize()))
  250   1          {
  251   2              fselDirNoInDisk = 1; //根目录有文件，目录序号先加1
  252   2          }
  253   1          else
C251 COMPILER V4.55,  enhanced_selector_api                                                13/12/18  16:27:38  PAGE 5   

  254   1          {
  255   2              fselDirNoInDisk = 0;
  256   2          }
  257   1      
  258   1          if (ScanFlag == 1)
  259   1          {
  260   2              fselTotalInDisk = 0;
  261   2              fselTotalDir = 0;
  262   2              fselDirNoInDisk_bak = fselDirNoInDisk;
  263   2              if (FALSE == fselScanDiskInfo(location, PlayListOrCommonDir)) //遍历全盘
  264   2              {
  265   3                  return FALSE;
  266   3              }
  267   2              fselDirNoInDisk = fselDirNoInDisk_bak;
  268   2          }
  269   1      
  270   1          if (PlayListOrCommonDir == FSEL_TYPE_COMMONDIR)
  271   1          {
  272   2              fselPLOrCommonDir = FSEL_TYPE_COMMONDIR;
  273   2      #ifdef _ACTIVE_SHUFFLE
  274   2              init_shuffle(fselTotalInDisk);
  275   2      #endif
  276   2              //return TRUE;
  277   2          }
  278   1      #ifdef _ACTIVE_USERPL
  279   1          else if (PlayListOrCommonDir == FSEL_TYPE_USERPL)
  280   1          {
  281   2              fselPLOrCommonDir = FSEL_TYPE_USERPL;
  282   2              fselUserPLEnt(location);
  283   2          }
  284   1      #endif
  285   1      #ifdef FILE_PLAY_LIST
  286   1          else if(PlayListOrCommonDir == FSEL_TYPE_PLAYLIST)
  287   1          {
  288   2              fselPLOrCommonDir = FSEL_TYPE_PLAYLIST;
  289   2      
  290   2      #ifdef _ACTIVE_SHUFFLE
  291   2              init_shuffle(shuffle_plist_total);
  292   2      #endif
  293   2      
  294   2          }
  295   1      #endif
  296   1          else
  297   1          {
  298   2              return FALSE;
  299   2          }
  300   1      
  301   1          return TRUE;
  302   1      }
  303          
  304          /********************************************************************************
  305           * Description : Set the select mode.
  306           *
  307           * Arguments  :
  308           mode:  the new mode
  309           * Returns     :  Successful or Fail
  310           * Notes       : None
  311           *
  312           ********************************************************************************/
  313          bool fselSetMode(uint8 mode)
  314          {
  315   1          if (mode >= FSEL_DIR_END)
  316   1          {
  317   2              return FALSE;
  318   2          }
  319   1          fselMode = mode;
C251 COMPILER V4.55,  enhanced_selector_api                                                13/12/18  16:27:38  PAGE 6   

  320   1          return TRUE;
  321   1      }
  322          
  323          /********************************************************************************
  324           * Description : get the next file in playlist or common file system
  325           *
  326           * Arguments  :
  327           *             filename : output the next filename
  328           * Returns     :
  329           *            TRUE: Successful,
  330           *            FALSE: Fail, detail information in fselError.
  331           * Notes       :in common type, it call fselGetNext
  332           *
  333           ********************************************************************************/
  334          bool fselGetNextFile(uint8 *filename)
  335          {
  336   1          if (fselPLOrCommonDir == FSEL_TYPE_COMMONDIR) //comon file system
  337   1          {
  338   2              return fselGetNext(filename);
  339   2          }
  340   1      #ifdef _ACTIVE_USERPL
  341   1          else if (fselPLOrCommonDir == FSEL_TYPE_USERPL)
  342   1          {
  343   2              return UserPL_next(filename);
  344   2          }
  345   1      #endif
  346   1          else
  347   1          {
  348   2              return FALSE;
  349   2          }
  350   1      }
  351          
  352          /********************************************************************************
  353           * Description : get the prev file in playlist or common file system
  354           *
  355           * Arguments  :
  356           *             filename : output the prev filename
  357           * Returns     :
  358           *            TRUE: Successful,
  359           *            FALSE: Fail, detail information in fselError.
  360           * Notes       :in common type, it call fselGetPrev
  361           *
  362           ********************************************************************************/
  363          bool fselGetPrevFile(uint8 *filename)
  364          {
  365   1      
  366   1          if (fselPLOrCommonDir == FSEL_TYPE_COMMONDIR) //comon file system
  367   1          {
  368   2              return fselGetPrev(filename);
  369   2          }
  370   1      #ifdef _ACTIVE_USERPL
  371   1          else if (fselPLOrCommonDir == FSEL_TYPE_USERPL)
  372   1          {
  373   2              return UserPL_prev(filename);
  374   2          }
  375   1      #endif
  376   1          else
  377   1          {
  378   2              return FALSE;
  379   2          }
  380   1      }
  381          /********************************************************************************
  382           * Description : throgh the keeped values set the file selector parament
  383           *
  384           * Arguments  :location :the keeped vlaues
  385           *
C251 COMPILER V4.55,  enhanced_selector_api                                                13/12/18  16:27:38  PAGE 7   

  386           * Returns     :
  387           *            TRUE: Successful,
  388           *            FALSE: Fail, detail information in fselError.
  389           * Notes       :
  390           *
  391           ********************************************************************************/
  392          uint8 fselSetLocation(file_location_t *location)
  393          {
  394   1      #ifdef _ACTIVE_USERPL
  395   1          handle fp_list;
  396   1      #endif
  397   1      
  398   1          if (fselPLOrCommonDir == FSEL_TYPE_COMMONDIR) //common file system
  399   1          {
  400   2              return fselSetLocationC(location);
  401   2          }
  402   1      
  403   1      #ifdef FILE_PLAY_LIST
  404   1          if (fselPLOrCommonDir == FSEL_TYPE_PLAYLIST) //comond file system
  405   1      
  406   1          {
  407   2              return fselSetLocationC(location);
  408   2          }
  409   1      #endif
  410   1      
  411   1      #ifdef _ACTIVE_USERPL
  412   1          else if (fselPLOrCommonDir == FSEL_TYPE_USERPL)
  413   1          {
  414   2      
  415   2              if(!fselUserPLEnt(location))
  416   2              {
  417   3                  return FALSE;
  418   3              }
  419   2              GetFilebyItem(location->filename, location->PL_Cur);
  420   2              fp_list = FS_FOpen(location->filename, FS_OPEN_NORMAL); //检查当前列表文件是否存在
  421   2              if(fp_list == NULL)
  422   2              {
  423   3                  return FALSE;
  424   3              }
  425   2              FS_FClose(fp_list);
  426   2              return TRUE;
  427   2          }
  428   1      #endif
  429   1          else
  430   1          {
  431   2              return FALSE;
  432   2          }
  433   1      }
  434          
  435          /********************************************************************************
  436           * Description : keep values of the file selector parament
  437           *
  438           * Arguments  :location :the keeped vlaues
  439           *
  440           * Returns     :
  441           *            TRUE: Successful,
  442           *            FALSE: Fail, detail information in fselError.
  443           * Notes       :
  444           *
  445           ********************************************************************************/
  446          bool fselGetLocation(file_location_t *location)
  447          {
  448   1      
  449   1          if (fselPLOrCommonDir == FSEL_TYPE_COMMONDIR) //comond file system
  450   1          {
  451   2              return fselGetLocationC(location);
C251 COMPILER V4.55,  enhanced_selector_api                                                13/12/18  16:27:38  PAGE 8   

  452   2          }
  453   1      
  454   1      #ifdef FILE_PLAY_LIST
  455   1          if (fselPLOrCommonDir == FSEL_TYPE_PLAYLIST) //comond file system
  456   1      
  457   1          {
  458   2              return fselGetLocationC(location);
  459   2          }
  460   1      #endif
  461   1      
  462   1      #ifdef _ACTIVE_USERPL
  463   1          else if (fselPLOrCommonDir == FSEL_TYPE_USERPL)
  464   1          {
  465   2              return fselGetLocationPL(location);
  466   2          }
  467   1      #endif
  468   1          else
  469   1          {
  470   2              return FALSE;
  471   2          }
  472   1      }
  473          
  474          /********************************************************************************
  475           * Description : keep values of the file selector parament
  476           *
  477           * Arguments  :location :the keeped vlaues
  478           *
  479           * Returns     :
  480           *            TRUE: Successful,
  481           *            FALSE: Fail, detail information in fselError.
  482           * Notes       :
  483           *
  484           ********************************************************************************/
  485          bool fselGetLocation_Switch(file_location_t *location)
  486          {
  487   1          if (fselPLOrCommonDir == FSEL_TYPE_COMMONDIR) //comond file system
  488   1          {
  489   2      
  490   2              return fselGetLocationC_Switch(location);
  491   2          }
  492   1      #ifdef _ACTIVE_USERPL
  493   1          else if (fselPLOrCommonDir == FSEL_TYPE_USERPL)
  494   1          {
  495   2              return fselGetLocationPL(location);
  496   2          }
  497   1      #endif
  498   1          else
  499   1          {
  500   2              return FALSE;
  501   2          }
  502   1      }
  503          
  504          /********************************************************************************
  505           * Description : Get the total of valid files according to select type and mode
  506           *
  507           * Arguments  : None
  508           * Returns     : Total of valid files
  509           * Notes       : None
  510           *
  511           ********************************************************************************/
  512          uint16 fselGetTotal(void)
  513          {
  514   1          if (fselPLOrCommonDir == FSEL_TYPE_COMMONDIR)
  515   1          {
  516   2              return fselTotalInDisk;
  517   2          }
C251 COMPILER V4.55,  enhanced_selector_api                                                13/12/18  16:27:38  PAGE 9   

  518   1      #ifdef _ACTIVE_USERPL
  519   1          else if (fselPLOrCommonDir == FSEL_TYPE_USERPL)
  520   1          {
  521   2              return User_ItemTotal;
  522   2          }
  523   1      #endif
  524   1          else
  525   1          {
  526   2              return 0;
  527   2          }
  528   1      }
  529          
  530          /********************************************************************************
  531           * Description : Get the No. of current selected file.
  532           *
  533           * Arguments  : None
  534           * Returns     : Number of current selected file.
  535           * Notes       : None
  536           *
  537           ********************************************************************************/
  538          uint16 fselGetNo(void)
  539          {
  540   1          if (fselPLOrCommonDir == FSEL_TYPE_COMMONDIR)
  541   1          {
  542   2              return fselFileNoInDisk;
  543   2          }
  544   1      #ifdef _ACTIVE_USERPL
  545   1          else if (fselPLOrCommonDir == FSEL_TYPE_USERPL)
  546   1          {
  547   2              if(User_ItemCur)
  548   2                  return User_ItemCur;
  549   2              else
  550   2                  return 1;
  551   2          }
  552   1      #endif
  553   1          else
  554   1          {
  555   2              return 0;
  556   2          }
  557   1      }
  558          
  559          /********************************************************************************
  560           * Description : Get the Error id.
  561           *
  562           * Arguments  : None
  563           * Returns     : Error id
  564           * Notes       :  None
  565           *
  566           ********************************************************************************/
  567          int8 fselGetErrID(void)
  568          {
  569   1          return fselError;
  570   1      }
  571          
  572          /********************************************************************************
  573           * Description : 数字点歌
  574           *
  575           * Arguments  : None
  576           * Returns     : Number of current selected file.
  577           * Notes       : None
  578           *
  579           ********************************************************************************/
  580          bool fselGetFileByNoInDisk(uint8 *strFile, const uint16 Num)
  581          {
  582   1          uint8 mode_bak, total = 0;
  583   1          bool result;
C251 COMPILER V4.55,  enhanced_selector_api                                                13/12/18  16:27:38  PAGE 10  

  584   1          if (Num == 0)
  585   1          {
  586   2              return FALSE;
  587   2          }
  588   1          if (fselPLOrCommonDir == FSEL_TYPE_COMMONDIR)
  589   1          {
  590   2              mode_bak = fselMode;
  591   2              fselMode = FSEL_ALL_REPEATALL; //调用fselGetNext会根据播放模式，必须先切换模式
  592   2              result = fselGetFileByNoInDiskC(strFile, Num);
  593   2              fselMode = mode_bak;
  594   2          }
  595   1      #ifdef _ACTIVE_USERPL
  596   1          else if (fselPLOrCommonDir == FSEL_TYPE_USERPL)
  597   1          {
  598   2              GetFilebyItem(strFile, Num);
  599   2          }
  600   1      #endif
  601   1          else
  602   1          {
  603   2              return FALSE;
  604   2          }
  605   1          return result;
  606   1      }
  607          
  608          /********************************************************************************
  609           * Description : 选择下一个文件的第一首歌
  610           *
  611           * Arguments  : None
  612           * Returns     : Number of current selected file.
  613           * Notes       : None
  614           *
  615           ********************************************************************************/
  616          bool fselGetNextFolderFile(uint8 *filename)
  617          {
  618   1          //uint8 strFile[12];
  619   1          if (fselPLOrCommonDir == FSEL_TYPE_COMMONDIR)
  620   1          {
  621   2              return fselGetNextFolder(filename);
  622   2          }
  623   1          else
  624   1          {
  625   2              return FALSE;
  626   2          }
  627   1      }
  628          
  629          /********************************************************************************
  630           * Description : 选择上一个文件的第一首歌
  631           *
  632           * Arguments  : None
  633           * Returns     : Number of current selected file.
  634           * Notes       : None
  635           *
  636           ********************************************************************************/
  637          bool fselGetPrevFolderFile(uint8 *filename)
  638          {
  639   1          //uint8 strFile[12];
  640   1          if (fselPLOrCommonDir == FSEL_TYPE_COMMONDIR)
  641   1          {
  642   2              return fselGetPrevFolder(filename);
  643   2          }
  644   1          else
  645   1          {
  646   2              return FALSE;
  647   2          }
  648   1      }
  649          
C251 COMPILER V4.55,  enhanced_selector_api                                                13/12/18  16:27:38  PAGE 11  

  650          /**************************************************
  651           返回值：获取当前选定的歌曲所在目录的序号，从1开始
  652           输出参数 strLName：获取当前所在目录名，strLName的第一个字节 0：目录名为ascii码  1：目录名为unicode码
  653           输入参数 LNanmeSize：要获取的长名Unicode字符数目
  654           ***************************************************/
  655          uint16 fselGetDirNo(uint8 *strLName, uint8 LNameSize)
  656          {
  657   1          uint32 CurClusNo, DirEntry;
  658   1          uint8 dir_buf[74];
  659   1          if (fselPLOrCommonDir == FSEL_TYPE_COMMONDIR)
  660   1          {
  661   2              if (fselDirLayer == 0)
  662   2              {
  663   3                  *strLName = 0; //第一个字节0表示返回的目录名是ASCII编码
  664   3                  memcpy(strLName + 1, "ROOT", 5);
  665   3              }
  666   2              else
  667   2              {
  668   3                  FS_GetCurDir_layer(dir_buf);
  669   3                  CurClusNo = FS_GetCurDir();//当前目录项在文件系统中的偏移
  670   3                  DirEntry = FS_GetCurDirEntry();//文件项在当前目录项中的偏移
  671   3      
  672   3                  FS_DirParNext();
  673   3                  *(strLName + 1) = 0x20; //获取当前文件系统指针指向的目录名
  674   3                  if (!FS_GetName(strLName + 1, (LNameSize - 3) / 2))
  675   3                  {
  676   4                      FS_GetName(strLName + 1, 0); //不存在长名则获取短名
  677   4                      *strLName = 0; //只有短名，ascii编码
  678   4                  }
  679   3                  else
  680   3                  {
  681   4                      *strLName = 1; //存在长名，unicode编码
  682   4                  }
  683   3                  if (FALSE == FS_CD(":")) //避免处于最后的目录项时调用FS_SetCurDir出错
  684   3                  {
  685   4                      return FALSE;
  686   4                  }
  687   3                  FS_SetCurDir_layer(dir_buf);
  688   3                  FS_SetCurDir(CurClusNo);
  689   3                  FS_SetCurDirEntry(DirEntry);
  690   3              }
  691   2              return fselDirNoInDisk;
  692   2          }
  693   1          else
  694   1          {
  695   2              return FALSE;
  696   2          }
  697   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =    ------     ------
  ecode size           =      1216     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        24     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =       512     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
C251 COMPILER V4.55,  enhanced_selector_api                                                13/12/18  16:27:38  PAGE 12  

  hconst size          =        51     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
