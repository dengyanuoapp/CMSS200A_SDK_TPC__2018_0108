C251 COMPILER V4.55,  enhanced_selector_prev                                               13/12/18  16:27:39  PAGE 1   


C251 COMPILER V4.55, COMPILATION OF MODULE enhanced_selector_prev
OBJECT MODULE PLACED IN ..\..\..\..\obj\lib\enhanced\enhanced_selector_prev.obj
COMPILER INVOKED BY: C:\Keil\C251\BIN\C251.EXE ..\..\..\..\..\libsrc\midware\enhanced\fsel\enhanced_selector_prev.c XSMA
                    -LL INTR2 FUNCTIONS(REENTRANT) ROM(HUGE) OPTIMIZE(9,SPEED) ORDER INCDIR(..\..\..\..\..\inc) DEFINE(_ACTIVE_USERPL,_ACTIVE
                    -_SHUFFLE,_ACTIVE_DIRL) DEBUG PRINT(..\..\..\..\obj\lib\enhanced\enhanced_selector_prev.lst) OBJECT(..\..\..\..\obj\lib\e
                    -nhanced\enhanced_selector_prev.obj) 

stmt  level    source

    1          /*
    2           *******************************************************************************
    3           *                File selector
    4           *            enhanced library
    5           *
    6           *        (c) Copyright, Actions Co,Ld.
    7           *             All Right Reserved
    8           *
    9           *******************************************************************************
   10           */
   11          #include <actos.h>
   12          #include <enhanced.h>
   13          #include <stringH.h>
   14          #include <sysdef.h>
   15          #include <rand.h>
   16          
   17          #pragma name(MW_EH_FSEL_PREV)
   18          #ifdef PC
               #define fselGetByNO fselGetByNO
               #endif
   21          extern uint8 fselMode; //Mode of select, Sequence, repeat one ...
   22          extern uint8 fselPLOrCommonDir; //playlist or common operation
   23          extern uint8 fselType; //Type of select,  Music or voice.
   24          extern uint8 fselError; // store error id;
   25          extern int8 fselDiskLetter;
   26          extern int8 fselDirLayer; //dir  layer
   27          extern uint16 fselFileNoInDisk;// 文件在全盘的序号
   28          extern uint16 fselTotalInDisk;// 全盘文件总数
   29          extern uint16 CurDirFileNum;
   30          extern uint16 fselDirNoInDisk;
   31          extern uint16 fselTotalDir;
   32          extern uint32 CurDirClusNo;
   33          extern uint16 shuffle_prev_file(void);
   34          extern uint8 dir_list_flag;
   35          
   36          #ifdef _ACTIVE_DIRL
   37          extern dir_location_t Dirlocation[DIR_PRE_SEC];
   38          #endif
   39          
   40          const int8 ExtMusicPrev[][4] =
   41          { "MP3", "WMA", "WAV", "MP1", "MP2" };
   42          const int8 ExtVoicePrev[][4] =
   43          { "WAV", "MP3" };
   44          const int8 IgnoreExtPrev[4] =
   45          { "*  " };
   46          const int8 ExtAll1[][4] =
   47          { "*  " };
   48          static const uint8 DirlistName[] = {"LIST    LIB"};
   49          
   50          extern uint16 GetFileTotal(uint8 *strDir, BOOL bCheckValidDir);
   51          
   52          
   53          extern bool fselGetByNO(uint8 *strFile, const uint16 Num);
   54          extern bool fselGetNext(uint8 *strFile);
   55          extern uint8 fselSetLocationC(file_location_t *location);
   56          extern bool fselGetLocationC(file_location_t *location);
C251 COMPILER V4.55,  enhanced_selector_prev                                               13/12/18  16:27:39  PAGE 2   

   57          extern bool init_shuffle(uint16 num_total);
   58          extern bool fselGetFileByNoInDiskC (char *strFile, const uint16 Num);
   59          
   60          bool SelLastDir(uint8 *strDir);
   61          bool SelectPrevFile(uint8 *strFile);
   62          
   63          #ifdef _ACTIVE_DIRL
   64          static bool Fast_SelectPrev_8Layer(uint8 *strFile);
   65          static bool ReadDir();
   66          #endif
   67          
   68          #pragma renamecode(MW_EH_FSEL_PREV)
   69          
   70          /********************************************************************************
   71           * Description : PREV操作获取后缀名BUFFER的地址
   72           *
   73           * Arguments  :  None
   74           * Returns     :  the buffer of current file extend name
   75           * Notes       :     None
   76           *
   77           ********************************************************************************/
   78          const uint8 *GetExtBuf_Prev(void)
   79          {
   80   1          ClearWatchDog();
   81   1      
   82   1          if (fselType == FSEL_TYPE_MUSIC)
   83   1          {
   84   2              return ExtMusicPrev[0];
   85   2          }
   86   1          else if (fselType == FSEL_TYPE_VOICE)
   87   1          {
   88   2              return ExtVoicePrev[0];
   89   2          }
   90   1          else
   91   1          {
   92   2              return ExtAll1[0];
   93   2          }
   94   1      }
   95          
   96          /********************************************************************************
   97           * Description : PREV操作获取后缀名的个数，例如MUSIC支持WMA MP3 WAV一起DIR
   98           *
   99           * Arguments  :  None
  100           * Returns     :  the buffer of current file extend name
  101           * Notes       :     None
  102           *
  103           ********************************************************************************/
  104          
  105          uint8 GetExtSize_Prev(void)
  106          {
  107   1          if (fselType == FSEL_TYPE_MUSIC)
  108   1          {
  109   2              return sizeof(ExtMusicPrev) / 4;
  110   2          }
  111   1          else if (fselType == FSEL_TYPE_VOICE)
  112   1          {
  113   2              return sizeof(ExtVoicePrev) / 4;
  114   2          }
  115   1          else
  116   1          {
  117   2              return 0;
  118   2          }
  119   1          return 0;
  120   1      }
  121          
  122          
C251 COMPILER V4.55,  enhanced_selector_prev                                               13/12/18  16:27:39  PAGE 3   

  123          /********************************************************************************
  124           * Description : 获得当前目录的某种类型文件的总数
  125           * Arguments  :
  126           *            strDir: Dos 8.3 directory name
  127           *            bCheckValidDir: if check valid directory only
  128           * Returns     :
  129           *            The file total of current directory when bCheckValidDir = FALSE
  130           or Vaild BOOL flag when bCheckValidDir = TRUE
  131           * Notes       : None
  132           *
  133           ********************************************************************************/
  134          static uint16 ScanCurDir_FileNum(uint8 *strFile)
  135          {
  136   1          int32 ClusterNo;
  137   1          int32 DirEntry;
  138   1          uint16 FileNum = 1;
  139   1          uint8 dir_buf[74];
  140   1      
  141   1          FS_GetCurDir_layer(dir_buf);
  142   1          ClusterNo = FS_GetCurDir();
  143   1          DirEntry = FS_GetCurDirEntry();
  144   1      
  145   1          FS_Dir(strFile, GetExtBuf_Prev(), FS_DIR_FILE, GetExtSize_Prev());
  146   1          while(FS_Dir(strFile, GetExtBuf_Prev(), FS_DIR_FILE_CONT, GetExtSize_Prev()))
  147   1          {
  148   2              FileNum++;
  149   2          }
  150   1      
  151   1          FS_SetCurDir(ClusterNo);
  152   1          FS_SetCurDirEntry(DirEntry);
  153   1          FS_SetCurDir_layer(dir_buf);
  154   1      
  155   1          return FileNum;
  156   1      }
  157          
  158          
  159          /********************************************************************************
  160           * Description : select the next file and get the file name
  161           *向目录首方向获取上一个文件
  162           ********************************************************************************/
  163          bool SelectPrevFile(uint8 *strFile)
  164          {
  165   1          uint8 dir_type = FS_DIR_FILE_CONT;
  166   1          return FS_DirPrev(strFile, GetExtBuf_Prev(), dir_type, GetExtSize_Prev());
  167   1      }
  168          
  169          /********************************************************************************
  170           * Description : 选择上一个文件夹
  171           *
  172           * Arguments  : none
  173           *
  174           *
  175           * Returns     :
  176           *    TRUE:  success.
  177           *    FALSE: fail, detail info store in fselError.
  178           * Notes       : rewind to the last valid directory when fselDir == 0;
  179           *
  180           ********************************************************************************/
  181          bool fselPrevDir(uint8 *strDir)
  182          {
  183   1          return FS_DirPrev(strDir, IgnoreExtPrev, FS_DIR_DIR_CONT, 1);
  184   1      }
  185          
  186          /********************************************************************************
  187           * Description : 一般PREV操作进入到一个子目录， 就需要定位到最后的文件夹
  188           *
C251 COMPILER V4.55,  enhanced_selector_prev                                               13/12/18  16:27:39  PAGE 4   

  189           * Arguments  :         因为事先不知道总共几个目录，所以需要从头开始DIR
  190           strDir:output Dir name
  191           * Returns    :
  192           TRUE: Successful
  193           FALSE: fail.
  194           * Notes       :  None
  195           *
  196           ********************************************************************************/
  197          bool SelLastDir(uint8 *strDir)
  198          {
  199   1          if (fselDirLayer >= TOTALDIRLAYER)
  200   1          {
  201   2              return FALSE;
  202   2          }
  203   1          if (FALSE == FS_DirLast())
  204   1          {
  205   2              return FALSE;
  206   2          }
  207   1          return FS_DirPrev(strDir, IgnoreExtPrev, FS_DIR_DIR_CONT, 1);
  208   1      }
  209          
  210          /********************************************************************************
  211           *选择上一个文件
  212           ********************************************************************************/
  213          
  214          bool SelectPrev_8Layer(uint8 *strFile)
  215          {
  216   1          char strDir[12];
  217   1          fselError = 0;
  218   1      
  219   1          if (!SelectPrevFile(strFile))
  220   1          {
  221   2              //检查父目录.
  222   2      ParentDiragainNext:
  223   2              ClearWatchDog();
  224   2              if (FALSE != FS_DirParPrev())
  225   2              {
  226   3                  fselDirLayer--;
  227   3                  if (FALSE != fselPrevDir(strDir)) //平级目录的前一个目录
  228   3                  {
  229   4                      goto CurrentDiragainNext;
  230   4                      //平级过去保证LAYER不会大于7
  231   4                  }
  232   3                  else
  233   3                  {
  234   4                      //当前目录下有效的文件
  235   4                      if (FALSE == FS_DirLast())
  236   4                      {
  237   5                          return FALSE;
  238   5                      }
  239   4                      if (FALSE != SelectPrevFile(strFile))
  240   4                      {
  241   5                          fselError = 0;
  242   5                          fselDirNoInDisk--;
  243   5                          return TRUE;
  244   5                      }
  245   4                      //  当前目录分支没有合适的文件,退回上级目录
  246   4                      goto ParentDiragainNext;
  247   4                  }
  248   3              }
  249   2              else
  250   2              {
  251   3                  fselError = FSEL_ERR_OUTOF;
  252   3                  return FALSE;
  253   3              }
  254   2              //寻找当前目录下的所有目录
C251 COMPILER V4.55,  enhanced_selector_prev                                               13/12/18  16:27:39  PAGE 5   

  255   2      CurrentDiragainNext:
  256   2              ClearWatchDog();
  257   2              FS_CD(FS_CD_SON);
  258   2              fselDirLayer++;
  259   2      
  260   2              if (FALSE != SelLastDir(strDir)) //向下查找目录
  261   2              {
  262   3                  goto CurrentDiragainNext;
  263   3                  //一直找到尽头
  264   3              }
  265   2              else
  266   2              {
  267   3                  if (FALSE == FS_DirLast())
  268   3                  {
  269   4                      return FALSE;
  270   4                  }
  271   3                  if (FALSE != SelectPrevFile(strFile))
  272   3                  {
  273   4                      fselError = 0;
  274   4                      fselDirNoInDisk--;
  275   4                      return TRUE;
  276   4                  }
  277   3                  //  当前目录分支没有合适的文件,退回上级目录
  278   3                  goto ParentDiragainNext;
  279   3              }
  280   2          }
  281   1          return TRUE;
  282   1      }
  283          /********************************************************************************
  284           * Description : Select the Prev file according to type & mode, then get the name of file.
  285           *
  286           * Arguments  :
  287           strFile: Dos 8.3 file name of selected file.
  288           * Returns     :
  289           TRUE: Successful.
  290           FALSE: Fail, detail information in fselError
  291           * Notes       :  None
  292           *
  293           ********************************************************************************/
  294          bool fselGetPrev(uint8 *strFile)
  295          {
  296   1          char temp[12];
  297   1          bool result;
  298   1          bool root_flag = 0;
  299   1          uint16 num;
  300   1          uint32 TempClusNo;
  301   1      
  302   1          ClearWatchDog();
  303   1      
  304   1          if(fselTotalInDisk == 0)
  305   1          {
  306   2              return FALSE;
  307   2          }
  308   1      
  309   1          switch (fselMode)
  310   1          {
  311   2          case FSEL_ALL_REPEATONE:
  312   2          {
  313   3              if (!FS_GetName(strFile, 0))
  314   3              {
  315   4                  return FALSE;
  316   4              }
  317   3              return TRUE;
  318   3          }
  319   2      
  320   2          case FSEL_ALL_RANDOM:
C251 COMPILER V4.55,  enhanced_selector_prev                                               13/12/18  16:27:39  PAGE 6   

  321   2          {
  322   3      #ifdef _ACTIVE_SHUFFLE
  323   3              num = shuffle_prev_file();
  324   3              if(num == 0)
  325   3              {
  326   4                  init_shuffle(fselTotalInDisk);
  327   4              }
  328   3      #else
                       num = (rand() % fselTotalInDisk) + 1;
               #endif
  331   3              fselMode = FSEL_ALL_REPEATALL;
  332   3              result = fselGetFileByNoInDiskC(strFile, num);
  333   3              fselMode = FSEL_ALL_RANDOM;
  334   3              return result;
  335   3          }
  336   2      
  337   2          case FSEL_ALL_SEQUENCE:
  338   2          {
  339   3              if (FALSE != SelectPrev_8Layer(strFile))
  340   3              {
  341   4                  fselFileNoInDisk--;
  342   4                  if(fselFileNoInDisk == 0)
  343   4                  {
  344   5                      return FALSE;
  345   5                  }
  346   4                  else
  347   4                  {
  348   5                      return TRUE;
  349   5                  }
  350   4      
  351   4              }
  352   3              return FALSE;
  353   3          }
  354   2      
  355   2      
  356   2          case FSEL_ALL_REPEATALL:
  357   2          {
  358   3              if(dir_list_flag == 0)
  359   3              {
  360   4                  result = SelectPrev_8Layer(strFile);
  361   4              }
  362   3      #ifdef _ACTIVE_DIRL
  363   3              else if(dir_list_flag == 1)
  364   3              {
  365   4                  result = Fast_SelectPrev_8Layer(strFile);
  366   4              }
  367   3      #endif
  368   3              else
  369   3              {
  370   4                  return FALSE;
  371   4              }
  372   3      
  373   3              if (FALSE != result)
  374   3              {
  375   4                  fselFileNoInDisk--;
  376   4                  if(fselFileNoInDisk == 0)
  377   4                  {
  378   5                      return FALSE;
  379   5                  }
  380   4                  else
  381   4                  {
  382   5                      return TRUE;
  383   5                  }
  384   4              }
  385   3              else   //需要从第一首切换到最后一首
  386   3              {
C251 COMPILER V4.55,  enhanced_selector_prev                                               13/12/18  16:27:39  PAGE 7   

  387   4                  if(dir_list_flag == 0)
  388   4                  {
  389   5                      fselDirLayer = 0;
  390   5                      if(FALSE == FS_CD(":"))
  391   5                      {
  392   6                          return FALSE;
  393   6                      }
  394   5                      while (FALSE != SelLastDir(temp))
  395   5                      {
  396   6                          FS_CD(temp);
  397   6                          fselDirLayer++;
  398   6                          ClearWatchDog();
  399   6                          root_flag = 1;
  400   6                      }
  401   5                      fselDirNoInDisk = fselTotalDir + 1;
  402   5                      if(root_flag == 1)
  403   5                      {
  404   6                          fselDirNoInDisk--;
  405   6                      }
  406   5                  }
  407   4      #ifdef _ACTIVE_DIRL
  408   4                  else if(dir_list_flag == 1)
  409   4                  {
  410   5                      fselDirNoInDisk = fselTotalDir;
  411   5                      ReadDir();
  412   5                  }
  413   4      #endif
  414   4                  else
  415   4                  {
  416   5                      return FALSE;
  417   5                  }
  418   4      
  419   4                  if (FALSE == FS_DirLast())
  420   4                  {
  421   5                      return FALSE;
  422   5                  }
  423   4      
  424   4                  fselFileNoInDisk = fselTotalInDisk;
  425   4      
  426   4                  if (FALSE != SelectPrev_8Layer(strFile))
  427   4                  {
  428   5                      return TRUE;
  429   5                  }
  430   4                  else
  431   4                  {
  432   5                      return FALSE;
  433   5                  }
  434   4              }
  435   3          }
  436   2      
  437   2          case FSEL_DIR_REPEATALL:
  438   2          {
  439   3              TempClusNo = FS_GetCurDir();
  440   3              if(CurDirClusNo != TempClusNo)
  441   3              {
  442   4                  CurDirClusNo = TempClusNo;
  443   4                  CurDirFileNum = ScanCurDir_FileNum(strFile);
  444   4              }
  445   3              if(FS_DirPrev(strFile, GetExtBuf_Prev(), FS_DIR_FILE_CONT, GetExtSize_Prev()))
  446   3              {
  447   4                  fselFileNoInDisk--;
  448   4              }
  449   3              else    //已经到当前目录第一首歌，返回目录尾开始
  450   3              {
  451   4                  FS_DirLast();
  452   4                  if(!FS_DirPrev(strFile, GetExtBuf_Prev(), FS_DIR_FILE_CONT, GetExtSize_Prev()))
C251 COMPILER V4.55,  enhanced_selector_prev                                               13/12/18  16:27:39  PAGE 8   

  453   4                  {
  454   5                      return FALSE;
  455   5                  }
  456   4                  fselFileNoInDisk = fselFileNoInDisk + CurDirFileNum - 1;
  457   4              }
  458   3              return TRUE;
  459   3          }
  460   2      
  461   2          default:
  462   2              return FALSE;
  463   2          }
  464   1      
  465   1      }
  466          
  467          /********************************************************************************
  468           * Description : Select the last folder file
  469           *
  470           * 只需换文件夹就可以了
  471           ********************************************************************************/
  472          bool fselGetPrevFolder (uint8 *strFile)
  473          {
  474   1          uint16 num = 0, mode = fselMode;
  475   1          fselMode = FSEL_ALL_REPEATALL;
  476   1      
  477   1          while(1)
  478   1          {
  479   2              if (FALSE != FS_DirPrev(strFile, GetExtBuf_Prev(), FS_DIR_FILE_CONT, GetExtSize_Prev()))
  480   2              {
  481   3                  fselFileNoInDisk--;
  482   3              }
  483   2              else
  484   2              {
  485   3                  break;
  486   3              }
  487   2          }
  488   1          if(!fselGetPrev(strFile))   //切换到上一目录最后一个文件
  489   1          {
  490   2              fselMode = mode;
  491   2              return FALSE;
  492   2          }
  493   1          num = ScanCurDir_FileNum(strFile);
  494   1          FS_Dir(strFile, GetExtBuf_Prev(), FS_DIR_FILE, GetExtSize_Prev());
  495   1          fselFileNoInDisk = fselFileNoInDisk - num + 1;
  496   1          fselMode = mode;
  497   1          return TRUE;
  498   1      }
  499          
  500          #ifdef _ACTIVE_DIRL
  501          bool Fast_SelectPrev_8Layer(uint8 *strFile)
  502          {
  503   1          if (FALSE != SelectPrevFile(strFile))
  504   1          {
  505   2              return TRUE;
  506   2          }
  507   1          if(fselDirNoInDisk == 1)
  508   1          {
  509   2              return FALSE;
  510   2          }
  511   1          fselDirNoInDisk--;
  512   1      
  513   1          ReadDir();
  514   1          FS_DirLast();
  515   1          if (FALSE != SelectPrevFile(strFile))
  516   1          {
  517   2              return TRUE;
  518   2          }
C251 COMPILER V4.55,  enhanced_selector_prev                                               13/12/18  16:27:39  PAGE 9   

  519   1          else
  520   1          {
  521   2              return FALSE;
  522   2          }
  523   1      }
  524          
  525          bool ReadDir()
  526          {
  527   1          uint16 fselDirNoInDiskTemp;
  528   1          fselDirNoInDiskTemp = fselDirNoInDisk - 1;
  529   1      
  530   1          VMRead((uint8 *)Dirlocation, VM_DIR_LIST + (512 * (fselDirNoInDiskTemp / DIR_PRE_SEC)), 512);
  531   1      
  532   1          FS_SetCurDir_layer(Dirlocation[fselDirNoInDiskTemp % DIR_PRE_SEC].MulLayer);
  533   1          FS_SetCurDir(Dirlocation[fselDirNoInDiskTemp % DIR_PRE_SEC].ClusterNo);
  534   1          FS_SetCurDirEntry(0);
  535   1          fselDirLayer = Dirlocation[fselDirNoInDiskTemp % DIR_PRE_SEC].dirLayer;
  536   1          return 1;
  537   1      }
  538          #endif


Module Information          Static   Overlayable
------------------------------------------------
  code size            =    ------     ------
  ecode size           =      1363     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        52     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
