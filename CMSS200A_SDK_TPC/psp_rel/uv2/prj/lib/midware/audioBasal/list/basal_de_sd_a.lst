C251 COMPILER V4.55,  basal_de_sd_a                                                        13/12/18  16:27:23  PAGE 1   


C251 COMPILER V4.55, COMPILATION OF MODULE basal_de_sd_a
OBJECT MODULE PLACED IN ..\..\..\..\obj\lib\basal\basal_de_sd_a.obj
COMPILER INVOKED BY: C:\Keil\C251\BIN\C251.EXE ..\..\..\..\..\libsrc\midware\audioBasal\basal_de_sd_a.c XSMALL FUNCTIONS
                    -(REENTRANT) ROM(HUGE) OPTIMIZE(9,SPEED) INCDIR(..\..\..\..\..\inc) DEBUG PRINT(.\list\basal_de_sd_a.lst) OBJECT(..\..\..
                    -\..\obj\lib\basal\basal_de_sd_a.obj) 

stmt  level    source

    1          #include <actos.h>
    2          #include <basal.h>
    3          #include <decC.h>
    4          
    5          #pragma name(MW_BS_AD_CMD_SD)
    6          
    7          
    8          extern SD_FILE *m_deSd_Fp;
    9          extern Open_param_t *m_deSdOpenparam;
   10          extern play_status_t Sdplay_status;
   11          extern uint32 m_deSdOldDspIntAddrSav;
   12          extern time_t m_SdTotaltimelength;
   13          extern uint8 m_deSdcTimer_Sav;
   14          extern uint32 m_deSdOldDmaIntAddrSav;
   15          
   16          extern bool SdLoadCommand(BYTE music_type, void *param);
   17          extern bool SdStopCommand(void *param);
   18          extern bool SdPlayCommand(void *param);
   19          extern bool SdBackupCommand(void);
   20          extern bool SdRestoreCommand(void);
   21          extern BYTE mp3check(void);
   22          
   23          #define CAN_NOT_CALL_RESERVE_INTERFACE() while(1){;}
   24          
   25          #pragma renamecode(MW_BS_AD_CMD_SD)
   26          
   27          #ifndef PC
   28          BOOL apSdSendCommand(BYTE cmd, BYTE music_type, void *param)
   29          #else
               BOOL apSendCommand(BYTE cmd, BYTE music_type, void *param)
               #endif
   32          {
   33   1          play_status_t *pStatus;
   34   1          audio_format_t *pFormat;
   35   1      
   36   1      #ifdef PC
                   if(DealCommandPC(cmd, music_type, param) == FALSE)
                       return FALSE;
               #endif
   40   1          switch (cmd)
   41   1          {
   42   2          case MC_OPEN:
   43   2              m_deSdOpenparam = (Open_param_t *) param;
   44   2              if (m_deSdOpenparam != 0)
   45   2              {
   46   3                  if (m_deSdOpenparam->typeerror != 0)
   47   3                  {
   48   4                      Sdplay_status.status = PLAYING_ERROR;
   49   4                      m_SdTotaltimelength.second = 0;
   50   4                      m_SdTotaltimelength.minute = 0;
   51   4                      m_SdTotaltimelength.hour = 0;
   52   4                      return FALSE;
   53   4                  }
   54   3                  if (m_deSdOpenparam->SoftVolumeMax != 0)
   55   3                  {
   56   4                      g_decControlInfor.SoftVolumeMax = 40;
   57   4                  }
C251 COMPILER V4.55,  basal_de_sd_a                                                        13/12/18  16:27:23  PAGE 2   

   58   3                  else
   59   3                  {
   60   4                      g_decControlInfor.SoftVolumeMax = 0;
   61   4                  }
   62   3                  g_decControlInfor.FadeInTime = m_deSdOpenparam->FadeInTime;
   63   3                  g_decControlInfor.FadeOutTime = 0x03;//shortest
   64   3              }
   65   2              break;
   66   2      
   67   2      
   68   2          case MC_SETSOFTVOLUMEMAX:
   69   2              if (((uint8) param) != 0)
   70   2              {
   71   3                  g_decControlInfor.SoftVolumeMax = 40;
   72   3              }
   73   2              else
   74   2              {
   75   3                  g_decControlInfor.SoftVolumeMax = 0;
   76   3              }
   77   2      
   78   2              break;
   79   2      
   80   2          case MC_SET_CHANNEL:
   81   2      
   82   2              g_decControlInfor.ChannelSelect = (uint8) param;
   83   2      
   84   2              break;
   85   2          case MC_LOAD:
   86   2              return SdLoadCommand(music_type, param);
   87   2      
   88   2          case MC_PLAY:
   89   2              return SdPlayCommand(param);
   90   2      
   91   2          case MC_PAUSE:
   92   2              CAN_NOT_CALL_RESERVE_INTERFACE()
   93   2      
   94   2          case MC_STOP:
   95   2              return SdStopCommand(param);
   96   2      
   97   2          case MC_STEP:
   98   2              if(((int8)param) < 0)
   99   2              {
  100   3                  g_decControlInfor.FFRevFlag = FAST_BACKWARD;
  101   3                  g_decControlInfor.FFRevSpeed = (uint8)(0 - ((int8)param));
  102   3              }
  103   2              else if(((int8)param) > 0)
  104   2              {
  105   3                  g_decControlInfor.FFRevFlag = FAST_FORWARD;
  106   3                  g_decControlInfor.FFRevSpeed = ((uint8)param);
  107   3              }
  108   2              else
  109   2              {
  110   3                  g_decControlInfor.FFRevFlag = STEP_NORMAL;
  111   3                  g_decControlInfor.FFRevSpeed = 0;
  112   3              }
  113   2              decFFRevDeal();
  114   2              break;
  115   2      
  116   2          case MC_FADEINOUT:
  117   2              //                if(Sdplay_status.status == PLAYING_ERROR)
  118   2              //                              {
  119   2              //                                      return FALSE;
  120   2              //                              }
  121   2              if (((uint8)param & 0xf0) == FADEIN_DEF)
  122   2              {
  123   3                  g_decControlInfor.FadeInTime = (uint8)param & 0x0f;//设置淡入标志
C251 COMPILER V4.55,  basal_de_sd_a                                                        13/12/18  16:27:23  PAGE 3   

  124   3                  return TRUE;
  125   3              }
  126   2              else if (((uint8)param & 0xf0) == FADEOUT_DEF)
  127   2              {
  128   3                  g_decControlInfor.FadeOutTime = (uint8)param & 0x0f;//设置淡出标志
  129   3                  return TRUE;
  130   3              }
  131   2              else
  132   2              {
  133   3      
  134   3              }
  135   2              break;
  136   2      
  137   2          case MC_CLOSE:
  138   2              if(m_deSd_Fp != NULL)
  139   2              {
  140   3                  SD_FClose(m_deSd_Fp);
  141   3                  m_deSd_Fp = 0;
  142   3              }
  143   2              break;
  144   2      
  145   2          case MC_SETVOLUME:
  146   2              g_decControlInfor.Volume = (uint8)param;
  147   2              decSetVolume();
  148   2              break;
  149   2      
  150   2      
  151   2          case MC_SETUSEREQ:
  152   2              memcpy(g_decControlInfor.EQVal, (const void *)param, sizeof(g_decControlInfor.EQVal));
  153   2              break;
  154   2      
  155   2          case MC_SETEQ:
  156   2      
  157   2              g_decControlInfor.EQFlag = (uint8)param;
  158   2              if(Sdplay_status.status == PLAYING_PLAYING)
  159   2              {
  160   3                  decEffectDeal();
  161   3              }
  162   2              break;
  163   2      
  164   2          case MC_AUTO_AB:
  165   2              g_decControlInfor.SentDectFlag = (uint8)param;
  166   2              break;
  167   2      
  168   2          case MC_BACKUP:
  169   2              return SdBackupCommand();
  170   2          case MC_RESTORE:
  171   2              CAN_NOT_CALL_RESERVE_INTERFACE()
  172   2          case MC_SETSPEED:
  173   2              CAN_NOT_CALL_RESERVE_INTERFACE()
  174   2      
  175   2          case MC_SETCALLBACK:
  176   2              break;
  177   2      
  178   2          case MC_GETTIME:
  179   2              memcpy((Full_time_t *)param, &g_decCurStatus.NowTime, sizeof(DWORD));
  180   2              break;
  181   2      
  182   2          case MC_GETSAPLE:
  183   2              *((uint8 *)param) = g_decSongInfor.SampleRate;
  184   2              break;
  185   2      
  186   2          case MC_GETSTATUS:
  187   2              pStatus = (play_status_t *)param;
  188   2              memcpy(&(pStatus->total_time), &m_SdTotaltimelength, sizeof(time_t));
  189   2      
C251 COMPILER V4.55,  basal_de_sd_a                                                        13/12/18  16:27:23  PAGE 4   

  190   2              if((Sdplay_status.status == PLAYING_REACH_END) || (Sdplay_status.status == PLAYING_REACH_HEAD))
  191   2              {
  192   3                  pStatus->status = Sdplay_status.status;
  193   3                  break;
  194   3              }
  195   2      
  196   2              Sdplay_status.volume = g_decControlInfor.Volume;
  197   2              pStatus->volume = g_decControlInfor.Volume;
  198   2      
  199   2              pStatus->signal = Sdplay_status.signal;//
  200   2              Sdplay_status.signal = 0;
  201   2      
  202   2              pStatus->status = Sdplay_status.status;
  203   2              if(Sdplay_status.status != PLAYING_REACH_END)
  204   2              {
  205   3                  if(g_decCurStatus.Status >= 0xf0)
  206   3                  {
  207   4                      Sdplay_status.status = PLAYING_ERROR;
  208   4                      while(!decExit())
  209   4                      {
  210   5                          ;//qac
  211   5                      }
  212   4                      TM_KillTimer(m_deSdcTimer_Sav);
  213   4                      IRQ_Release(m_deSdOldDspIntAddrSav, IRQ_DSP);
  214   4                      IRQ_Release(m_deSdOldDmaIntAddrSav, IRQ_DMA2);
  215   4      
  216   4                  }
  217   3              }
  218   2      
  219   2              break;
  220   2      
  221   2          case MC_GETAUDIOFMT:
  222   2              if(Sdplay_status.status == PLAYING_ERROR)
  223   2              {
  224   3                  return FALSE;
  225   3              }
  226   2              pFormat = (audio_format_t *)param;
  227   2              memcpy(pFormat->bit_rate, ((uint8 *)(&(g_decSongInfor.BitRate))) + 1, (sizeof(DWORD) - 1));
  228   2              pFormat->bit_rate[0] += 0x30;
  229   2              pFormat->bit_rate[1] += 0x30;
  230   2              pFormat->bit_rate[2] += 0x30;
  231   2              pFormat->bit_rate[3] = 0;
  232   2              pFormat->sample_rate = g_decSongInfor.SampleRate;
  233   2              pFormat->channel = g_decSongInfor.Channel;
  234   2              break;
  235   2      
  236   2          case MC_SETPOWERCOUNT:
  237   2              g_decControlInfor.EnergyOutFlag = (uint8)param;
  238   2              break;
  239   2          case MC_GETPOWERVALUE:
  240   2              *((uint8 *)param) = g_decCurStatus.EnergyLevel;
  241   2              break;
  242   2          default:
  243   2              return FALSE;
  244   2          }
  245   1          return TRUE;
  246   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =    ------     ------
  ecode size           =       877     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
C251 COMPILER V4.55,  basal_de_sd_a                                                        13/12/18  16:27:23  PAGE 5   

  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
