C251 COMPILER V4.55,  basal_de_tts_RD                                                      13/12/18  16:27:26  PAGE 1   


C251 COMPILER V4.55, COMPILATION OF MODULE basal_de_tts_RD
OBJECT MODULE PLACED IN ..\..\..\..\obj\lib\basal\basal_de_tts_RD.obj
COMPILER INVOKED BY: C:\Keil\C251\BIN\C251.EXE ..\..\..\..\..\libsrc\midware\audioBasal\basal_de_tts_RD.c XSMALL FUNCTIO
                    -NS(REENTRANT) ROM(HUGE) OPTIMIZE(9,SPEED) INCDIR(..\..\..\..\..\inc) DEBUG PRINT(.\list\basal_de_tts_RD.lst) OBJECT(..\.
                    -.\..\..\obj\lib\basal\basal_de_tts_RD.obj) 

stmt  level    source

    1          /********************************************************************************
    2           *                              USDK 5102
    3           *                            Module: POWER MANAGER
    4           *                 Copyright(c) 2001-2009 Actions Semiconductor,
    5           *                            All Rights Reserved.
    6           *
    7           * History:
    8           *      <author>    <time>           <version >             <desc>
    9           *    wuyueqian     2009-9-07 9:42     1.0             build this file
   10           ********************************************************************************/
   11          /*!
   12           * file
   13           * brief
   14           * Author   wuyueqian
   15           * par
   16           *
   17           *      Copyright(c) 2001-2007 Actions Semiconductor, All Rights Reserved.
   18           *
   19           * version 1.0
   20           * date  2008/6/12
   21           *******************************************************************************/
   22          
   23          #include <basal.h>
   24          #include <decC.h>
   25          #include <tts_lib.h>
   26          
   27          #pragma name(MW_BS_AD_CMDR_TTS)
   28          
   29          SD_FILE *m_de_TTS_Fp;
   30          SD_FILE *info_TTS_Fp;
   31          //Open_param_t *m_deTTSOpenparam;
   32          play_status_t  TTSplay_status;
   33          BYTE *m_deTTSDataBuffer;//[512];//解码时用的BUFFER
   34          
   35          uint32  m_deTTSOldDspIntAddrSav;
   36          uint32  m_deTTSOldDmaIntAddrSav;
   37          uint8  m_deTTScTimer_Sav;
   38          uint8  m_deTTSInitFlag;
   39          unsigned char  prev_next_flag;
   40          WORD  deTTSSecCount;
   41          WORD  deTTSSecOffset;
   42          
   43          unsigned char *str_buff;
   44          unsigned unsigned char str_ptr;
   45          unsigned char  tts_lib_flag;
   46          tts_header_t  tts_info_head;
   47          
   48          const char tts_lib[] = "Package.dat";
   49          const char tts_info[] = "INFO.POS";
   50          
   51          #define READ_SECTOR_BYTE_NUMBER 512
   52          #define MOVE_BACKWARD_ONE_PAGE_FLAG  0x22
   53          #define MOVE_FORWARD_ONE_PAGE_FLAG 0x11
   54          #define RANDOM_CHOOSE_ONE_PAGE_FLAG 0x33
   55          
   56          bool tts_info_set(void);
   57          void tts_data_deal(void);
C251 COMPILER V4.55,  basal_de_tts_RD                                                      13/12/18  16:27:26  PAGE 2   

   58          
   59          #ifndef PC
   60          #pragma ROM(large)
   61          //void GetSDErrorTYPE(void);
   62          #pragma ROM(huge)
   63          #else
               //void GetSDErrorTYPE(void);
               //decBreakPointInfor_t g_decBreakPointInfor;
               #endif
   67          
   68          #pragma renamecode(MW_BS_AD_CMDR_TTS)
   69          
   70          #pragma ROM(huge)
   71          uint8 m_deTTSRead_Data(uchar readFileDirection, uint32 position)
   72          {
   73   1          bool result = TRUE;
   74   1          uint32 hook_read_bytes;
   75   1      
   76   1          position = position;
   77   1          readFileDirection = readFileDirection;
   78   1      
   79   1          //断点记录的是解码过的信息
   80   1          //    if ((TTSplay_status.status == PLAYING_REACH_END) || (TTSplay_status.status == PLAYING_ERROR) ||
   81   1          //            (TTSplay_status.status == PLAYING_REACH_HEAD))
   82   1          //    {
   83   1          //        return 0xff;
   84   1          //    }
   85   1          if(TTSplay_status.status == PLAYING_ERROR)
   86   1          {
   87   2              return FALSE;
   88   2          }
   89   1      
   90   1          if (deTTSSecCount == 0)
   91   1          {
   92   2              if(tts_info_set() != TRUE)
   93   2              {
   94   3                  return FALSE;
   95   3              }
   96   2          }
   97   1      
   98   1          if((deTTSSecCount == 1) && (deTTSSecOffset != 0))
   99   1          {
  100   2              hook_read_bytes = deTTSSecOffset;
  101   2          }
  102   1          else
  103   1          {
  104   2              hook_read_bytes = 512;
  105   2          }
  106   1      
  107   1          SD_FRead(m_de_TTS_Fp, m_deTTSDataBuffer, hook_read_bytes);
  108   1          tts_data_deal();
  109   1          if(hook_read_bytes != 512)
  110   1          {
  111   2              memset(m_deTTSDataBuffer + hook_read_bytes, 0x00,
  112   2                     512 - hook_read_bytes);
  113   2              hook_read_bytes = 512;
  114   2          }
  115   1          deTTSSecCount--;
  116   1      
  117   1          return result;
  118   1      }
  119          
  120          void swap_int_byte(int *a)
  121          {
  122   1          char tmp;
  123   1          char *p = (char *)a;
C251 COMPILER V4.55,  basal_de_tts_RD                                                      13/12/18  16:27:26  PAGE 3   

  124   1          tmp = *p;
  125   1          *p = *(p + 1);
  126   1          *(p + 1) = tmp;
  127   1      }
  128          
  129          void swap_long_byte(long *a)
  130          {
  131   1          char tmp;
  132   1          char *p = (char *)a;
  133   1      
  134   1          tmp = *p;
  135   1          *p = *(p + 3);
  136   1          *(p + 3) = tmp;
  137   1      
  138   1          tmp = *(p + 1);
  139   1          *(p + 1) = *(p + 2);
  140   1          *(p + 2) = tmp;
  141   1      }
  142          
  143          void fix_head_data(tts_header_t *tts_info_head)
  144          {
  145   1          swap_int_byte(&tts_info_head->wordcnt);
  146   1          swap_int_byte(&tts_info_head->bytes1);
  147   1          swap_int_byte(&tts_info_head->multi_cnt);
  148   1          swap_int_byte(&tts_info_head->bytes2);
  149   1          swap_int_byte(&tts_info_head->citiaocnt);
  150   1          swap_int_byte(&tts_info_head->bytes3);
  151   1      }
  152          
  153          void fix_pos_data(tts_pos_t *pos)
  154          {
  155   1          swap_long_byte(&pos->start_offset);
  156   1          swap_int_byte(&pos->str_length);
  157   1          swap_int_byte(&pos->multi_offset);
  158   1      }
  159          
  160          bool tts_info_set(void)
  161          {
  162   1          tts_pos_t tts_pos_tmp;
  163   1          tts_multitone_t tts_multitone_item;
  164   1          char pos_tag, find_multitone_tag, qu, wei;
  165   1          uint16 offset;
  166   1          long deTTSApointerSave;
  167   1          unsigned char *pbuf = &str_buff[str_ptr];
  168   1          uint16 citiao_offset;
  169   1      
  170   1          pos_tag = TTS_MULTI_PREV;
  171   1          if(*pbuf == 0x00)
  172   1          {
  173   2              TTSplay_status.status = PLAYING_ERROR;
  174   2              return FALSE;
  175   2          }
  176   1          citiao_offset = 0x20 + (tts_info_head.wordcnt + tts_info_head.multi_cnt) * 8;
  177   1      
  178   1          find_multitone_tag = 0;
  179   1      
  180   1          if ((*pbuf >= (unsigned char)0x80) && (tts_lib_flag != 0))
  181   1          {
  182   2              //每个汉字机内码的第一个字节范围介于0xB0~ 0xF7之间就OK了，转换成区位码就是0~71（十进制）
  183   2              if((*pbuf > (unsigned char)0xAF) && (*pbuf < (unsigned char)0xF8))
  184   2              {
  185   3                  qu = (str_buff[str_ptr] & (unsigned char)0x7F) - 0x30;
  186   3                  wei = (str_buff[str_ptr + 1] & (unsigned char)0x7F) - 32 - 1;
  187   3                  //TTS索引表头数据结构,占据32byte,reserved 24byte
  188   3                  offset = 0x20 + (qu * 94 + wei) * sizeof(tts_pos_t);
  189   3                  str_ptr += 2;
C251 COMPILER V4.55,  basal_de_tts_RD                                                      13/12/18  16:27:26  PAGE 4   

  190   3                  find_multitone_tag = 1;
  191   3                  if(prev_next_flag)
  192   3                  {
  193   4                      pos_tag = TTS_MULTI_NEXT;
  194   4                  }
  195   3                  else
  196   3                  {
  197   4                      pos_tag = TTS_MULTI_PREV;
  198   4                      prev_next_flag = 1;
  199   4                  }
  200   3              }
  201   2              else
  202   2              {
  203   3                  str_ptr += 2;
  204   3                  prev_next_flag = 0;
  205   3                  //relocate to space mute data
  206   3                  offset = citiao_offset + (sizeof(tts_pos_t) - 2) * 0x20;   //ascii char offset
  207   3              }
  208   2          }
  209   1          else
  210   1          {
  211   2              prev_next_flag = 0;
  212   2              if(*pbuf > (tts_info_head.citiaocnt - 1))
  213   2              {
  214   3                  *pbuf = 0x20;
  215   3              }
  216   2              offset = citiao_offset + (sizeof(tts_pos_t) - 2) * (*pbuf);   //ascii char offset
  217   2              str_ptr++;
  218   2          }
  219   1      re_get_struct:
  220   1          SD_FSeek(info_TTS_Fp, SEEK_SET, offset);
  221   1          SD_FRead(info_TTS_Fp, &tts_pos_tmp, sizeof(tts_pos_t));
  222   1      
  223   1          fix_pos_data(&tts_pos_tmp);
  224   1      
  225   1          if((tts_pos_tmp.start_offset == 0) && (tts_pos_tmp.str_length == 0))
  226   1          {
  227   2              offset = citiao_offset + (sizeof(tts_pos_t) - 2) * 0x20;   //ascii char offset
  228   2              goto re_get_struct;
  229   2          }
  230   1      
  231   1          //多音字处理
  232   1          if((find_multitone_tag == 1) && (tts_pos_tmp.multi_offset != 0xffff))
  233   1          {
  234   2              deTTSApointerSave = citiao_offset + (sizeof(tts_pos_t) - 2) * \
  235   2                                  tts_info_head.citiaocnt + tts_pos_tmp.multi_offset;
  236   2              SD_FSeek(info_TTS_Fp, SEEK_SET, deTTSApointerSave);
  237   2      
  238   2              while(find_multitone_tag)
  239   2              {
  240   3                  SD_FRead(info_TTS_Fp, &tts_multitone_item, sizeof(tts_multitone_item));
  241   3      
  242   3                  switch(tts_multitone_item.multitone_tag)
  243   3                  {
  244   4                  case    TTS_MULTI_CON:
  245   4                      qu = tts_multitone_item.qu;
  246   4                      wei = tts_multitone_item.wei;
  247   4                      break;
  248   4      
  249   4                  case    TTS_MULTI_PREV:
  250   4                      if(pos_tag != TTS_MULTI_PREV)
  251   4                      {
  252   5                          if(tts_multitone_item.qu == str_buff[str_ptr - 4] &&
  253   5                                  tts_multitone_item.wei == str_buff[str_ptr - 3])
  254   5                          {
  255   6                              find_multitone_tag = 0;
C251 COMPILER V4.55,  basal_de_tts_RD                                                      13/12/18  16:27:26  PAGE 5   

  256   6                          }
  257   5                      }
  258   4                      break;
  259   4      
  260   4                  case    TTS_MULTI_NEXT:
  261   4                      if(tts_multitone_item.qu == str_buff[str_ptr] &&
  262   4                              tts_multitone_item.wei == str_buff[str_ptr + 1])
  263   4                      {
  264   5                          find_multitone_tag = 0;
  265   5                      }
  266   4      
  267   4                      break;
  268   4      
  269   4                  case    TTS_MULTI_END:
  270   4                  default:
  271   4                      find_multitone_tag = 0;
  272   4                      break;
  273   4                  }
  274   3              }
  275   2      
  276   2              offset = 0x20 + (qu * 94 + wei) * sizeof(tts_pos_t);
  277   2      
  278   2              SD_FSeek(info_TTS_Fp, SEEK_SET, offset);
  279   2              SD_FRead(info_TTS_Fp, &tts_pos_tmp, sizeof(tts_pos_t));
  280   2              fix_pos_data(&tts_pos_tmp);
  281   2          }
  282   1      
  283   1          deTTSApointerSave = tts_pos_tmp.start_offset;
  284   1          deTTSSecOffset = tts_pos_tmp.str_length % 512;
  285   1          deTTSSecCount = tts_pos_tmp.str_length / 512;
  286   1          if(deTTSSecOffset != 0)
  287   1          {
  288   2              deTTSSecCount++;
  289   2          }
  290   1          SD_FSeek(m_de_TTS_Fp, 0, deTTSApointerSave);
  291   1      
  292   1          return TRUE;
  293   1      }
  294          
  295          
  296          void tts_data_deal(void)
  297          {
  298   1          uint16 i;
  299   1          for(i = 0; i < 512; i++)
  300   1          {
  301   2              m_deTTSDataBuffer[i] ^= (unsigned char)0x35;
  302   2          }
  303   1      }
  304          
  305          #ifndef PC
  306          #pragma ROM(huge)
  307          #endif


Module Information          Static   Overlayable
------------------------------------------------
  code size            =    ------     ------
  ecode size           =      1045     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        54     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
C251 COMPILER V4.55,  basal_de_tts_RD                                                      13/12/18  16:27:26  PAGE 6   

  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        21     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
