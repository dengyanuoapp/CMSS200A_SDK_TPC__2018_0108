C251 COMPILER V4.55,  basal_de_c                                                           13/12/18  16:27:19  PAGE 1   


C251 COMPILER V4.55, COMPILATION OF MODULE basal_de_c
OBJECT MODULE PLACED IN ..\..\..\..\obj\lib\basal\basal_de_c.obj
COMPILER INVOKED BY: C:\Keil\C251\BIN\C251.EXE ..\..\..\..\..\libsrc\midware\audioBasal\basal_de_c.c XSMALL FUNCTIONS(RE
                    -ENTRANT) ROM(HUGE) OPTIMIZE(9,SPEED) INCDIR(..\..\..\..\..\inc) DEBUG PRINT(.\basal_de_c.lst) OBJECT(..\..\..\..\obj\lib
                    -\basal\basal_de_c.obj) 

stmt  level    source

    1          /********************************************************************************
    2           *                              USDK 5102
    3           *                            Module: POWER MANAGER
    4           *                 Copyright(c) 2001-2009 Actions Semiconductor,
    5           *                            All Rights Reserved.
    6           *
    7           * History:
    8           *      <author>    <time>           <version >             <desc>
    9           *    wuyueqian     2009-9-07 9:42     1.0             build this file
   10           ********************************************************************************/
   11          /*!
   12           * file
   13           * brief
   14           * Author   wuyueqian
   15           * par
   16           *
   17           *      Copyright(c) 2001-2007 Actions Semiconductor, All Rights Reserved.
   18           *
   19           * version 1.0
   20           * date  2008/6/12
   21           *******************************************************************************/
   22          #include <basal.h>
   23          #include <decC.h>
   24          
   25          #pragma name(MW_BS_AD_CMD2)
   26          
   27          extern HANDLE m_deFileHandle;
   28          extern Open_param_t *m_deOpenparam; //参数表地址
   29          
   30          extern uint32 deApointerSave;
   31          extern uint32 deBpointerSave;
   32          extern uint32 deBreakPointSave;
   33          extern decBreakPointInfor_t m_breakPointInfo;
   34          extern BYTE m_backupmode;
   35          extern const uint8 RTCRDM_table[];
   36          void get_bpt_from_rdm();
   37          
   38          #pragma renamecode(MW_BS_AD_CMD2)
   39          /*
   40           void reserve_function(void)
   41           {
   42          
   43           }
   44           */
   45          bool BackupCommand(void)
   46          {
   47   1          m_deOpenparam->BreakPTSave->ApointSave = deApointerSave;
   48   1          m_deOpenparam->BreakPTSave->BpointSave = deBpointerSave;
   49   1          m_deOpenparam->BreakPTSave->breakPT = deBreakPointSave;
   50   1          if (m_backupmode == 0)//断点续播备份
   51   1          {
   52   2              memcpy(&(m_deOpenparam->BreakPTSave->breakPointInfor), &g_decBreakPointInfor, sizeof(decBreakPoin
             -tInfor_t));
   53   2          }
   54   1          else//AB 复读过程中的断点不保存，只是保存A点，以后断点续播从A点开始
   55   1          {
   56   2              memcpy(&(m_deOpenparam->BreakPTSave->breakPointInfor), &m_breakPointInfo, sizeof(decBreakPointInf
C251 COMPILER V4.55,  basal_de_c                                                           13/12/18  16:27:19  PAGE 2   

             -or_t));
   57   2          }
   58   1          return TRUE;
   59   1      }
   60          
   61          bool RestoreCommand(void *param)
   62          {
   63   1          deApointerSave = m_deOpenparam->BreakPTSave->ApointSave;
   64   1          deBpointerSave = m_deOpenparam->BreakPTSave->BpointSave;
   65   1      
   66   1          if (((uint8) param == Nor_Break_open) || ((uint8) param == ABPlay_open))
   67   1          {
   68   2              deBreakPointSave = m_deOpenparam->BreakPTSave->breakPT;
   69   2              memcpy(&m_breakPointInfo, &(m_deOpenparam->BreakPTSave->breakPointInfor), sizeof(decBreakPointInf
             -or_t));
   70   2          }
   71   1          else if((uint8) param == Hard_Break_open)
   72   1          {
   73   2              get_bpt_from_rdm();
   74   2              deBreakPointSave         = m_breakPointInfo.BreakPointAddr / 0x200;       //字节偏移转扇区偏移
   75   2          }
   76   1          return TRUE;
   77   1      }
   78          
   79          bool APointPlayCommand(void)
   80          {
   81   1          g_decControlInfor.PlayMode = PLAY_MODE_BREAK;
   82   1          memcpy(&g_decBreakPointInfor, &m_breakPointInfo, sizeof(decBreakPointInfor_t));
   83   1          FS_FSeek(0, FS_SEEK_FFROMSTART, m_deFileHandle);
   84   1          decInit();//计算时间不淡入
   85   1          decstart();
   86   1          return TRUE;
   87   1      }
   88          void get_bpt_from_rdm()
   89          {
   90   1          uint8 sfr_bak = SFR_BANK, *pbpt;
   91   1          int i;
   92   1          ReadSFR read_sfr = (ReadSFR)READ_SFR_CODE;
   93   1      
   94   1          SFR_BANK = 0x0c;
   95   1          pbpt = (uint8 *)&m_breakPointInfo;
   96   1          for(i = 0; i < sizeof(g_decBreakPointInfor); i++)
   97   1          {
   98   2              pbpt[i] = read_sfr(0x0c, RTCRDM_table[i]);
   99   2          }
  100   1          SFR_BANK = sfr_bak;
  101   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =    ------     ------
  ecode size           =       440     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
C251 COMPILER V4.55,  basal_de_c                                                           13/12/18  16:27:19  PAGE 3   

End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
