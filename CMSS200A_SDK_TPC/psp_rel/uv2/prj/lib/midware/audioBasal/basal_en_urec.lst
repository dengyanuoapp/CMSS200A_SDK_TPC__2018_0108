C251 COMPILER V4.55,  basal_en_urec                                                        13/12/18  16:27:30  PAGE 1   


C251 COMPILER V4.55, COMPILATION OF MODULE basal_en_urec
OBJECT MODULE PLACED IN ..\..\..\..\obj\lib\basal\basal_en_urec.obj
COMPILER INVOKED BY: C:\Keil\C251\BIN\C251.EXE ..\..\..\..\..\libsrc\midware\audioBasal\basal_en_urec.c XSMALL FUNCTIONS
                    -(REENTRANT) ROM(HUGE) OPTIMIZE(9,SPEED) INCDIR(..\..\..\..\..\inc;..\..\..\..\..\..\..\fwsp\include) DEBUG PRINT(.\basal
                    -_en_urec.lst) OBJECT(..\..\..\..\obj\lib\basal\basal_en_urec.obj) 

stmt  level    source

    1          /********************************************************************************
    2           *                              USDK 5102
    3           *                            Module: POWER MANAGER
    4           *                 Copyright(c) 2001-2009 Actions Semiconductor,
    5           *                            All Rights Reserved.
    6           *
    7           * History:
    8           *      <author>    <time>           <version >             <desc>
    9           *    wuyueqian     2009-9-07 9:42     1.0             build this file
   10           ********************************************************************************/
   11          /*!
   12           * file
   13           * brief
   14           * Author   wuyueqian
   15           * par
   16           *
   17           *      Copyright(c) 2001-2007 Actions Semiconductor, All Rights Reserved.
   18           *
   19           * version 1.0
   20           * date  2008/6/12
   21           *******************************************************************************/
   22          #include <actos.h>
   23          #include <basal.h>
   24          #include <encC.h>
   25          #include <codec.h>
   26          #include <stringH.h>
   27          
   28          #pragma name(MW_BS_AD_EN)
   29          
   30          #define RECORDING_OPEN    0x20
   31          #define RECORDING_LOAD    0x21
   32          
   33          #define READ_ADDRESS        0x0201
   34          #define VOR_TIME_OUT      0x01
   35          #define RECORD_BUFFER_ADDRESS 0x0d80//0xc000
   36          #define RECORD_BUFFER_SIZE 512
   37          
   38          #define WRITE_NONE_PAGE 0
   39          #define WRITE_PAGE 1
   40          //#define WRITE_HEAD 2
   41          #define ONE_PAGE_BITNUM 9
   42          #define INPUT_MIC 0x08
   43          #define INPUT_LINEIN 0x40
   44          #define INPUT_FM 0x02
   45          #define INPUT_DAC 0x01
   46          #define ADPCM 0
   47          #define PCM 1
   48          #define AVR_TURN_OFF 0
   49          #define AVR_TURN_ON_VOICE 1
   50          #define AVR_TURN_ON_SONG 2
   51          
   52          #define AK211X_SUPPORT_WAV_ONLY
   53          
   54          BYTE far m_wavRecStatus;// = RECORDING_WAITING;      //当前状态
   55          handle far m_wavRecFileHandle;// = NULL;    //打开语音文件的句柄
   56          //uint8 far m_wavRecOldTimerNum; //timer isr 使用的timer号码
   57          uint16 far m_wavRecOldDspIsr; //保存旧的hip isr
C251 COMPILER V4.55,  basal_en_urec                                                        13/12/18  16:27:30  PAGE 2   

   58          uint16 far m_wavRecOldDMAIsr; //保存旧的ADC isr
   59          
   60          char far m_wavRecFileName[12];
   61          
   62          void encode_setAudioFormat(void *param);
   63          bool encode_getNewFileHandle(void *param);
   64          void encode_initAudioFormat(BYTE music_type);
   65          void encode_getAudioFormat(void *param);
   66          void ch_bit_rate(char *tmp);
   67          //int8 parse_bit_rate(uint8 *ch);
   68          void setRecordBufferClock(void);
   69          
   70          #pragma renamecode(MW_BS_AD_EN)
   71          
   72          /*******************************************************************************
   73           * Function:       Wav2rProceed
   74           * Description:    wav 录音编码写入文件
   75           * Input：
   76           * Output：        0:没有写, 1:写一个扇区, 8:已写了WAV头文件
   77           *                 -1:出错,用wavrSendCommand(MC_GETSTATUS,mp3_rec_status_t *)获取详细信息
   78           * Other：         一次写一个扇区(512 bytes),
   79           *******************************************************************************/
   80          #ifdef PC
               retWavrProceed_e srProceed(void)
               #else
   83          retWavrProceed_e rProceed(void)
   84          #endif
   85          //retWavrProceed_e srProceed(void)
   86          {
   87   1          uchar status;
   88   1          BOOL result;
   89   1          encTimerIntSub();
   90   1          status = encGetBitstream();//查询enc的数据编码
   91   1          if (WRITE_PAGE == status)
   92   1          {
   93   2              result = FS_FWrite((const char *) g_encWriteFilePara.WriteFileBuffAddr,
   95   2                                 (char)(g_encWriteFilePara.WriteFileCurSize >> ONE_PAGE_BITNUM),    //风险，从1
             -6位变8位
   95   2                                 m_wavRecFileHandle);
   96   2              if (result == 1)
   97   2              {
   98   3                  g_encWriteFilePara.FileLen += g_encWriteFilePara.WriteFileCurSize;
   99   3                  return WRITE_PAGE;
  100   3              }
  101   2              else
  102   2              {
  103   3                  encStop();
  104   3                  encExit();
  105   3                  IRQ_Release(m_wavRecOldDspIsr, IRQ_DSP);
  106   3                  //IRQ_Release(m_wavRecOldDMAIsr, IRQ_DMA2);
  107   3      
  108   3                  /*     if(m_wavRecOldTimerNum)
  109   3                              {
  110   3                  //                  TM_KillTimer(m_wavRecOldTimerNum);
  111   3                                      m_wavRecOldTimerNum = 0;
  112   3                              }*/
  113   3                  FS_FClose(m_wavRecFileHandle);
  114   3                  m_wavRecStatus = RECORDING_DISK_ERROR;
  115   3                  //文件已关闭
  116   3                  m_wavRecFileHandle = NULL;
  117   3                  return WRITE_WRONG;
  118   3              }
  119   2          }
  120   1          else if (status == 0x02)// 是文件头写入WAV文件
  121   1          {
  122   2              encExit();
C251 COMPILER V4.55,  basal_en_urec                                                        13/12/18  16:27:30  PAGE 3   

  123   2              IRQ_Release(m_wavRecOldDspIsr, IRQ_DSP);
  124   2              //              IRQ_Release(m_wavRecOldDMAIsr, IRQ_DMA2);
  125   2              /*         if(m_wavRecOldTimerNum)
  126   2                              {
  127   2              //                      TM_KillTimer(m_wavRecOldTimerNum);
  128   2                                      m_wavRecOldTimerNum = 0;
  129   2                              }*/
  130   2              result = FS_FClose(m_wavRecFileHandle);
  131   2              if (!result)
  132   2              {
  133   3                  m_wavRecStatus = RECORDING_DISK_ERROR;
  134   3                  return WRITE_WRONG;
  135   3              }
  136   2              if(g_encControlInfor.SongType != 0)
  137   2              {
  138   3                  m_wavRecFileHandle = FS_FOpen(m_wavRecFileName, FS_OPEN_NORMAL);
  139   3                  if (NULL == m_wavRecFileHandle)
  140   3                  {
  141   4                      return WRITE_NONE;
  142   4                  }
  143   3      #ifndef PC
  144   3                  //write head
  145   3                  result = FS_FWrite((const char *) g_encWriteFilePara.WriteFileBuffAddr,
  147   3                                     (char)(g_encWriteFilePara.WriteFileCurSize >> ONE_PAGE_BITNUM),
  147   3                                     m_wavRecFileHandle);
  148   3      #endif
  149   3                  m_wavRecStatus = RECORDING_STOP;
  150   3                  if (result == 1)
  151   3                  {
  152   4                      return WRITE_HEAD;
  153   4                  }
  154   3                  else
  155   3                  {
  156   4                      m_wavRecStatus = RECORDING_DISK_ERROR;
  157   4                      return WRITE_WRONG;
  158   4                  }
  159   3              }
  160   2              else
  161   2              {
  162   3                  //已经成功关闭文件
  163   3                  m_wavRecFileHandle = NULL;
  164   3                  m_wavRecStatus = RECORDING_STOP;
  165   3                  return WRITE_HEAD;
  166   3              }
  167   2          }
  168   1          else
  169   1          {
  170   2              return WRITE_NONE;
  171   2          }
  172   1      }
  173          /*******************************************************************************
  174           * Function:       wavrSendCommand
  175           * Description:    wav encode modual entry
  176           * Input：
  177           * Output：
  178           * Other：         // 发送MC_STOP之后,需要等到wav2rProceed()返回8才可以发送MC_CLOSE
  179           *******************************************************************************/
  180          #ifdef PC
               BOOL srSendCommand(BYTE cmd, BYTE music_type, void *param)
               #else
  183          BOOL rSendCommand(BYTE cmd, BYTE music_type, void *param)
  184          #endif
  185          //BOOL srSendCommand(BYTE cmd, BYTE music_type, void* param)
  186          {
  187   1          mp3_rec_status_t *wav_rec_status; // AP 层
  188   1          //    time_t *pTime;
C251 COMPILER V4.55,  basal_en_urec                                                        13/12/18  16:27:30  PAGE 4   

  189   1          BOOL result;
  190   1      
  191   1          switch (cmd)
  192   1          {
  193   2          case MC_OPEN:
  194   2              encode_initAudioFormat(2);
  195   2              break;
  196   2      
  197   2          case MC_CLOSE:
  198   2              /*       if(m_wavRecOldTimerNum)
  199   2                              {
  200   2              //                      TM_KillTimer(m_wavRecOldTimerNum);
  201   2                                      m_wavRecOldTimerNum = 0;
  202   2                              }*/
  203   2              if ((m_wavRecStatus == RECORDING_STOP))// && (m_wavRecFileHandle != NULL))
  204   2              {
  205   3                  if (NULL != m_wavRecFileHandle)
  206   3                  {
  207   4      #ifdef PC
                               WriteWavDataPC(m_wavRecFileHandle);
               #endif
  210   4                      FS_FClose(m_wavRecFileHandle);
  211   4                      m_wavRecFileHandle = NULL;
  212   4                  }
  213   3                  else
  214   3                  {
  215   4                      m_wavRecStatus = RECORDING_EXCEPTION;
  216   4                      return FALSE;
  217   4                  }
  218   3              }
  219   2              else
  220   2              {
  221   3                  m_wavRecStatus = RECORDING_EXCEPTION;
  222   3                  return FALSE;
  223   3              }
  224   2      
  225   2              break;
  226   2      
  227   2          case MC_LOAD:
  228   2              result = encode_getNewFileHandle(param);
  229   2              if (!result)
  230   2              {
  231   3                  return FALSE;
  232   3              }
  233   2      
  234   2              //#if 0 //usound 录音, only mp2
  235   2              // UI Simulator 不需要写录音文件头
  236   2              if(g_encControlInfor.SongType != 0)
  237   2              {
  238   3      #ifndef PC
  239   3                  FS_FWrite((const char *) g_encWriteFilePara.WriteFileBuffAddr, 1, m_wavRecFileHandle);
  240   3      #endif
  241   3                  g_encWriteFilePara.FileLen += 512;
  242   3              }
  243   2              //#endif
  244   2              encInit();
  245   2              m_wavRecStatus = RECORDING_WAITING;
  246   2              //BankSwitch(0xc7);
  247   2              //BankSwitch(BYTE2_OF(encAudioIntSub));
  248   2              break;
  249   2      
  250   2          case MC_RECORD:
  251   2              //        if ((m_wavRecStatus == RECORDING_WAITING) && (m_wavRecFileHandle != NULL))
  252   2              //        {
  253   2              //            m_wavRecOldTimerNum = TM_SetTimer((int16) encTimerIntSub, 2);
  254   2              //            if (m_wavRecOldTimerNum == 0)
C251 COMPILER V4.55,  basal_en_urec                                                        13/12/18  16:27:30  PAGE 5   

  255   2              //            {
  256   2              //                m_wavRecStatus = RECORDING_DISK_ERROR;
  257   2              //                return FALSE;
  258   2              //            }
  259   2              //m_wavRecOldDspIsr = IRQ_Intercept((uint16) encAudioIntSub, IRQ_DSP);
  260   2              //m_wavRecOldDMAIsr = IRQ_Intercept((int)encDMAIntSub, IRQ_DMA2);
  261   2      
  262   2              encStart();
  263   2              //        }
  264   2              /*        else
  265   2                      { // 继续录音
  266   2                          if (m_wavRecStatus == RECORDING_PAUSE)
  267   2                          {
  268   2                              encContinue();
  269   2                          }
  270   2                          else
  271   2                          {
  272   2                              m_wavRecStatus = RECORDING_EXCEPTION;
  273   2                              return FALSE;
  274   2                          }
  275   2                      } */
  276   2              m_wavRecStatus = RECORDING_RECORDING;
  277   2              break;
  278   2      
  279   2              /*        case MC_PAUSE:
  280   2                      if (m_wavRecStatus == RECORDING_RECORDING)
  281   2                      {
  282   2                          encPause();
  283   2                      }
  284   2                      else
  285   2                      {
  286   2                          m_wavRecStatus = RECORDING_EXCEPTION;
  287   2                          return FALSE;
  288   2                      }
  289   2                      m_wavRecStatus = RECORDING_PAUSE;
  290   2                      break;*/
  291   2      
  292   2          case MC_STOP:
  293   2              encStop();//codec prepare the head data for writing
  294   2              break;
  295   2      
  296   2              //        case MC_SETGAIN:
  297   2              //        g_encControlInfor.InputGain = (BYTE) param;
  298   2              //        break;
  299   2      
  300   2              //        case MC_SETGAIN_DSP:
  301   2              //        if ((((BYTE) param) < 2))// && (((BYTE) param) >= 0))
  302   2              //        {
  303   2              //            g_encControlInfor.DSPGain = (BYTE) param;
  304   2              //        }
  305   2              //        break;
  306   2              //        case MC_SETGAIN_ADC:
  307   2              //        if ((((BYTE) param) < 4))// && (((BYTE) param) >= 0))
  308   2              //        {
  309   2              //            g_encControlInfor.ADCGain = (BYTE) param;
  310   2              //        }
  311   2              //        break;
  312   2      
  313   2              //        case MC_SET_RECORD_DELAY:
  314   2              //        g_encControlInfor.DelayTime = (BYTE) param;
  315   2      
  316   2              //        case MC_SETAVRFLAG:
  317   2              //        if ((((BYTE) param) < 3))// && (((BYTE) param) >= 0))
  318   2              //       {
  319   2              //            g_encControlInfor.AVRFlag = (BYTE) param;
  320   2              //       }
C251 COMPILER V4.55,  basal_en_urec                                                        13/12/18  16:27:30  PAGE 6   

  321   2              //        break;
  322   2              /*        case MC_SETAVRLEVEL:
  323   2                      g_encControlInfor.AVRLevel = (WORD) param;
  324   2                      break;
  325   2                      case MC_SETAVRDELAY:
  326   2                      g_encControlInfor.AVRDelay = (BYTE) param;
  327   2                      break;
  328   2      
  329   2                      case MC_SET_SONG_TYPE:
  330   2                      g_encControlInfor.SongType = (BYTE) param;
  331   2                      break;
  332   2      
  333   2                      case MC_RECODEMODE:
  334   2                      g_encControlInfor.EncodeMode = (BYTE) param;
  335   2                      break;
  336   2      
  337   2                      case MC_SETSOURCE:
  338   2                      g_encControlInfor.InputSel = ((resource_t *) param)->input;
  339   2                      //memcpy(&(g_encControlInfor.InputSel), &(((resource_t *)param)->input), sizeof(input_t))
             -;
  340   2                      break; */
  341   2      
  342   2              //        case MC_SETAUDIOFMT:
  343   2              //        encode_setAudioFormat(param);
  344   2              //        break;
  345   2      
  346   2              //    case MC_GETTIME:
  347   2              //        pTime = (time_t *) param;
  348   2              //        memcpy(pTime, &(g_encStatus.CurTime.TimeHour), sizeof(time_t));
  349   2              //        break;
  350   2      
  351   2          case MC_GETSTATUS:
  352   2              wav_rec_status = (mp3_rec_status_t *) param;
  353   2              if (g_encStatus.Status != 0x0)
  354   2              {
  355   3                  wav_rec_status->status = g_encStatus.Status;
  356   3              }
  357   2              else
  358   2              {
  359   3                  wav_rec_status->status = m_wavRecStatus;
  360   3              }
  361   2              wav_rec_status->gain = g_encControlInfor.InputGain;
  362   2              wav_rec_status->avrDelay = g_encControlInfor.AVRDelay;
  363   2              wav_rec_status->avrLevel = g_encControlInfor.AVRLevel;
  364   2              memcpy(&(wav_rec_status->source.input), &(g_encControlInfor.InputSel), sizeof(input_t));
  365   2              memcpy(&(wav_rec_status->total_time.hour), &(g_encStatus.CurTime.TimeHour), sizeof(time_t));
  366   2              break;
  367   2      
  368   2              //        case MC_GETAUDIOFMT:
  369   2              //        encode_getAudioFormat(param);
  370   2              //        break;
  371   2      
  372   2          default:
  373   2              return FALSE;
  374   2              //break;
  375   2          }//switch(cmd)
  376   1      
  377   1          return TRUE;
  378   1      }
*** WARNING C47 IN LINE 183 OF ..\..\..\..\..\LIBSRC\MIDWARE\AUDIOBASAL\BASAL_EN_UREC.C: 'music_type': unreferenced para
             -meter
  379          
  380          //void setRecordBufferClock(void)
  381          //{
  382          //    uint8 sfr_save;
  383          //    sfr_save = SFR_BANK;
C251 COMPILER V4.55,  basal_en_urec                                                        13/12/18  16:27:30  PAGE 7   

  384          //    SFR_BANK = BANK_CMU_RMU;
  385          //    MCSR7 &= 0xE3;
  386          //    MCSR7 |= 0x08;
  387          //    SFR_BANK = sfr_save;
  388          //}
  389          
  390          /*******************************************************************************
  391           * Function:       encode_initAudioFormat
  392           * Description:    初始化录音参数
  393           * Input：
  394           * Output：
  395           * Other：         对应 MC_OPEN
  396           *******************************************************************************/
  397          
  398          void encode_initAudioFormat(BYTE music_type)
  399          {
  400   1          g_encControlInfor.InputSel = ENC_MIC;
  401   1      
  402   1          //music_type = music_type;
  403   1          g_encControlInfor.SongType = music_type;
  404   1          g_encControlInfor.FsIndex = _FS_16K;
  405   1          g_encControlInfor.ChannelNum = SINGLE_CH;//default is 32kbps
  406   1          //g_encControlInfor.BitDepth = 16;
  407   1          g_encControlInfor.BTIndex = 1;
  408   1          g_encControlInfor.EncodeMode = (BYTE) PCM;
  409   1          g_encControlInfor.InputGain = 5;
  410   1          g_encControlInfor.ADCGain = 2;
  411   1          g_encControlInfor.DSPGain = 0;
  412   1          g_encControlInfor.DelayTime = 15;//20*15 =300MS
  413   1          g_encControlInfor.EnergyOut = 0;//disable
  414   1          g_encControlInfor.AVRFlag = AVR_TURN_OFF;//disable
  415   1          g_encControlInfor.AVRDelay = 3;
  416   1          g_encControlInfor.AVRLevel = 700;
  417   1          //g_encControlInfor.LeftOffset = reserved;
  418   1          //g_encControlInfor.RightOffset = reserved;
  419   1      
  420   1          //setRecordBufferClock();
  421   1          g_encWriteFilePara.WriteFileBuffAddr = RECORD_BUFFER_ADDRESS;
  422   1          g_encWriteFilePara.WriteFileCurSize = RECORD_BUFFER_SIZE;
  423   1          g_encWriteFilePara.FileLen = 0;
  424   1          //g_encWriteFilePara.WriteFileHandle 在MC_LOAD中初始化
  425   1      
  426   1          m_wavRecStatus = RECORDING_WAITING;
  427   1      }
  428          
  429          /*******************************************************************************
  430           * Function:       encode_getNewFileHandle
  431           * Description:    检查文件是否存在,不存在,创建该文件.
  432           * Input：
  433           * Output：
  434           * Other：         对应 MC_LOAD
  435           *******************************************************************************/
  436          
  437          BOOL encode_getNewFileHandle(void *param)
  438          {
  439   1          memcpy(m_wavRecFileName, (char *) param, 11);
  440   1          m_wavRecFileName[11] = '\0';
  441   1      
  442   1          m_wavRecFileHandle = NULL;
  443   1          /*    m_wavRecFileHandle = FS_FOpen(m_wavRecFileName, 0);
  444   1              if ((m_wavRecFileHandle != NULL) || (m_wavRecStatus != RECORDING_WAITING))
  445   1              {
  446   1                  m_wavRecStatus = RECORDING_EXCEPTION;
  447   1                  m_wavRecFileHandle = NULL;
  448   1                  return FALSE;
  449   1              }*/
C251 COMPILER V4.55,  basal_en_urec                                                        13/12/18  16:27:30  PAGE 8   

  450   1          //recording_waiting and m_wavRecFileHandle == null
  451   1          m_wavRecFileHandle = FS_FCreate(m_wavRecFileName);
  452   1          if (m_wavRecFileHandle == NULL)
  453   1          {
  454   2              m_wavRecStatus = RECORDING_DISK_ERROR;
  455   2              return FALSE;
  456   2          }
  457   1          g_encWriteFilePara.WriteFileHandle = m_wavRecFileHandle;
  458   1          return TRUE;
  459   1      }
  460          
  461          /*******************************************************************************
  462           * Function:       parse_bit_rate
  463           * Description:    转换 AP层的 BIT RATE 到 CODE层的BIT RATE
  464           * Input：
  465           * Output：
  466           * Other：         //
  467           *******************************************************************************/
  468          /*int8 parse_bit_rate(uint8 *ch)
  469          {
  470              int tmp;
  471              tmp = (*(ch) - '0') * 100 + (*(ch + 1) - '0') * 10 + (*(ch + 2) - '0');
  472          #if 0
  473              switch (tmp)
  474              {
  475                  case 8:
  476                  return _BT_8K;
  477          
  478                  case 16:
  479                  return _BT_16K;
  480          
  481                  case 24:
  482                  return _BT_24K;
  483          
  484                  case 32:
  485                  return _BT_32K;
  486          
  487                  case 40:
  488                  return _BT_40K;
  489          
  490                  case 48:
  491                  return _BT_48K;
  492          
  493                  case 56:
  494                  return _BT_56K;
  495          
  496                  case 64:
  497                  return _BT_64K;
  498          
  499                  case 80:
  500                  return _BT_80K;
  501          
  502                  case 96:
  503                  return _BT_96K;
  504          
  505                  case 112:
  506                  return _BT_112K;
  507          
  508                  case 128:
  509                  return _BT_128K;
  510          
  511                  case 144:
  512                  return _BT_144K;
  513          
  514                  case 160:
  515                  return _BT_160K;
C251 COMPILER V4.55,  basal_en_urec                                                        13/12/18  16:27:30  PAGE 9   

  516          
  517                  case 192:
  518                  return _BT_192K;
  519          
  520                  case 224:
  521                  return _BT_224K;
  522          
  523                  case 256:
  524                  return _BT_256K;
  525          
  526                  case 320:
  527                  return _BT_320K;
  528          
  529                  case 384:
  530                  return _BT_384K;
  531          #endif
  532              switch (tmp)
  533              {
  534                  case 64:
  535                   return 0;
  536          
  537                   case 128:
  538                   return 1;
  539          
  540                   case 256:
  541                   return 2;
  542          
  543                  default:
  544                  return -1;
  545              }
  546             // return -1;
  547          }*/
  548          
  549          /*******************************************************************************
  550           * Function:       encode_setAudioFormat
  551           * Description:    设置 CODE 层的  g_encInitPara
  552           * Input：
  553           * Output：
  554           * Other：         对应 MC_SETAUDIOFMT
  555           *******************************************************************************/
  556          /*
  557          void encode_setAudioFormat(void* param)
  558          {
  559              audio_format_t *m_audio_fmt;
  560              int8 result;
  561              m_audio_fmt = (audio_format_t *) param;
  562          
  563          //#ifndef AK211X_SUPPORT_WAV_ONLY
  564          #if 1
  565              //int8 result;
  566              result = parse_bit_rate(m_audio_fmt->bit_rate);
  567              if(result >= 0)
  568              {
  569                  //if(g_encControlInfor.SongType==0)
  570                  {
  571                     g_encControlInfor.BTIndex = result;
  572                  }
  573                  g_encControlInfor.FsIndex = m_audio_fmt->sample_rate;
  574                  g_encControlInfor.ChannelNum = m_audio_fmt->channel;
  575              }
  576          #else
  577              g_encControlInfor.FsIndex = m_audio_fmt->sample_rate;
  578              g_encControlInfor.ChannelNum = m_audio_fmt->channel;
  579          #endif
  580          }*/
  581          /*******************************************************************************
C251 COMPILER V4.55,  basal_en_urec                                                        13/12/18  16:27:30  PAGE 10  

  582           * Function:       ch_bit_rate
  583           * Description:    转换 CODE 层的 BIT RATE 到 AP 层的BIT RATE
  584           * Input：
  585           * Output：
  586           * Other：         //
  587           *******************************************************************************/
  588          /*void ch_bit_rate(char *tmp)
  589          {
  590              *tmp = ' ';
  591              *(tmp + 1) = ' ';
  592              *(tmp + 3) = 0;
  593              switch (g_encControlInfor.BTIndex)
  594              {
  595                  case _BT_8K:
  596                  *(tmp + 2) = '8';
  597                  break;
  598          
  599                  case _BT_16K:
  600                  *(tmp + 1) = '1';
  601                  *(tmp + 2) = '6';
  602                  break;
  603                  case _BT_24K:
  604                  *(tmp + 1) = '2';
  605                  *(tmp + 2) = '4';
  606                  break;
  607                  case _BT_32K:
  608                  *(tmp + 1) = '3';
  609                  *(tmp + 2) = '2';
  610                  break;
  611                  case _BT_40K:
  612                  *(tmp + 1) = '4';
  613                  *(tmp + 2) = '0';
  614                  break;
  615                  case _BT_48K:
  616                  *(tmp + 1) = '4';
  617                  *(tmp + 2) = '8';
  618                  break;
  619                  case _BT_56K:
  620                  *(tmp + 1) = '5';
  621                  *(tmp + 2) = '6';
  622                  break;
  623          
  624                  case _BT_64K:
  625                  *(tmp + 1) = '6';
  626                  *(tmp + 2) = '4';
  627                  break;
  628          
  629                  case _BT_80K:
  630                  *(tmp + 1) = '8';
  631                  *(tmp + 2) = '0';
  632                  break;
  633          
  634                  case _BT_96K:
  635                  *(tmp + 1) = '9';
  636                  *(tmp + 2) = '6';
  637                  break;
  638          
  639                  case _BT_112K:
  640                  *tmp = '1';
  641                  *(tmp + 1) = '1';
  642                  *(tmp + 2) = '2';
  643                  break;
  644          
  645                  case _BT_128K:
  646                  *tmp = '1';
  647                  *(tmp + 1) = '2';
C251 COMPILER V4.55,  basal_en_urec                                                        13/12/18  16:27:30  PAGE 11  

  648                  *(tmp + 2) = '8';
  649                  break;
  650          
  651                  case _BT_144K:
  652                  *tmp = '1';
  653                  *(tmp + 1) = '4';
  654                  *(tmp + 2) = '4';
  655                  break;
  656          
  657                  case _BT_160K:
  658                  *tmp = '1';
  659                  *(tmp + 1) = '6';
  660                  *(tmp + 2) = '0';
  661                  break;
  662          
  663                  case _BT_192K:
  664                  *tmp = '1';
  665                  *(tmp + 1) = '9';
  666                  *(tmp + 2) = '2';
  667                  break;
  668          
  669                  case _BT_224K:
  670                  *tmp = '2';
  671                  *(tmp + 1) = '2';
  672                  *(tmp + 2) = '4';
  673                  break;
  674          
  675                  case _BT_256K:
  676                  *tmp = '2';
  677                  *(tmp + 1) = '5';
  678                  *(tmp + 2) = '6';
  679                  break;
  680          
  681                  case _BT_320K:
  682                  *tmp = '3';
  683                  *(tmp + 1) = '2';
  684                  *(tmp + 2) = '0';
  685                  break;
  686                  default:
  687                  break;
  688              }
  689          }*/
  690          
  691          /*******************************************************************************
  692           * Function:       encode_getAudioFormat
  693           * Description:    获取 CODE 层 audio_format_t
  694           * Input：
  695           * Output：
  696           * Other：         对应 MC_GETAUDIOFMT
  697           *******************************************************************************/
  698          /*
  699          void encode_getAudioFormat(void* param)
  700          {
  701              audio_format_t *m_audio_fmt;
  702          
  703              m_audio_fmt = (audio_format_t *) param;
  704              m_audio_fmt->sample_rate = g_encControlInfor.FsIndex;
  705              m_audio_fmt->channel = g_encControlInfor.ChannelNum;
  706              ch_bit_rate(m_audio_fmt->bit_rate); //语法
  707          } */


Module Information          Static   Overlayable
------------------------------------------------
  code size            =    ------     ------
  ecode size           =       910     ------
  data size            =    ------     ------
C251 COMPILER V4.55,  basal_en_urec                                                        13/12/18  16:27:30  PAGE 12  

  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =        19     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
