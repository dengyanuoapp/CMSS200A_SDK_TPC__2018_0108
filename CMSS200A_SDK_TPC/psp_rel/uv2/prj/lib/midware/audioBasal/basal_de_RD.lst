C251 COMPILER V4.55,  basal_de_RD                                                          13/12/18  16:27:20  PAGE 1   


C251 COMPILER V4.55, COMPILATION OF MODULE basal_de_RD
OBJECT MODULE PLACED IN ..\..\..\..\obj\lib\basal\basal_de_RD.obj
COMPILER INVOKED BY: C:\Keil\C251\BIN\C251.EXE ..\..\..\..\..\libsrc\midware\audioBasal\basal_de_RD.c XSMALL FUNCTIONS(R
                    -EENTRANT) ROM(HUGE) OPTIMIZE(9,SPEED) INCDIR(..\..\..\..\..\inc) DEBUG PRINT(.\basal_de_RD.lst) OBJECT(..\..\..\..\obj\l
                    -ib\basal\basal_de_RD.obj) 

stmt  level    source

    1          /********************************************************************************
    2           *                              USDK 5102
    3           *                            Module: POWER MANAGER
    4           *                 Copyright(c) 2001-2009 Actions Semiconductor,
    5           *                            All Rights Reserved.
    6           *
    7           * History:
    8           *      <author>    <time>           <version >             <desc>
    9           *    wuyueqian     2009-9-07 9:42     1.0             build this file
   10           ********************************************************************************/
   11          /*!
   12           * file
   13           * brief
   14           * Author   wuyueqian
   15           * par
   16           *
   17           *      Copyright(c) 2001-2007 Actions Semiconductor, All Rights Reserved.
   18           *
   19           * version 1.0
   20           * date  2008/6/12
   21           *******************************************************************************/
   22          
   23          #include <basal.h>
   24          #include <decC.h>
   25          
   26          #pragma name(MW_BS_AD_CMDR)
   27          
   28          HANDLE m_deFileHandle;
   29          Open_param_t *m_deOpenparam;
   30          uint32 deApointerSave;
   31          uint32 deBpointerSave;
   32          uint32 deBreakPointSave; //当前文件断点的地址保存，一个扇区为单位，m_read_date更新
   33          decBreakPointInfor_t m_breakPointInfo;//只保存一次断点信息，例如A点
   34          uint32 deFilepages;//当前播放文件总页数
   35          BYTE m_backupmode;
   36          play_status_t play_status;
   37          BYTE *m_deDataBuffer; //[512];//解码时用的BUFFER
   38          uint32 m_deOldDspIntAddrSav;//保存旧的INT地址
   39          uint32 m_deOldDmaIntAddrSav;
   40          uint8 m_decTimer_Sav;
   41          time_t m_Totaltimelength;
   42          bool m_deABok_sav;
   43          
   44          #define READ_SECTOR_BYTE_NUMBER 512
   45          #define MOVE_FORWARD_ONE_PAGE_FLAG 0x11
   46          #define MOVE_BACKWARD_ONE_PAGE_FLAG  0x22
   47          #define RANDOM_CHOOSE_ONE_PAGE_FLAG 0x33
   48          #define ONE_PAGE_BITNUM 9
   49          
   50          #ifdef FASTFORWARDBACKWARD
               #define MOVE_FORWARD_MORE_PAGE_FLAG 0x91  //  用于加速快进
               #define MOVE_BACKWARD_MORE_PAGE_FLAG  0xa2 // 用于加速快进
               #endif
   54          
   55          
   56          #ifndef PC
   57          //#pragma ROM(large)
C251 COMPILER V4.55,  basal_de_RD                                                          13/12/18  16:27:20  PAGE 2   

   58          void GetFSErrorTYPE(void);
   59          void save_bpt_to_rdm(void);
   60          #pragma ROM(huge)
   61          #else
               void GetFSErrorTYPE(void);
               decBreakPointInfor_t g_decBreakPointInfor;
               #endif
   65          
   66          const uint8 RTCRDM_table[] = {SFR_RTCRDM0, SFR_RTCRDM1, SFR_RTCRDM2, SFR_RTCRDM3, SFR_RTCRDM4, SFR_RTCRDM
             -5, SFR_RTCRDM6, SFR_RTCRDM7, SFR_RTCRDM8,
   67                                        SFR_RTCRDM9, SFR_RTCRDM10, SFR_RTCRDM11, SFR_RTCRDM12, SFR_RTCRDM13, SFR_RT
             -CRDM14, SFR_RTCRDM15, SFR_RTCRDM16,
   68                                        SFR_RTCRDM17, SFR_RTCRDM18
   69                                       };
   70          
   71          #pragma renamecode(MW_BS_AD_CMDR)
   72          
   73          //#pragma ROM(large)
   74          #pragma ROM(huge)
   75          uint8 m_deRead_Data(uchar readFileDirection, uint32 position)
   76          {
   77   1          bool result = TRUE;
   78   1          uint32 posPage = 0;
   79   1          uint32 posDistance = 0;
   80   1          //CLEAR_WATCHDOG_MIDWARE();
   81   1          ClearWatchDog();
   82   1      
   83   1          //断点记录的是解码过的信息
   84   1          if ((play_status.status == PLAYING_REACH_END) || (play_status.status == PLAYING_ERROR) ||
   85   1                  (play_status.status == PLAYING_REACH_HEAD))
   86   1          {
   87   2              return 0xff;
   88   2          }
   89   1      
   90   1          deBreakPointSave = (uint32)(FS_FTell(m_deFileHandle));
   91   1          save_bpt_to_rdm();
   92   1          if (deBreakPointSave == deFilepages)
   93   1          {
   94   2              play_status.status = PLAYING_REACH_END;
   95   2              return 0xff;
   96   2          }
   97   1      
   98   1          if (MOVE_BACKWARD_ONE_PAGE_FLAG == readFileDirection)
   99   1          {
  100   2              result = FS_FSeek(2, FS_SEEK_BFROMCUR, m_deFileHandle);
  101   2          }
  102   1      #ifdef FASTFORWARDBACKWARD
                   else if(readFileDirection == MOVE_BACKWARD_MORE_PAGE_FLAG)
                   {
                       result = FS_FSeek(16, FS_SEEK_BFROMCUR, m_deFileHandle);        //如果有需要，可以修改扇区数目，便于加速
             -快进退快退。往前seek 2n个扇区，准备读n个扇区
                   }
               #endif
  108   1          else if (RANDOM_CHOOSE_ONE_PAGE_FLAG == readFileDirection)
  109   1          {
  110   2              posPage = position >> ONE_PAGE_BITNUM;
  111   2              if (posPage > deBreakPointSave)
  112   2              {
  113   3                  result = FS_FSeek((int32)(posPage - deBreakPointSave), FS_SEEK_FFROMCUR, m_deFileHandle);
  114   3              }
  115   2              else if (posPage < deBreakPointSave)
  116   2              {
  117   3                  posDistance = (deBreakPointSave) - posPage;
  118   3                  if (posDistance < (deBreakPointSave << 1))
  119   3                  {
  120   4                      result = FS_FSeek((int32)(posDistance), FS_SEEK_BFROMCUR, m_deFileHandle);
C251 COMPILER V4.55,  basal_de_RD                                                          13/12/18  16:27:20  PAGE 3   

  121   4                  }
  122   3                  else
  123   3                  {
  124   4                      result = FS_FSeek((int32)(posPage), FS_SEEK_FFROMSTART, m_deFileHandle);
  125   4                  }
  126   3      
  127   3              }
  128   2              else
  129   2              {
  130   3                  //do nothing
  131   3              }
  132   2          }
  133   1          else
  134   1          {
  135   2              //do nothing
  136   2          }
  137   1      
  138   1          if (FALSE == result)
  139   1          {
  140   2              GetFSErrorTYPE();
  141   2              return FALSE;
  142   2          }
  143   1      
  144   1          switch (g_decControlInfor.ABSetFlag)
  145   1          {
  146   2          case AB_FLAG_DEAL_AB_PROCESS:
  147   2          {
  148   3              if (play_status.status == PLAYING_WAIT_B) //已经到达B点或者超过，等待stop命令
  149   3              {
  150   4                  break;
  151   4              }
  152   3      
  153   3              if ((play_status.status == PLAYING_AB) && (deBreakPointSave >= deBpointerSave))//放到B点
  154   3              {
  155   4                  if (FALSE != m_deABok_sav) //不用再播放了
  156   4                  {
  157   5                      //次数到,清B点
  158   5                      m_deABok_sav = FALSE;
  159   5                      play_status.status = PLAYING_PLAYING;
  160   5                      g_decControlInfor.ABSetFlag = AB_CLEAR;
  161   5                      g_decControlInfor.PlayMode = PLAY_MODE_NORMAL; //not need
  162   5                      //play_status.signal = SIGNAL_CLEAR_B;//通知AB要清B点
  163   5                      play_status.signal = 0;//modify by wuyueqian 2010-4-3
  164   5                  }
  165   4                  else
  166   4                  {
  167   5                      //次数未到,通知AP回到A点
  168   5                      play_status.status = PLAYING_WAIT_B;
  169   5                      play_status.signal = SIGNAL_REACH_B;
  170   5                  }
  171   4              }
  172   3              break;
  173   3          }
  174   2      
  175   2          case AB_FLAG_SET_A: //设置完A点后ab flag为0，不进行AB处理，需等B点也设好后才开始AB播放处理
  176   2          {
  177   3              deApointerSave = deBreakPointSave;
  178   3              g_decControlInfor.ABSetFlag = AB_CLEAR;//其实非AB_FLAG_SET_A和非0XFF就可以了
  179   3              memcpy(&m_breakPointInfo, &g_decBreakPointInfor, sizeof(decBreakPointInfor_t));
  180   3              break;
  181   3          }
  182   2      
  183   2          case AB_FLAG_SET_B:
  184   2          {
  185   3              deBpointerSave = deBreakPointSave;
  186   3              play_status.signal = SIGNAL_REACH_B;
C251 COMPILER V4.55,  basal_de_RD                                                          13/12/18  16:27:20  PAGE 4   

  187   3              play_status.status = PLAYING_WAIT_B; //只在这个m_deRead_Data函数中有效，StopBPlay后出变成PLAYING_
             -WAIT_A
  188   3              g_decControlInfor.ABSetFlag = AB_FLAG_DEAL_AB_PROCESS; //以后检测是否到B点
  189   3              break;
  190   3          }
  191   2      
  192   2          default:
  193   2          {
  194   3              break;
  195   3          }
  196   2      
  197   2          }
  198   1      #ifdef FASTFORWARDBACKWARD
                   if((readFileDirection == MOVE_FORWARD_MORE_PAGE_FLAG) || (readFileDirection == MOVE_BACKWARD_MORE_PAG
             -E_FLAG))
                   {
                       result = FS_FRead(m_deDataBuffer, 8, m_deFileHandle);   //如果有需要，可以修改扇区数目，便于加速快
             -丝焱耍看味羘个扇区
                   }
                   else
                   {
                       result = FS_FRead(m_deDataBuffer, 1, m_deFileHandle);
                   }
               #else
  208   1          result = FS_FRead(m_deDataBuffer, 1, m_deFileHandle);
  209   1      #endif
  210   1      
  211   1          deBreakPointSave = (uint32)(FS_FTell(m_deFileHandle));
  212   1          g_decReadFilePara.ReadFileCurAddr = (deBreakPointSave - 1) * READ_SECTOR_BYTE_NUMBER;
  213   1      
  214   1          if (result == 0)
  215   1          {
  216   2              GetFSErrorTYPE();
  217   2              return FALSE;
  218   2          }
  219   1          return TRUE;
  220   1      }
  221          
  222          /*  FS_GetInfo()
  223           *描述
  224           获取文件系统出错信息
  225           *参数
  226           *返回
  227           char status：出错信息
  228           1   磁盘读写错误
  229           2   磁盘写保护
  230           3   磁盘未格式化
  231           4   文件操作超出文件边界,目录操作超出目录边界
  232           5   文件操作的目标文件,目录操作的目录项不存在
  233           6   表示文件操作时没有磁盘空间,不能写数据或者扩展目录
  234           表示目录操作时没有磁盘空间,不能扩展目录,新建子目录
  235           7   文件操作时根目录目录项满
  236           8   删除目录时返回,表示删除的目录非空
  237           */
  238          
  239          void GetFSErrorTYPE(void)
  240          {
  241   1          char result;
  242   1      
  243   1          result = FS_GetInfo();
  244   1          switch (result)
  245   1          {
  246   2          case FS_INFO_OVEFLOW: //FIX ME
  247   2          {
  248   3              if (FS_FTell(m_deFileHandle) == 0)
  249   3              {
C251 COMPILER V4.55,  basal_de_RD                                                          13/12/18  16:27:20  PAGE 5   

  250   4                  play_status.status = PLAYING_REACH_HEAD;
  251   4              }
  252   3              else
  253   3              {
  254   4                  play_status.status = PLAYING_REACH_END;
  255   4              }
  256   3              break;
  257   3          }
  258   2      
  259   2          case FS_INFO_RW_ERR:
  260   2          {
  261   3              play_status.status = PLAYING_ERROR;
  262   3              break;
  263   3          }
  264   2      
  265   2          default:
  266   2          {
  267   3              break;
  268   3          }
  269   2          }
  270   1      }
  271          void save_bpt_to_rdm(void)
  272          {
  273   1          uint8 sfr_bak = SFR_BANK, *pbpt;
  274   1          int i;
  275   1          WriteSFR write_sfr = (WriteSFR)WRITE_SFR_CODE;
  276   1      
  277   1          SFR_BANK = 0x0c;
  278   1          pbpt = (uint8 *)&g_decBreakPointInfor;
  279   1          for(i = 0; i < sizeof(g_decBreakPointInfor); i++)
  280   1          {
  281   2              write_sfr(0x0c, RTCRDM_table[i], pbpt[i]);
  282   2          }
  283   1          SFR_BANK = sfr_bak;
  284   1      }
  285          #ifndef PC
  286          #pragma ROM(huge)
  287          #endif


Module Information          Static   Overlayable
------------------------------------------------
  code size            =    ------     ------
  ecode size           =       655     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        65     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        19     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
