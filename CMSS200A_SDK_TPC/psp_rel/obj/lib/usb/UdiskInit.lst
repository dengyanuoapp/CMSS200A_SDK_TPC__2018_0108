C251 COMPILER V4.55,  UdiskInit                                                            15/07/16  16:03:48  PAGE 1   


C251 COMPILER V4.55, COMPILATION OF MODULE UdiskInit
OBJECT MODULE PLACED IN ..\..\..\obj\lib\usb\UdiskInit.obj
COMPILER INVOKED BY: E:\Keil\C251\BIN\C251.EXE ..\..\..\libsrc\usb\UdiskInit.c XSMALL FUNCTIONS(REENTRANT) ROM(HUGE) INC
                    -DIR(..\..\..\inc) I4 ORDER DEBUG PRINT(..\..\..\obj\lib\usb\UdiskInit.lst) OBJECT(..\..\..\obj\lib\usb\UdiskInit.obj) 

stmt  level    source

    1          /*
    2           ********************************************************************************************************
             -*
    3           *                                       ACTOS GL3976
    4           *
    5           *
    6           *                           (c) Copyright 2002-2007, Actions Co,Ld.
    7           *                                   All Right Reserved
    8           *
    9           * File   : Udiskinit.msa
   10           * By     : zhouxl
   11           * Version: v1.02     first version     2004-12-20 08:09
   12           ********************************************************************************************************
             -*
   13           */
   14          
   15          #include "udisklib.h"
   16          
   17          #pragma name(UDISK_INIT)
   18          void sFlashCapCheck(void);
   19          void sPartitionTableCheck(void);
   20          void sSetLUN(void);
   21          void sFlashBootSectorCheck(void);
   22          void Vram_Init(void);
   23          void Vram_Update(void);
   24          void sFillDiskACap(uint32 udiskcap);
   25          
   26          #pragma renamecode(?PR?UDISK_INIT)
   27          
   28          /*
   29           ********************************************************************************************************
             -*
   30           *                                           UDiskInit
   31           *
   32           * Description: Udisk init.
   33           *
   34           * Arguments  : None.
   35           *
   36           * Returns    : None.
   37           *
   38           * Note(s)    : None.
   39           ********************************************************************************************************
             -*
   40           */
   41          uint8 UDiskInit(void *pcallback, int8 udisk_set)
   42          {
   43   1          uint8 sfrbak;
   44   1      
   45   1          if (pcallback != 0)
   46   1          {
   47   2              sFlashLedFlag = 1; //置要闪灯标志
   48   2              sFlashLed = (uint8 *) pcallback; //保存地址到Rcode
   49   2          }
   50   1      
   51   1          udisk_setting = (uint8) udisk_set & 0x03;
   52   1          if (udisk_setting == 0)
   53   1          {
   54   2              HS_Device_Dscrptr.iSerialNumber = 0;
C251 COMPILER V4.55,  UdiskInit                                                            15/07/16  16:03:48  PAGE 2   

   55   2          }
   56   1      
   57   1          GetUsbVidPid((vidpid_t *) &HS_Device_Dscrptr.idVendor);
   58   1          GetUsbAttribute((usbattri_t *) (&(CMD_Inquiry_information_FOB + 8)));
   59   1      
   60   1      #ifdef USB_HOST_SUPPORT
   61   1          //    usb_detectfunc_dereg(); //注销Timer中断中USB查询处理入口
   62   1      #endif
   63   1      
   64   1          /*fixme:need系统读出不对
   65   1           Vram_Init();                    //清除Vram中Flash和卡簇链有效标记,并在退出后根据是否有写Flash或卡重
             -轮蒙媳曛疚
   66   1           */
   67   1      
   68   1          //装载usb的库code
   69   1          sfrbak = SFR_BANK;
   70   1          SFR_BANK = BANK_CMU_RMU;
   71   1          //    MemBankCtl = MemBankCtl & (uint8)0xf7; //PCMRAM and MURAM2 to code FF9000H~FFBFFFH
   72   1          //    MCSR5 = (MCSR5 & (uint8)0xf9) | 0x04; //PCMRAM:MCU clk
   73   1          //    MCSR6 = (MCSR6 & (uint8)0xf3) | 0x08; //MURAM2:MCU clk
   74   1          MEMCLKSELCTL1 = 0x00; //PCMRAM and URAM to MCU clk
   75   1      
   76   1          return UDiskInitInternal();
   77   1      }
   78          
   79          /*
   80           ********************************************************************************************************
             -*
   81           *                                           UDiskInitInternal
   82           *
   83           * Description: Udisk init.
   84           *
   85           * Arguments  : None.
   86           *
   87           * Returns    : None.
   88           *
   89           * Note(s)    : None.
   90           ********************************************************************************************************
             -*
   91           */
   92          uint8 UDiskInitInternal(void)
   93          {
   94   1          ClearWatchdog();
   95   1      
   96   1          USB_State = 0; //状态结构定义   0:空闲状态 再调用时要初始化
   97   1          illegalLBAFlag = 0; //LBA是否非法,用于防范发命令进行非法读
   98   1          //返回值 非MLC flash:0  MLC flash:1; 2:SPI Nor flash; 3:LBA flash; 4:card base; 5:TLC flash; 6:Toshib
             -a 24nm flash
   99   1          flash_type = (uint8) UD_GetFlashType();
  100   1      
  101   1          //SectorType flash扇区大小,1=512bytes/sector, 2=1024bytes/sector,4=2048bytes/sector;
  102   1          //UD_GetSctrSize 返回值:0=512bytes/sector; 1=1024bytes/sector; 2=2048bytes/sector;
  103   1          if ((flash_type != 2) && (flash_type != 4))
  104   1          {
  105   2              SectorType = (1 << ((uint8) UD_GetSctrSize()));
  106   2          }
  107   1      
  108   1          //SectorType = 0x02; //flash扇区大小,1=512bytes/sector, 2=1024bytes/sector,4=2048bytes/sector;
  109   1          if (flash_type == 4)//对于卡base不做8k对齐，那么需要恢复每个扇区的大小以及最后一个扇区的地址
  110   1          {
  111   2              SectorType = 0x01;
  112   2          }
  113   1      
  114   1          if (fake_udisk_cap != 0x00)
  115   1          {
  116   2              //设置Udisk上报给PC的容量,sFillDiskACap的参数以512byte为单位,而fake_udisk_cap以M为单位
C251 COMPILER V4.55,  UdiskInit                                                            15/07/16  16:03:48  PAGE 3   

  117   2              //note:设置A盘容量并置假容量标记,此接口必须在UDiskInit之前调用,否则加密盘会引起问题.
  118   2              sFillDiskACap((uint32) fake_udisk_cap << 11);
  119   2              set_fake_ucap_flag = 0x01;
  120   2          }
  121   1      
  122   1          sFlashCapCheck(); //Flash和卡容量检查，用于上报PC
  123   1      
  124   1          flash_page_sctrnum = 0x0002; // need fix ???  //Get_Flash_Page_Size();
  125   1      
  126   1          //会装上卡驱动
  127   1          sCardCapCheck();
  128   1      
  129   1          if (flash_type != 2)
  130   1          {
  131   2              sPartitionTableCheck(); //分区表检查，确认是否在加密状态
  132   2              sFlashBootSectorCheck(); //引导扇区检查,若不具备磁盘结构便破坏使其为未格式化
  133   2              if (flash_type != 0x04)
  134   2              {
  135   3                  Partion_MBR_Initial(); //检查FAT MBR/DBR,并计算出DBR偏移,数据区起始地址
  136   3              }
  137   2          }
  138   1      
  139   1          sSetLUN(); //检查用户设置的磁盘数目,设置正确的LUN
  140   1      
  141   1          ClearWatchdog();
  142   1      
  143   1          return 1;
  144   1      }
  145          
  146          /*
  147           ********************************************************************************************************
             -*
  148           *                                           sFlashCapCheck
  149           *
  150           * Description: Flash Capacity Check
  151           *
  152           * Arguments  : None.
  153           *
  154           * Returns    : None.
  155           *
  156           * Note(s)    :
  157           *            预留40h个扇区不用,是为了苹果系统格式化
  158           *            苹果格式化后在XP格式化第一次不成功,第二次才成功
  159           *            发现问题是:在MAC下格式化小机时,会写MBR至设备零扇区,在MBR的分区表里写入DBR的起始扇区
  160           *            为0X3F扇区(1磁头0柱面1扇区)开始,并将设备报上来的容量认为是从DBR开始可用的扇区数,写至MBR第一
             -个分区表项里.
  161           *            设备再插入XP系统进行格式化时,XP系统首先会根据MBR中的内容去计算得到最后一个扇区的LBA(0x3F + 
             -设备容量),并
  162           *            写第0个扇区和最后一个扇区,然而XP根据MBR计算得到的最后一个扇区的LBA超出了Flash的容量,导致读
             -瓷璞缸詈笠桓
  163           *            扇区不一致,进而报格式化失败错误.并致使驱动写坏了Flash0扇区开始的一些内容,所以第二次格式化会
             -成功.
  164           *            解决方法：在设备识别出是MAC系统时，报设备容量为实际容量 - 0x40
  165           ********************************************************************************************************
             -*
  166           */
  167          static void sFlashCapCheck(void)
  168          {
  169   1          uint32 tmp;
  170   1      
  171   1          SDDiskCap = (uint32) GetSDCap();
  172   1          VMCap = (uint32) GetVMCap();
  173   1          //    MICap = (uint32)GetMICap();
  174   1          UICap = (uint32) GetUICap();
  175   1      
  176   1          if (flash_type != 2)
C251 COMPILER V4.55,  UdiskInit                                                            15/07/16  16:03:48  PAGE 4   

  177   1          {
  178   2              EncryptInfoSector = SDDiskCap + VMCap + MICap + UICap - 1;
  179   2      
  180   2              tmp = (uint32) GetHideDiskCap(); //返回隐藏盘的容量(扇区为单位)
  181   2              AutoRunDiskStartAddr = SDDiskCap + VMCap + MICap + UICap + tmp;
  182   2      
  183   2              AutoRunDiskCapacity = (uint32) GetAutoRunDiskCap(); //返回AutoRun光盘的容量(扇区为单位)
  184   2              if (AutoRunDiskCapacity == 0)
  185   2              {
  186   3                  AutoRunDiskFlag = 0; //AutoRun光盘存在标志: 0:不存在; 非0:存在
  187   3              }
  188   2              else
  189   2              {
  190   3                  AutoRunDiskFlag = 0xff;
  191   3              }
  192   2      
  193   2              UdiskStartAddr = (AutoRunDiskStartAddr + AutoRunDiskCapacity);
  194   2              //U盘的起始扇区号,使U盘起始扇区模16为零(因Flash驱动读写以16sector为单位,且数据要对齐)
  195   2              if ((UdiskStartAddr & 0x0000000f) != 0x00)
  196   2              {
  197   3                  UdiskStartAddr = (UdiskStartAddr & (uint32) 0xfffffff0) + 0x10;
  198   3              }
  199   2      
  200   2              Cap_cmd_info_DiskCDROM.LastLogBlockAddr = AutoRunDiskCapacity >> 2;
  201   2      
  202   2              sFlashDrvCheck(); //切换Flash Driver
  203   2      
  204   2              tmp = (uint32) UD_GetCap(); //以1MByte为单位
  205   2              flash_capacity = tmp << 3; //以128K为单位
  206   2      
  207   2              //保存U盘总可用扇区总数,并预留0x40个扇区不用.
  208   2              udisk_total_capacity = (tmp << 11) - UdiskStartAddr - 0x100;
  209   2      
  210   2              if (set_fake_ucap_flag == 0x00)
  211   2              {
  212   3                  sFillDiskACap(udisk_total_capacity);
  213   3              }
  214   2      
  215   2              //U盘读写时会对地址做对齐动作,读写地址加偏移DataAreaOffset,而磁盘总容量也需同步,防止计算是否越界
             -贝砦
  216   2              udisk_total_capacity = udisk_total_capacity + 0x100;
  217   2          }
  218   1      }
  219          
  220          /*
  221           ********************************************************************************************************
             -*
  222           *                                           sPartitionTableCheck
  223           *
  224           * Description: Partition Table Check, 确认是否在加密状态.
  225           *
  226           * Arguments  : None.
  227           *
  228           * Returns    : None.
  229           *
  230           * Note(s)    : None.
  231           ********************************************************************************************************
             -*
  232           */
  233          static void sPartitionTableCheck(void)
  234          {
  235   1          encrypt_info *encrypt_info_p;
  236   1          uint32 tmp;
  237   1      
  238   1          //初始化分区标志
  239   1          SplitDiskFlag = 0;
C251 COMPILER V4.55,  UdiskInit                                                            15/07/16  16:03:48  PAGE 5   

  240   1          EncryptFlag = 0;
  241   1          PasswdPassOk = 0;
  242   1      
  243   1          //设置假容量后不再支持加密分区功能
  244   1          if (set_fake_ucap_flag == 0x00)
  245   1          {
  246   2              encrypt_info_p = (encrypt_info *) DATABUFFER;
  247   2              //读Flash 1扇区数据到Uram中UramRWStartAdd起始的地方去
  248   2              sFlash_Rds(RW_FIX, EncryptInfoSector, DATABUFFER);
  249   2      
  250   2              //是否有分区
  251   2              if (encrypt_info_p->SplitDiskRecord == 0x01)
  252   2              {
  253   3                  sFlash_Rds(RW_FIX, UdiskStartAddr, DATABUFFER);
  254   3      
  255   3                  //是否Actions分区表, 0:是  起始值：不是; 非Actions MBR，即非加密
  256   3                  if (memcmp(MBR_Bak, DATABUFFER, 0xe0) == 0)
  257   3                  {
  258   4                      //分区有效，置标志位
  259   4                      SplitDiskFlag = 1;
  260   4      
  261   4                      sFlash_Rds(RW_FIX, EncryptInfoSector, DATABUFFER);
  262   4                      //是否有密码
  263   4                      EncryptFlag = encrypt_info_p->IfEncryptRecord;
  264   4      
  265   4                      //恢复A盘容量
  266   4                      tmp = encrypt_info_p->DiskACapacityRecord;
  267   4                      EndianReverse((uint8 *) &tmp, sizeof(tmp));
  268   4                      tmp = tmp / SectorType;
  269   4                      Cap_cmd_info_DiskA.LastLogBlockAddr = tmp;
  270   4                      Formatcap_cmd_info_DiskA.CurrentCap = tmp;
  271   4                      Formatcap_cmd_info_DiskA.FomatableCap = tmp;
  272   4      
  273   4                      //算出DiskB在Flash的真正起始地址
  274   4                      tmp = encrypt_info_p->DiskBStartAddrRecord;
  275   4                      EndianReverse((uint8 *) &tmp, sizeof(tmp));
  276   4                      EncryptDiskBStartAddr = tmp + UdiskStartAddr;
  277   4                      //恢复B盘容量
  278   4                      tmp = encrypt_info_p->DiskBCapacityRecord;
  279   4                      EndianReverse((uint8 *) &tmp, sizeof(tmp));
  280   4                      Cap_cmd_info_DiskB.LastLogBlockAddr = tmp;
  281   4                      Formatcap_cmd_info_DiskB.CurrentCap = tmp;
  282   4                      Formatcap_cmd_info_DiskB.FomatableCap = tmp;
  283   4      
  284   4                      //算出DiskC在Flash的真正起始地址
  285   4                      tmp = encrypt_info_p->DiskCStartAddrRecord;
  286   4                      EndianReverse((uint8 *) &tmp, sizeof(tmp));
  287   4                      EncryptDiskCStartAddr = tmp + UdiskStartAddr;
  288   4                      //恢复C盘容量
  289   4                      tmp = encrypt_info_p->DiskCCapacityRecord;
  290   4                      EndianReverse((uint8 *) &tmp, sizeof(tmp));
  291   4                      Cap_cmd_info_DiskC.LastLogBlockAddr = tmp;
  292   4                      Formatcap_cmd_info_DiskC.CurrentCap = tmp;
  293   4                      Formatcap_cmd_info_DiskC.FomatableCap = tmp;
  294   4      
  295   4                      if (encrypt_info_p->DataSectorsForEncOkRecord != 0xddcc)
  296   4                      {
  297   5                          encrypt_info_p->DataSectorsForEncOkRecord = 0xddcc;
  298   5                          //将读至Uram Buffer中1扇区数据再写至对应此数据的Flash中
  299   5                          sFlash_Wrts(RW_FIX, EncryptInfoSector, DATABUFFER);
  300   5                      }
  301   4                  }
  302   3                  else
  303   3                  {
  304   4                      memset(DATABUFFER, 0, 0x200);
  305   4                      //将读至Uram Buffer中1扇区数据再写至对应此数据的Flash中
C251 COMPILER V4.55,  UdiskInit                                                            15/07/16  16:03:48  PAGE 6   

  306   4                      sFlash_Wrts(RW_FIX, EncryptInfoSector, DATABUFFER);
  307   4                  }
  308   3              }
  309   2          }
  310   1      }
  311          
  312          /*
  313           ********************************************************************************************************
             -*
  314           *                                           sSetLUN
  315           *
  316           * Description: 检查用户设置的磁盘数目,Set LUN Number.
  317           *
  318           * Arguments  : None.
  319           *
  320           * Returns    : None.
  321           *
  322           * Note(s)    : None.
  323           ********************************************************************************************************
             -*
  324           */
  325          static void sSetLUN(void)
  326          {
  327   1          uint8 cLun;
  328   1      
  329   1          cLun = 0;
  330   1      
  331   1          if (DiskAppearSelect == 0) //用户的盘符选择  0:多盘符(默认)  01h:普通盘  02h:加密盘  03h:插卡
  332   1          {
  333   2              cLun = SplitDiskFlag;
  334   2              if (ShowMultiDiskFlag == 0) //是否需要显示卡盘符
  335   2              {
  336   3                  cLun += CardExistFlag;
  337   3              }
  338   2              else
  339   2              {
  340   3                  cLun++; //无论是否插卡，都要显示盘符，因此LUN至少为1
  341   3              }
  342   2          }
  343   1      
  344   1          //for autorun
  345   1          if (AutoRunDiskFlag != 0x00) //AutoRun光盘存在标志: 0:不存在; 非0:存在
  346   1          {
  347   2              cLun = cLun + 1;
  348   2          }
  349   1      
  350   1          MaxLUN = cLun;
  351   1      }
  352          
  353          /*
  354           ********************************************************************************************************
             -*
  355           *                                           sFlashBootSectorCheck
  356           *
  357           * Description: Flash Udisk引导扇区检查,若不具备磁盘结构便破坏使其为未格式化.
  358           *
  359           * Arguments  : None.
  360           *
  361           * Returns    : None.
  362           *
  363           * Note(s)    : None.
  364           ********************************************************************************************************
             -*
  365           */
  366          static void sFlashBootSectorCheck(void)
  367          {
C251 COMPILER V4.55,  UdiskInit                                                            15/07/16  16:03:48  PAGE 7   

  368   1          char *pcDataBuffer;
  369   1      
  370   1          //清物理0扇区与逻辑0扇区是否重合变量
  371   1          Phy0EquLog0Flag = 0;
  372   1          //DATABUFFER为sFlash_Lgcl_RdFix函数读到Uram B2中的起始地址
  373   1          pcDataBuffer = DATABUFFER;
  374   1          //读MBR
  375   1          sFlash_Rds(RW_FIX, UdiskStartAddr, DATABUFFER);
  376   1      
  377   1          if ((*pcDataBuffer == 0xeb) && (*(pcDataBuffer + 2) == 0x90))
  378   1          {
  379   2              //磁盘正确,物理0扇区与逻辑0扇区重合
  380   2              Phy0EquLog0Flag = 1;
  381   2          }
  382   1          //是否Actions分区表, 0:是  非0:不是; 非Actions MBR，即非加密
  383   1          else if (memcmp(MBR_Bak, UDISKSTARTADDRURAMADD, 0xe0) != 0)
  384   1          {
  385   2              //磁盘未格式化,物理0扇区与逻辑0扇区重合
  386   2              Phy0EquLog0Flag = 0x01;
  387   2              if ((*(pcDataBuffer + 510) != 0x55) || (*(pcDataBuffer + 511) != 0xaa))
  388   2              {
  389   3                  //读fat表
  390   3                  sFlash_Rds(RW_FIX, UdiskStartAddr + 1, DATABUFFER);
  391   3                  if ((*pcDataBuffer != 0xff) || (*(pcDataBuffer + 1) != 0xf8))
  392   3                  {
  393   4                      memset(DATABUFFER, 0, 0x200);
  394   4                      //破坏Boot区,使其未格式化
  395   4                      sFlash_Wrts(RW_FIX, UdiskStartAddr, DATABUFFER);
  396   4                      sFlash_Wrts(RW_FIX, UdiskStartAddr + 1, DATABUFFER);
  397   4                  }
  398   3              }
  399   2          }
  400   1          else
  401   1          {
  402   2          }
  403   1      }
  404          
  405          /*
  406           ********************************************************************************************************
             -*
  407           *                                           UDiskSetDiskNum
  408           *
  409           * Description: 设置磁盘出现数目,要在调用UdiskInit前调用 0:多盘符(默认)  01h:普通盘  02h:加密盘  03h:插卡
             -.
  410           *
  411           * Arguments  : None.
  412           *
  413           * Returns    : None.
  414           *
  415           * Note(s)    : None.
  416           ********************************************************************************************************
             -*
  417           */
  418          void UDiskSetDiskNum(int8 selector)
  419          {
  420   1          DiskAppearSelect = 0;
  421   1          if (selector < 4)
  422   1          {
  423   2              DiskAppearSelect = (uint8) selector;
  424   2          }
  425   1      }
  426          
  427          /*
  428           ********************************************************************************************************
             -*
  429           *                                           UDiskSetWP
C251 COMPILER V4.55,  UdiskInit                                                            15/07/16  16:03:48  PAGE 8   

  430           *
  431           * Description: 设置磁盘写保护,应在UDiskRun前调用.
  432           *
  433           * Arguments  : None.
  434           *
  435           * Returns    : None.
  436           *
  437           * Note(s)    : None.
  438           ********************************************************************************************************
             -*
  439           */
  440          uint8 UDiskSetWP(int8 letter)
  441          {
  442   1          uint8 ret;
  443   1      
  444   1          ret = 0;
  445   1          if (letter == 'C')
  446   1          {
  447   2              FlashWPFlag = 0x01;
  448   2              ret = 1;
  449   2          }
  450   1          if (letter == 'H')
  451   1          {
  452   2              CardWPFlag = 0x01;
  453   2              ret = 1;
  454   2          }
  455   1      
  456   1          return ret;
  457   1      }
  458          
  459          /*
  460           ********************************************************************************************************
             -*
  461           *                                           Vram_Init
  462           *
  463           * Description: 清除Vram中Flash和卡簇链有效标记,并在退出后根据是否有写Flash或卡重新置上标志位.
  464           *
  465           * Arguments  : None.
  466           *
  467           * Returns    : None.
  468           *
  469           * Note(s)    : None.
  470           ********************************************************************************************************
             -*
  471           */
  472          /*
  473           void Vram_Init(void)
  474           {
  475           sFlash_Rds(RW_FIX,(SDDiskCap + VM_FS_FLAG/0x200), DATABUFFER);
  476           flash_vram_vld =  *((uint8*)DATABUFFER+0x04);
  477           *((uint8*)DATABUFFER+0x04) = 0xff;                //Flash簇链有效标记
  478           *((uint8*)DATABUFFER+0x0C) = 0xff;                //卡簇链有效标记
  479           sFlash_Wrts(RW_FIX,(SDDiskCap + VM_FS_FLAG/0x200), DATABUFFER);
  480           }
  481           */
  482          
  483          /*
  484           ********************************************************************************************************
             -*
  485           *                                           Udisk_Exit_Handle
  486           *
  487           * Description: Udisk正常退出时处理入口,如Vram标记回写,USB消息处理Timer中断重新注册.
  488           *
  489           * Arguments  : None.
  490           *
  491           * Returns    : None.
C251 COMPILER V4.55,  UdiskInit                                                            15/07/16  16:03:48  PAGE 9   

  492           *
  493           * Note(s)    : None.
  494           ********************************************************************************************************
             -*
  495           */
  496          void Udisk_Exit_Handle(void)
  497          {
  498   1          /*fixme:need系统读出不对
  499   1           Vram_Update();
  500   1           */
  501   1      #ifdef USB_HOST_SUPPORT
  502   1          //    USB_DetectFnc_Initial();
  503   1      #endif
  504   1      }
  505          
  506          /*
  507           ********************************************************************************************************
             -*
  508           *                                           Vram_Update
  509           *
  510           * Description: 清除Vram中Flash和卡簇链有效标记,并在退出后根据是否有写Flash或卡重新置上标志位.
  511           *
  512           * Arguments  : None.
  513           *
  514           * Returns    : None.
  515           *
  516           * Note(s)    : None.
  517           ********************************************************************************************************
             -*
  518           */
  519          /*
  520           void Vram_Update(void)
  521           {
  522           //发生过Udisk写动作,因Vram标记在进入时已经被请掉不需要恢复;没有写动作,但是其Vram标记本来就没有,也不需要
             -指
  523           if ((flash_disk_write_flag==0x00) && (flash_vram_vld!=0x00))
  524           {
  525           sFlash_Rds(RW_FIX,(SDDiskCap + VM_FS_FLAG/0x200), DATABUFFER);
  526           //Flash簇链有效标记
  527           *((uint8*)DATABUFFER+0x04) = flash_vram_vld;
  528           sFlash_Wrts(RW_FIX,(SDDiskCap + VM_FS_FLAG/0x200), DATABUFFER);
  529           }
  530           }
  531           */
  532          
  533          /*
  534           ********************************************************************************************************
             -*
  535           *                                           sFillDiskACap
  536           *
  537           * Description: Fill DiskA Capacity.
  538           *
  539           * Arguments  : udiskcap:DiskA Capacity,512byte单位
  540           *
  541           * Returns    : None.
  542           *
  543           * Note(s)    : None.
  544           ********************************************************************************************************
             -*
  545           */
  546          void sFillDiskACap(uint32 udiskcap)
  547          {
  548   1          //初始化blocklength
  549   1          Cap_cmd_info_DiskA.BlockLengthInBytes = 0x200;
  550   1      
  551   1          Cap_cmd_info_DiskA.BlockLengthInBytes = Cap_cmd_info_DiskA.BlockLengthInBytes * SectorType;
C251 COMPILER V4.55,  UdiskInit                                                            15/07/16  16:03:48  PAGE 10  

  552   1          Cap_cmd_info_DiskA.LastLogBlockAddr = udiskcap / SectorType - 1;
  553   1          Formatcap_cmd_info_DiskA.CurrentCapBlockLength[0] = 0x00;
  554   1          Formatcap_cmd_info_DiskA.CurrentCapBlockLength[1] = 0x02 * SectorType;
  555   1          Formatcap_cmd_info_DiskA.CurrentCapBlockLength[2] = 0x00;
  556   1          Formatcap_cmd_info_DiskA.FomatableCapBlockLength[0] = 0x00;
  557   1          Formatcap_cmd_info_DiskA.FomatableCapBlockLength[1] = 0x02 * SectorType;
  558   1          Formatcap_cmd_info_DiskA.FomatableCapBlockLength[2] = 0x00;
  559   1          Formatcap_cmd_info_DiskA.CurrentCap = udiskcap / SectorType;
  560   1          Formatcap_cmd_info_DiskA.FomatableCap = udiskcap / SectorType;
  561   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =    ------     ------
  ecode size           =      1363     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
