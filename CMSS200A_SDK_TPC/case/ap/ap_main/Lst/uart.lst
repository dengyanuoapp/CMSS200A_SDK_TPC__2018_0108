C251 COMPILER V4.55,  uart                                                                 25/07/16  15:03:09  PAGE 1   


C251 COMPILER V4.55, COMPILATION OF MODULE uart
OBJECT MODULE PLACED IN .\Obj\uart.obj
COMPILER INVOKED BY: E:\Keil\C251\BIN\C251.EXE uart.c XSMALL FUNCTIONS(REENTRANT) ROM(HUGE) OPTIMIZE(9,SPEED) BROWSE INC
                    -DIR(..\..\..\psp_rel\inc;..\..\inc) I4 DEBUG PRINT(.\Lst\uart.lst) OBJECT(.\Obj\uart.obj) 

stmt  level    source

    1          /********************************************************************************
    2           *                              AS260A
    3           *                            Module: USB Sound
    4           *                 Copyright(c) 2001-2012 Actions Semiconductor,
    5           *                            All Rights Reserved.
    6           *
    7           * History:
    8           *      <author>    <time>            <version >             <desc>
    9           *      dengtaiping 2012-10-23 16:40     1.0                build this file
   10           ********************************************************************************/
   11          /*!
   12           * \file     usound_init.c
   13           * \brief    .
   14           * \author   dengtaiping
   15           * \par      GENERAL DESCRIPTION:
   16           *               usb、AUDIO等模块初始化
   17           * \par      EXTERNALIZED FUNCTIONS:
   18           *               这里描述调用到外面的模块
   19           *
   20           *      Copyright(c) 2001-2012 Actions Semiconductor, All Rights Reserved.
   21           *
   22           * \version 1.0
   23           * \date  2012/10/23
   24           *******************************************************************************/
   25          #include "uart.h"
   26          
   27          #pragma name(UART)
   28          
   29          uint32 uart_isr_no;
   30          uart_fifo_t uart_fifo;
   31          SD_FILE *fwcfgfp;
   32          uint8* head_read_buf;
   33          uint8* data_read_buf;
   34          uart_data_t* uart_data;
   35          
   36          void get_uart_data(uint8 index);
   37          void init_uart_info(void);
   38          
   39          const uint8 uart_data_str[] = "UART_1.BIN";
   40          
   41          const uint8 uart_start_block[8] = 
   42                  {0xFF, 0x55, 0x04, 0x00, 0x38, 0x03, 0xE9, 0xD8};
   43          
   44          #define max_send_byte 8
   45          void uart_send_msg(uint8* msg_buf)
   46          {
   47   1              uint8 sfr_temp = SFR_BANK;
   48   1              SFR_BANK = BANK_UART;
   49   1          while((*msg_buf)!=0)
   50   1          {        
   51   2              while((UART_STA&(0x01<<6))!=0)
   52   2              {
   53   3                  
   54   3              }
   55   2              UART_TXDAT=*msg_buf;
   56   2              msg_buf++;
   57   2          }
   58   1              while (UART_STA & 0x08)
C251 COMPILER V4.55,  uart                                                                 25/07/16  15:03:09  PAGE 2   

   59   1          {
   60   2              
   61   2          }   
   62   1              SFR_BANK = sfr_temp;
   63   1              return;
   64   1      }
   65          
   66          void uart_send_msg_hex(uint8* str,uint16 length)
   67          {
   68   1          uint16 i;
   69   1          uint8 dat, t1, t2;
   70   1          uint8 remain_read;
   71   1          uint8 sfr_temp = SFR_BANK;
   72   1          SFR_BANK = BANK_UART;
   73   1          while((UART_STA&(0x01<<6))!=0)
   74   1          {   
   75   2          }
   76   1          if(data_read_buf,uart_fifo.putP >= max_send_byte)
   77   1          {
   78   2              remain_read = max_send_byte;  
   79   2              uart_fifo.putP = uart_fifo.putP - max_send_byte;
   80   2          }
   81   1          else
   82   1          {
   83   2              remain_read = uart_fifo.putP;
   84   2              uart_fifo.putP = 0;
   85   2          }
   86   1          uart_fifo.used += remain_read;
   87   1          for (i = 0; i < remain_read; i++)
   88   1          {
   89   2              while((UART_STA&(0x01<<6))!=0)
   90   2              {
   91   3                  
   92   3              }
   93   2              dat = *(str + i);
   94   2          #if 0
                       t1 = dat & 0x0f;
                       t2 = (dat & (uint8)0xf0) >> 4;
                       if (t2 < 10)
                       {
                           UART_TXDAT=t2 + '0';
                       }
                       else
                       {
                           UART_TXDAT=t2 - 10 + 'a';
                       }
                       if (t1 < 10)
                       {
                           UART_TXDAT=t1 + '0';
                       }
                       else
                       {
                           UART_TXDAT=t1 - 10 + 'a';
                       }
                   #else
  114   2              UART_TXDAT=dat;
  115   2          #endif
  116   2          }
  117   1          UART_DRQ |= 0x08;
  118   1              SFR_BANK = sfr_temp;
  119   1      }
*** WARNING C47 IN LINE 66 OF UART.C: 'length': unreferenced parameter
*** WARNING C47 IN LINE 69 OF UART.C: 't1': unreferenced local variable
*** WARNING C47 IN LINE 69 OF UART.C: 't2': unreferenced local variable
  120          
  121          void send_first_msg(void)
C251 COMPILER V4.55,  uart                                                                 25/07/16  15:03:09  PAGE 3   

  122          {
  123   1              uint8 sfr_bak = SFR_BANK;
  124   1              uint8 i;
  125   1              SFR_BANK = BANK_UART;                   
  126   1              while((UART_STA&(0x01<<6))!=0)
  127   1              {       // wait until TX FIFO is not full.                        
  128   2              }
  129   1              
  130   1              UART_TXDAT = 0xFF;      // trans the 1st uart data.     
  131   1              while (UART_STA & 0x08) 
  132   1              {       //wait uart idle                        
  133   2              }               
  134   1              
  135   1              TM_DelayMS(20);
  136   1              for (i=0; i<8; i++)
  137   1              {
  138   2                      UART_TXDAT = uart_start_block[i];
  139   2              }       
  140   1              while (UART_STA & 0x08) 
  141   1              {       //wait uart idle                        
  142   2              }
  143   1              
  144   1              SFR_BANK = sfr_bak;
  145   1      }
  146          void uart_init(void)
  147          {
  148   1              uint8 sfr_temp = SFR_BANK;
  149   1              init_uart_info();
  150   1          memset(&uart_fifo,0x0,UART_FIFO_CNT);
  151   1              SFR_BANK = BANK_CMU_RMU;
  152   1              MRCR1 &= 0xf7;
  153   1              MRCR1 |= 0x08;
  154   1              CLKENCTL1 |= 0x01;
  155   1      
  156   1              SFR_BANK = BANK_GPIO;
  157   1              GPIOCOUTEN &= 0xe7;
  158   1              GPIOCINEN &= 0xe7;
  159   1          GPIOCDAT &= 0xe7;
  160   1              MFP_CTL5 &= 0xf0;
  161   1              MFP_CTL5 |= 0x05;       
  162   1      
  163   1              SFR_BANK = BANK_UART;
  164   1              UART_BR = 0x05;
  165   1              UART_MODE = 0x00;
  166   1              UART_CTL = 0xc0;
  167   1              UART_DRQ = 0x05;
  168   1              IE0 &= 0x7f;
  169   1              uart_isr_no = IRQ_Intercept((uint32) uart_isr, IRQ_UART);
  170   1              IE0 = IE0 | 0x80;
  171   1              IE0 |= 0x10; //enable UART/IRC interrupt
  172   1              SFR_BANK = sfr_temp;
  173   1              send_first_msg();
  174   1      }
  175          
  176          void uart_exit(void)
  177          {
  178   1              uint8 sfr_temp = SFR_BANK;
  179   1              SFR_BANK = BANK_CMU_RMU;
  180   1              MRCR1 &= 0xf7;
  181   1              SFR_BANK = BANK_UART;
  182   1              UART_DRQ &= 0xf3;
  183   1              SFR_BANK = sfr_temp;
  184   1              IRQ_Release(uart_isr_no, IRQ_UART);
  185   1              return;
  186   1      }
  187          void init_uart_info(void)
C251 COMPILER V4.55,  uart                                                                 25/07/16  15:03:09  PAGE 4   

  188          {   
  189   1          head_read_buf=(uint8*)0x0f80;
  190   1          data_read_buf=(uint8*)0x1380;
  191   1          fwcfgfp = SD_FOpen(uart_data_str, MODE_READ);
  192   1          SD_FRead(fwcfgfp, head_read_buf, 512);
  193   1      }
  194          void get_uart_data(uint8 index)
  195          {
  196   1          
  197   1          if(index>11)
  198   1          {
  199   2             return;
  200   2          }
  201   1          
  202   1          uart_data=(uart_data_t*)&head_read_buf[index*sizeof(uart_data_t)];
  203   1          SD_FSeek(fwcfgfp, SEEK_SET, 0x200+uart_data->offset);
  204   1          memset(data_read_buf,0x0,uart_data->length+2);
  205   1          SD_FRead(fwcfgfp, data_read_buf, uart_data->length);
  206   1          uart_fifo.putP=uart_data->length; 
  207   1          uart_fifo.used=0;
  208   1      }
  209          
  210          void deal_uart_msg(void)
  211          {
  212   1              uart_init();
  213   1              while(1)
  214   1              {
  215   2                      ClearWatchDog();
  216   2                      if((uart_fifo.rx_count>=11)&&(uart_fifo.putP==0))
  217   2                      {
  218   3                              break;
  219   3                      }
  220   2              }
  221   1              while (UART_STA & 0x80) 
  222   1              {       //wait uart idle                        
  223   2              }
  224   1              TM_DelayMS(10);
  225   1              uart_exit();
  226   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =    ------     ------
  ecode size           =       552     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        37     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        19     ------
End of Module Information.


C251 COMPILATION COMPLETE.  3 WARNING(S),  0 ERROR(S)
