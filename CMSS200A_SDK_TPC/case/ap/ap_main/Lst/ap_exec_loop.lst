C251 COMPILER V4.55,  ap_exec_loop                                                         13/12/18  16:28:43  PAGE 1   


C251 COMPILER V4.55, COMPILATION OF MODULE ap_exec_loop
OBJECT MODULE PLACED IN .\Obj\ap_exec_loop.obj
COMPILER INVOKED BY: C:\Keil\C251\BIN\C251.EXE ap_exec_loop.c XSMALL FUNCTIONS(REENTRANT) ROM(HUGE) OPTIMIZE(9,SPEED) BR
                    -OWSE INCDIR(..\..\..\psp_rel\inc;..\..\inc) I4 DEBUG PRINT(.\Lst\ap_exec_loop.lst) OBJECT(.\Obj\ap_exec_loop.obj) 

stmt  level    source

    1          /*
    2           *******************************************************************************
    3           *                ACTOS AP
    4           *        main ap of sdk 3.0
    5           *
    6           *        (c) Copyright, Actions Co,Ld.
    7           *             All Right Reserved
    8           *
    9           *  $Id: draw_logo.c,v 1.1.1.1 2006/05/22 03:24:01 selina Exp $
   10           *******************************************************************************
   11           */
   12          #include "actos.h"
   13          #include "ap_common.h"
   14          #include "ap_main.h"
   15          
   16          #pragma name(AP_EXEC_LOOP)
   17          #ifdef MAIN_AP
               uint8 report_cur_ap(uint8 report_msg)
               {
                   uint8 retval = NULL;
                   if(g_comval.SuppTTS != 0)
                   {
                       report_buf[0] = ' ';
                       report_buf[1] = report_msg;
                       report_buf[2] = ' ';
                       report_buf[3] = 0;
                       check_report_state(&info);
                       retval = wait_report_end(NULL);
                   }
                   return retval;
               }
               #endif
   33          void save_cur_ap(void)
   34          {
   35   1          g_comval.ap_result = ap_result;
   36   1          VMWrite(&g_comval, VM_SYSTEM, sizeof(g_comval));
   37   1      }
   38          void close_USBAndCard_device(void)
   39          {
   40   1          USB_Detect_Ctrl(0);
   41   1          Card_Detect_Ctrl(0x01, 100, 0);
   42   1      }
   43          void open_USBAndCard_device(void)
   44          {
   45   1          USB_Detect_Ctrl(1);
   46   1          Card_Detect_Ctrl(0x01, 100, 1);
   47   1      }
   48          
   49          uint8 check_key(void)
   50          {
   51   1              uint8 sfr_bak;
   52   1          uint8 key_val = 0;
   53   1              uint8 i = 0;
   54   1              uint8 count = 0;
   55   1              uint8 bat_adc = 0;
   56   1      
   57   1              uint8 lradc = 0;
   58   1              uint8 adc_array[2];
C251 COMPILER V4.55,  ap_exec_loop                                                         13/12/18  16:28:43  PAGE 2   

   59   1              
   60   1              sfr_bak = (uint8) SFR_BANK;
   61   1      
   62   1              adc_array[0] = KEY_PLAY_TH;
   63   1              if (KEY_VOLSUB_TH < KEY_VOLADD_TH)
   64   1              {
   65   2                      
   66   2                      adc_array[1] = KEY_VOLADD_TH;
   67   2              }
   68   1              else
   69   1              {
   70   2                      adc_array[1] = KEY_VOLSUB_TH;
   71   2              }
   72   1      
   73   1              TM_DelayMS(100);
   74   1              SFR_BANK = BANK_PMU;
   75   1              while(1)
   76   1              {
   77   2                      ClearWatchDog();
   78   2      
   79   2      #ifdef SUPPORT_APPLE_KEY
                               lradc = LRADC4_DATA & 0x3f;
               #else
   82   2                      lradc = LRADC5_DATA & 0x3f;             
   83   2      #endif
   84   2      
   85   2                      if((lradc > adc_array[0]) && (lradc <= adc_array[1]))
   86   2                      {
   87   3                              i++;
   88   3                      }
   89   2      
   90   2                      count++;
   91   2                      if(count >= 50)
   92   2                      {
   93   3                              break;
   94   3                      }
   95   2              }
   96   1              SFR_BANK=sfr_bak;
   97   1              if(i >= 20)
   98   1              {
   99   2                      return 1; // means detected vol- pressing down for a while.
  100   2              }
  101   1              else
  102   1              {
  103   2                      return 0;
  104   2              }
  105   1      }
  106          /*
  107           ********************************************************************************
  108           * Description : 第二层AP间切换
  109           *
  110           * Arguments   : 执行ap名称
  111           *
  112           * Returns     :  ap 返回值
  113           *
  114           *
  115           * Notes       :
  116           *
  117           ********************************************************************************
  118           */
  119          int16 AP_Loop_Exec(int16 ap_name)
  120          {
  121   1          int16 result;
  122   1          int16 ResultCheck = 0;
  123   1          bool need_exit = FALSE;
  124   1          uint8 result_from_plug = 0;
C251 COMPILER V4.55,  ap_exec_loop                                                         13/12/18  16:28:43  PAGE 3   

  125   1          uint8 i;
  126   1          result = ap_name;
  127   1          ap_result = g_comval.ap_result;
  128   1          save_cur_ap();
  129   1          while(ap_get_message() != NULL)
  130   1          {
  131   2              ClearWatchDog();
  132   2          }
  133   1              
  134   1              if(check_key() == 1)
  135   1              {
  136   2                      result = RESULT_UDISK;
  137   2              }
  138   1              
  139   1          while (1)
  140   1          {
  141   2              switch (result)
  142   2              {
  143   3              case RESULT_MUSIC_PLAY:
  144   3              case RESULT_MUSIC:
  145   3              case RESULT_MUSIC_CPLAY:
  146   3              case RESULT_MUSIC_UPLAY:
  147   3                  ap_result = RESULT_MUSIC;
  148   3                  save_cur_ap();
  149   3                  result = ExecAP("music.ap", result);
  150   3                  break;
  151   3              case RESULT_RADIO:
  152   3              case RESULT_FMREC2FM:
  153   3              case RESULT_FMREC2STANDBY:
  154   3                  ap_result = RESULT_RADIO;
  155   3                  save_cur_ap();
  156   3                  result = ExecAP("radio.ap", result);
  157   3                  break;
  158   3              case RESULT_LINEIN:
  159   3                  if(result_from_plug == FALSE)
  160   3                  {
  161   4                      ap_result = RESULT_LINEIN;
  162   4                  }
  163   3                  save_cur_ap();
  164   3                  result = ExecAP("linein.ap", 0);
  165   3                  if(result == RESULT_LINEIN)
  166   3                  {
  167   4                      if(ap_result == RESULT_LINEIN)
  168   4                      {
  169   5                          result = RESULT_MAIN;
  170   5                      }
  171   4                      else
  172   4                      {
  173   5                          result = ap_result;
  174   5                      }
  175   4                  }
  176   3                  else if(result == RESULT_MAIN)
  177   3                  {
  178   4                      if(result_from_plug == TRUE)
  179   4                      {
  180   5                          ap_result = RESULT_LINEIN;
  181   5                      }
  182   4                  }
  183   3                  else if(result == RESULT_USBTEST)
  184   3                  {
  185   4                      ap_result = RESULT_LINEIN;
  186   4                  }
  187   3                  break;
  188   3              case RESULT_ALARM:
  189   3                  result = ExecAP("alarm.ap", result);
  190   3                  break;
C251 COMPILER V4.55,  ap_exec_loop                                                         13/12/18  16:28:43  PAGE 4   

  191   3              case RESULT_CLOCK:
  192   3                  ap_result = RESULT_CLOCK;
  193   3                  save_cur_ap();
  194   3      #ifdef MAIN_AP
                           result = report_cur_ap(EXTEND_SYS_TIME);
                           if (result == RESULT_NULL)
                           {
                               result = set_clock_ui(0);
                           }
               #else
  201   3                  result = set_clock_ui(0);
  202   3      #endif
  203   3                  VMWrite(&g_comval, VM_SYSTEM, sizeof(g_comval));
  204   3                  break;
  205   3      
  206   3              case RESULT_RECORD: //开始录音
  207   3              case RESULT_FMREC_START:
  208   3      #ifdef MAIN_AP
                           //如果从FM进入录音，这里不做语音播报功能，以防
                           //切换到其他ap时，FM的监听功能没有关闭
                           if(result == RESULT_FMREC_START)
                           {
                               ResultCheck = RESULT_NULL;
                           }
                           else
                           {
                               ResultCheck = report_cur_ap(EXTEND_RECORD);
                           }
                           if (ResultCheck == RESULT_NULL)
                           {
                               result = ExecAP("record.ap", result);
                           }
                           else
                           {
                               result = ResultCheck;
                           }
               #else
  228   3                  result = ExecAP("record.ap", result);
  229   3      #endif
  230   3                  break;
  231   3              case RESULT_PITCH:
  232   3                  result = ExecAP("ap_rec_p.ap", result);
  233   3                  break;
  234   3      
  235   3              case RESULT_USBAUDIO_PLAY: //Mode键功能，由FM切换到USB 音箱
  236   3                  result = USBDevice(USB_Audio);
  237   3                  break;
  238   3              case RESULT_UDISK:
  239   3              case RESULT_USBUDISK_PLAY: //Mode键功能，由USB 音箱切换到 UDISK
  240   3                  result = USBDevice(USB_disk);
  241   3                  break;
  242   3              case RESULT_USBTEST: //加载音效调试通信模块
  243   3                  result = ExecAP("usbtest.ap", result);
  244   3                  break;
  245   3              case RESULT_STANDBY:
  246   3                  g_comval.ap_result = ap_result;
  247   3                  VMWrite(&g_comval, VM_SYSTEM, sizeof(g_comval));
  248   3                  result = ExecAP("standby.ap", 0);
  249   3                  if(result != RESULT_ALARM)
  250   3                  {
  251   4                      result = start_init(FALSE);
  252   4                  }
  253   3                  break;
  254   3      
  255   3              default:
  256   3                  result = RESULT_NULL;
C251 COMPILER V4.55,  ap_exec_loop                                                         13/12/18  16:28:43  PAGE 5   

  257   3                  break;
  258   3              }
  259   2              //先过滤所有的消息，以免检测到不必要的消息
  260   2              while (ap_get_message() != NULL)
  261   2              {
  262   3              };
  263   2              /*支持插卡时从应用退出需卸载插卡驱动*/
  264   2              DRV_UnInstall(DRV_STG);
  265   2              VMRead(&g_modifyval, VM_AP_FWCFG, sizeof(vm_cfg_t));
  266   2              if (g_modifyval.Magic != MAGIC_CFG)
  267   2              {
  268   3                  ReadModifyInfor();
  269   3              }
  270   2              else
  271   2              {
  272   3                  memcpy(ap_id, g_modifyval.ApInfor.Table, g_modifyval.ApInfor.Total);
  273   3                  memcpy(sKY_GetKeyTabAddress(), g_modifyval.KeyInfor.Table, g_modifyval.KeyInfor.Total);
  274   3              }
  275   2              read_var();
  276   2              //检测到linein线插入时，将该位置起来
  277   2              if(result == RESULT_LINEIN)
  278   2              {
  279   3                  result_from_plug = TRUE;
  280   3              }
  281   2              //一键切换时，获取下一个ap值
  282   2              if (result == RESULT_MAIN)
  283   2              {
  284   3                  for (i = 0; i < g_modifyval.ApInfor.Total; i++)
  285   3                  {
  286   4                      if (ap_result == ap_id[i])
  287   4                      {
  288   5                          if (i == (g_modifyval.ApInfor.Total - 1))
  289   5                          {
  290   6                              result = ap_id[0];
  291   6                          }
  292   5                          else
  293   5                          {
  294   6                              result = ap_id[i + 1];
  295   6                          }
  296   5                          break;
  297   5                      }
  298   4                  }
  299   3                  if (i >= g_modifyval.ApInfor.Total)
  300   3                  {
  301   4                      result = ap_id[0];
  302   4                  }
  303   3                  g_comval.ap_result = result;
  304   3                  VMWrite(&g_comval, VM_SYSTEM, sizeof(g_comval));
  305   3              }
  306   2              if (result == RESULT_NULL)
  307   2              {
  308   3                  result = ap_result;
  309   3              }
  310   2          }
  311   1          return result;
  312   1      }
  313          
  314          uint16 near USBDevice(int16 State)
  315          {
  316   1          uint16 result;
  317   1      #if 0   // not check usb status, because the status is wrong when charging.
                   uint8 retval;
                   retval = GetUsbCableStatus(); //USB线是否连接
                   //if((retval & 0xc0) == 0xc0)
                   if((retval & 0x40) == 0x40)
                   {
C251 COMPILER V4.55,  ap_exec_loop                                                         13/12/18  16:28:43  PAGE 6   

                               if(longkey_flag == 1)
                       {
                           longkey_flag = 0;
                       }
                       result = USBDeviceService(State); // 进入USB相应功能
                   }
                   else
                   {
                       result = ap_id[0];
                   }
                   usb_on_flag = 0;
                   check_plug_device_msg(&usb_on_flag, USB_IN);
               #else
  336   1              result = USBDeviceService(State); 
  337   1      #endif
  338   1          return result;
  339   1      }
  340          
  341          uint16 near USBDeviceService (int16 State)
  342          {
  343   1          uint8 result = RESULT_NULL;
  344   1          uint8 temp;
  345   1              uint8 sfr_bak;
  346   1              
  347   1          if(State == USB_disk)
  348   1          {
  349   2              UHOST_Power_EN(sfr_bak);
  350   2              UHOST_Power_OPEN(sfr_bak);
  351   2              open_USBAndCard_device();
  352   2      
  353   2              SetPLL(PLL_36MHZ);
  354   2              SetMemBankCtl_CODE(temp);
  355   2              result = ExecAP("usbdisk.ap", 0);
  356   2              RestoreMemBankCtl(temp);
  357   2              SetPLL(PLL_48MHZ);
  358   2          }
  359   1          else if(State == USB_Audio)
  360   1          {
  361   2              result = ExecAP("usbsound.ap", 0);
  362   2          }
  363   1          while(ap_get_message() != NULL)
  364   1          {
  365   2              ClearWatchDog();
  366   2          }
  367   1          return result;
  368   1      }
  369          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =    ------     ------
  ecode size           =       997     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       104     ------
C251 COMPILER V4.55,  ap_exec_loop                                                         13/12/18  16:28:43  PAGE 7   

End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
