C251 COMPILER V4.55,  alarm_play                                                           23/05/16  10:41:31  PAGE 1   


C251 COMPILER V4.55, COMPILATION OF MODULE alarm_play
OBJECT MODULE PLACED IN .\Obj\alarm_play.obj
COMPILER INVOKED BY: C:\Keil\C251\BIN\C251.EXE alarm_play.c XSMALL NOALIAS FUNCTIONS(REENTRANT) ROM(HUGE) OPTIMIZE(9,SPE
                    -ED) BROWSE INCDIR(..\..\..\psp_rel\inc;..\..\inc) I4 DEBUG PRINT(.\Lst\alarm_play.lst) OBJECT(.\Obj\alarm_play.obj) 

stmt  level    source

    1          /*
    2           *******************************************************************************
    3           *                ACTOS AP
    4           *        system setting ap of sdk 3.0, ui part,
    5           *    this function is too big to fit in a bank with others
    6           *
    7           *        (c) Copyright, Actions Co,Ld.
    8           *             All Right Reserved
    9           *
   10           *  $Id: music_play.c,v 1.1 2008/10/12 09:40:36 stevenluo Exp $
   11           *******************************************************************************
   12           */
   13          #include "actos.h"
   14          #include "enhanced.h"
   15          #include "ap_common.h"
   16          #include "ui_alarm.h"
   17          
   18          #define PLAYING_TIME   360  //3分钟
   19          #define PAUSE_TIME      600//5分钟
   20          #define MAX_PLAY_TIME 3//最后播放次数
   21          #pragma name(ALARM_UI_PLY)
   22          #define ALARMExtNum  6
   23          extern uint8 key;
   24          extern uint8 playing_flag;
   25          extern uint8 need_draw;
   26          extern Music_type_a g_currentMusicType;
   27          extern uint8 g_TagInfoBuf[92];//用于放TAG信息的BUF
   28          const uint8 Extalarmstr[ALARMExtNum][4] =
   29          {
   30              "MP1", "MP2", "MP3", "WMA", /*"ASF",*/
   31              "WMV", "WAV"
   32          };
   33          
   34          void ShowTimer(void)
   35          {
   36   1          TM_GetDate(&date);
   37   1          TM_GetTime(&time);
   38   1          if (date.year > 2098)
   39   1          {
   40   2              date.year = 2000;
   41   2              date.month = 0x01;
   42   2              date.day = 0x01;
   43   2              time.hour = 0;
   44   2              time.minute = 0;
   45   2              time.second = 1;
   46   2              TM_SetDate(&date);
   47   2              TM_SetTime(&time);
   48   2          }
   49   1      
   50   1          if (memcmp(&tmp_time, &time, sizeof(time_t)) != 0)
   51   1          {
   52   2              memcpy(&tmp_time, &time, sizeof(time_t));
   53   2              itoa_2(time.hour, &temp_buffer[0]);
   54   2              itoa_2(time.minute, &temp_buffer[2]);
   55   2              temp_buffer[4] = 0x0;
   56   2              LEDPuts(NUMBER1, temp_buffer, 1);
   57   2          }
   58   1          LEDDisplay(LED_COL, 0xff, show_what);
C251 COMPILER V4.55,  alarm_play                                                           23/05/16  10:41:31  PAGE 2   

   59   1      }
   60          
   61          bool AlarmMusicpSendCommand_bank(BYTE cmd, void *param)
   62          {
   63   1          bool result = FALSE;
   64   1          //根据不同的音乐类型发不同的命令
   65   1          ClearWatchDog();
   66   1          switch (cmd)
   67   1          {
   68   2          case MC_PLAY:
   69   2              break;
   70   2      
   71   2          default:
   72   2              break;
   73   2          }
   74   1          switch (g_currentMusicType)
   75   1          {
   76   2          case Music_MP3: //mp3
   77   2              result = mp3pSendCommand(cmd, param);
   78   2              break;
   79   2      
   80   2          case Music_WMA: //wma
   81   2          case Music_WMV: //wmv
   82   2              result = wmapSendCommand(cmd, param);
   83   2              break;
   84   2          case Music_WAV:
   85   2              result = wavpSendCommand(cmd, param);
   86   2      
   87   2          default:
   88   2              break;
   89   2          }
   90   1          return result;
   91   1      }
   92          
   93          bool AlarmMusicpSendCommand(uint8 cmd, void *param)
   94          {
   95   1          switch (cmd)
   96   1          {
   97   2          case MC_GETTIME:
   98   2          case MC_GETSAPLE:
   99   2          case MC_GETSTATUS:
  100   2          case MC_GETAUDIOFMT:
  101   2          case MC_FADEINOUT:
  102   2              return wavpSendCommand(cmd, param);
  103   2          default:
  104   2              return AlarmMusicpSendCommand_bank(cmd, param);
  105   2          }
  106   1          return FALSE;
  107   1      }
  108          Music_type_a ALARMCheckMusicType(uint8 *filename)
  109          {
  110   1          uint8 cnt;
  111   1          uint8 ext[4];
  112   1          Music_type_a ret;
  113   1          memcpy(ext, filename + 8, 3);
  114   1          ext[0] = ((ext[0] >= 'a') && (ext[0] <= 'z')) ? (ext[0] - 'a' + 'A') : ext[0];
  115   1          ext[1] = ((ext[1] >= 'a') && (ext[1] <= 'z')) ? (ext[1] - 'a' + 'A') : ext[1];
  116   1          ext[2] = ((ext[2] >= 'a') && (ext[2] <= 'z')) ? (ext[2] - 'a' + 'A') : ext[2];
  117   1          ext[3] = 0;
  118   1          for (cnt = 0; cnt < Music_TypeMax; cnt++)
  119   1          {
  120   2              if (strcmp(ext, Extalarmstr[cnt]) == 0)
  121   2              {
  122   3                  ret = Music_NON + cnt + 1;
  123   3                  if ((ret == Music_MP1) || (ret == Music_MP2))
  124   3                  {
C251 COMPILER V4.55,  alarm_play                                                           23/05/16  10:41:31  PAGE 3   

  125   4                      return Music_MP3;
  126   4                  }
  127   3                  else
  128   3                  {
  129   4                      return ret;
  130   4                  }
  131   3              }
  132   2          }
  133   1          return Music_NON;
  134   1      }
  135          
  136          /* 获取首帧偏移, 避免将文件头也进行解码, 产生杂音 */
  137          void AlarmGetInfo(void)
  138          {
  139   1          ID3Info_t ID3;
  140   1          audio_format_t pFormat;
  141   1          memset(g_TagInfoBuf, 0, 92);
  142   1          ID3.TIT2_length = 30;
  143   1          ID3.TPE1_length = 30;
  144   1          ID3.TALB_length = 30;
  145   1      
  146   1          ID3.TIT2_buffer = &g_TagInfoBuf[0];
  147   1          ID3.TPE1_buffer = &g_TagInfoBuf[30];
  148   1          ID3.TALB_buffer = &g_TagInfoBuf[60];
  149   1      
  150   1          ID3.TENC_buffer = &g_TagInfoBuf[90];
  151   1          switch (g_currentMusicType)
  152   1          {
  153   2          case Music_WMA:
  154   2              g_Openparam.typeerror = wmaCheckType(NULL, &g_Openparam.musicframeoffset, &g_Openparam.musictotal
             -time,
  155   2                                                   &pFormat, &ID3);
  156   2              break;
  157   2      
  158   2          case Music_WAV:
  159   2              g_Openparam.typeerror
  160   2                  = wavCheckType(NULL, &g_Openparam.musicframeoffset, &g_Openparam.musictotaltime, &pFormat);
  161   2              break;
  162   2      
  163   2          default:
  164   2              break;
  165   2          }
  166   1      
  167   1      }
  168          uint8 alarm_play(uint8 type)
  169          {
  170   1          if (type == 0)
  171   1          {
  172   2              AlarmMusicpSendCommand(MC_OPEN, (void *) &g_Openparam);
  173   2              if (AlarmMusicpSendCommand(MC_LOAD, NULL) == 0)
  174   2              {
  175   3                  return 1;
  176   3              }
  177   2              //        AlarmMusicpSendCommand(MC_SETVOLUME, (void *) g_comval.g_alarm.volume);
  178   2              AlarmMusicpSendCommand(MC_PLAY, NULL);
  179   2          }
  180   1          else
  181   1          {
  182   2              mp3SDSendCommand(MC_OPEN, &g_Openparam);
  183   2              if (mp3SDSendCommand(MC_LOAD, NULL) == 0)
  184   2              {
  185   3                  return 1;
  186   3              }
  187   2              //        mp3SDSendCommand(MC_SETVOLUME, (void *) g_comval.g_alarm.volume);
  188   2              mp3SDSendCommand(MC_PLAY, NULL);
  189   2          }
C251 COMPILER V4.55,  alarm_play                                                           23/05/16  10:41:31  PAGE 4   

  190   1          return 0;
  191   1      }
  192          void alarm_stop(uint8 type)
  193          {
  194   1          if (type == 0)
  195   1          {
  196   2              AlarmMusicpSendCommand(MC_STOP, NULL);
  197   2              AlarmMusicpSendCommand(MC_CLOSE, NULL);
  198   2          }
  199   1          else
  200   1          {
  201   2              mp3SDSendCommand(MC_STOP, NULL);
  202   2              mp3SDSendCommand(MC_CLOSE, NULL);
  203   2          }
  204   1          LEDDisplay(LED_PLAY, 0xff, 0);
  205   1          LEDDisplay(LED_PAUSE, 0xff, 1);
  206   1      }
  207          uint8 play_alarm_music(uint8 type)
  208          {
  209   1          music_play_status_t status_buf;
  210   1          uint8 retval = NULL;
  211   1          uint8 key;
  212   1          playing_flag = 0;
  213   1          play_times = 1;
  214   1          need_draw = TRUE;
  215   1          show_what = 1;
  216   1          LEDClearScreen();
  217   1          set_dac_volume(g_comval.volume);
  218   1          while (1)
  219   1          {
  220   2              ClearWatchDog();
  221   2              if (need_draw)
  222   2              {
  223   3                  ShowTimer();
  224   3                  need_draw = FALSE;
  225   3              }
  226   2              if (playing_flag == 0)
  227   2              {
  228   3                  if (alarm_play(type) != 0)
  229   3                  {
  230   4                      return RESULT_MAIN;
  231   4                  }
  232   3                  LEDDisplay(LED_PAUSE, 0xff, 0);
  233   3                  LEDDisplay(LED_PLAY, 0xff, 1);
  234   3                  playing_flag = 2;
  235   3                  if (playing_count >= PAUSE_TIME)
  236   3                  {
  237   4                      play_times++;
  238   4                      playing_count = 0;
  239   4                  }
  240   3      
  241   3              }
  242   2              key = ap_get_message();
  243   2              switch (key)
  244   2              {
  245   3              case AP_MSG_RTC:
  246   3              case AP_MSG_WAIT_TIMEOUT:
  247   3                  if (playing_flag != 0)
  248   3                  {
  249   4                      playing_count++;
  250   4                      if (playing_flag == 1)
  251   4                      {
  252   5                          //如果暂停情况下，则5分钟后继续播放
  253   5                          if (playing_count >= PAUSE_TIME)
  254   5                          {
  255   6                              playing_flag = 0;
C251 COMPILER V4.55,  alarm_play                                                           23/05/16  10:41:31  PAGE 5   

  256   6                          }
  257   5                      }
  258   4                      else
  259   4                      {
  260   5                          //播放状态下，门铃响3分钟后自动退出
  261   5                          if (playing_count >= PLAYING_TIME)
  262   5                          {
  263   6                              playing_count = 0;
  264   6                              alarm_stop(type);
  265   6                              if (play_times >= MAX_PLAY_TIME)
  266   6                              {
  267   7                                  playing_flag = 0;
  268   7                                  retval = RESULT_MAIN;
  269   7                              }
  270   6                              else
  271   6                              {
  272   7                                  playing_flag = 1;
  273   7                              }
  274   6                          }
  275   5                      }
  276   4                  }
  277   3                  show_what = !show_what;
  278   3                  need_draw = TRUE;
  279   3                  break;
  280   3              case AP_MSG_SD_IN:
  281   3              case AP_MSG_UH_IN:
  282   3              case AP_MSG_LINEIN_IN:
  283   3              case AP_MSG_LINEIN_OUT:
  284   3                  break;
  285   3              case AP_MSG_SD_OUT:
  286   3                  if (type != 0)
  287   3                  {
  288   4                      break;
  289   4                  }
  290   3                  if (g_comval.g_alarm.location.disk == 'H')
  291   3                  {
  292   4                      retval = RESULT_MAIN;
  293   4                  }
  294   3                  break;
  295   3      
  296   3              case AP_MSG_UH_OUT:
  297   3                  if (type != 0)
  298   3                  {
  299   4                      break;
  300   4                  }
  301   3                  if (g_comval.g_alarm.location.disk == 'U')
  302   3                  {
  303   4                      retval = RESULT_MAIN;
  304   4                  }
  305   3                  break;
  306   3              case AP_KEY_PLAY | AP_KEY_UP:
  307   3              case AP_KEY_MODE | AP_KEY_UP: //取消退出
  308   3              case AP_KEY_MODE | AP_KEY_LONG:
  309   3                  retval = RESULT_MAIN;
  310   3                  break;
  311   3              default:
  312   3                  if (((key & AP_KEY_UP) == AP_KEY_UP) || (key == AP_KEY_LONGUP) ||
  313   3                          (key == (AP_KEY_USBTEST | AP_KEY_LONG)))
  314   3                  {
  315   4                      if (playing_flag == 2)
  316   4                      {
  317   5                          alarm_stop(type);
  318   5                          if (play_times >= MAX_PLAY_TIME)
  319   5                          {
  320   6                              playing_flag = 0;
  321   6                              retval = RESULT_MAIN;
C251 COMPILER V4.55,  alarm_play                                                           23/05/16  10:41:31  PAGE 6   

  322   6                          }
  323   5                          else
  324   5                          {
  325   6                              playing_flag = 1;
  326   6                              playing_count = 0;
  327   6                          }
  328   5                      }
  329   4                  }
  330   3                  else
  331   3                  {
  332   4                      retval = ap_handle_hotkey(key);
  333   4                  }
  334   3                  break;
  335   3              } //switch
  336   2              if (retval != NULL)
  337   2              {
  338   3                  if (playing_flag == 2)
  339   3                  {
  340   4                      alarm_stop(type);
  341   4                  }
  342   3                  return retval;
  343   3              }
  344   2              if (playing_flag == 2)
  345   2              {
  346   3                  if (type == 0)
  347   3                  {
  348   4                      AlarmMusicpSendCommand(MC_GETSTATUS, (void *) (&status_buf));
  349   4                  }
  350   3                  else
  351   3                  {
  352   4                      mp3SDSendCommand(MC_GETSTATUS, (&status_buf));
  353   4                  }
  354   3      
  355   3                  if (status_buf.status == PLAYING_REACH_END)
  356   3                  {
  357   4                      alarm_stop(type);
  358   4                      //如果门铃不足3分钟时，则继续从头开始播放，直到3分钟时间到
  359   4                      if (playing_count < PLAYING_TIME)
  360   4                      {
  361   5                          playing_flag = 0;
  362   5                      }
  363   4                      else
  364   4                      {
  365   5                          if (play_times >= 2)
  366   5                          {
  367   6                              playing_flag = 0;
  368   6                              return RESULT_MAIN;
  369   6                          }
  370   5                          else
  371   5                          {
  372   6                              playing_flag = 1;
  373   6                          }
  374   5                      }
  375   4                  }
  376   3                  else if (status_buf.status == PLAYING_ERROR)
  377   3                  {
  378   4                      alarm_stop(type);
  379   4                      return RESULT_MAIN;
  380   4                  }
  381   3              }
  382   2          }//while
  383   1          return RESULT_MAIN;
  384   1      }


Module Information          Static   Overlayable
------------------------------------------------
C251 COMPILER V4.55,  alarm_play                                                           23/05/16  10:41:31  PAGE 7   

  code size            =    ------     ------
  ecode size           =      1451     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        24     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
