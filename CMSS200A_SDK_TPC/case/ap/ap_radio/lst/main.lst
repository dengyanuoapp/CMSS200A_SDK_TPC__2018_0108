C251 COMPILER V4.55,  main                                                                 23/05/16  10:42:06  PAGE 1   


C251 COMPILER V4.55, COMPILATION OF MODULE main
OBJECT MODULE PLACED IN .\obj\main.obj
COMPILER INVOKED BY: C:\Keil\C251\BIN\C251.EXE main.c XSMALL FUNCTIONS(REENTRANT) ROM(HUGE) OPTIMIZE(9,SPEED) BROWSE ORD
                    -ER INCDIR(..\..\..\psp_rel\inc;..\..\inc;.\\FM_QN8035) I4 DEFINE(CHECKALARM) DEBUG PRINT(.\lst\main.lst) OBJECT(.\obj\ma
                    -in.obj) 

stmt  level    source

    1          /*
    2           *******************************************************************************
    3           *                ACTOS AP
    4           *        main ap of sdk 3.0
    5           *
    6           *        (c) Copyright, Actions Co,Ld.
    7           *             All Right Reserved
    8           *       History Record:
    9           *
   10           *******************************************************************************
   11           */
   12          #include "ap_radio.h"
   13          
   14          #pragma name(AP_MAIN)
   15          
   16          /* 以下定义FM应用中常驻数据 */
   17          
   18          //radio ui 的配置项信息
   19          radio_config_t g_radio_config;
   20          
   21          //应用进入模式. 0xff--只是为使FM模组进入standby
   22          uint8 EnterFlag = 0xff;
   23          
   24          //自动搜台过程中,当前所搜电台的电台号
   25          uint8 AutoTabNum;
   26          
   27          //搜台过程中获取的状态
   28          fm_status_t g_FMStatus;
   29          
   30          //硬件搜台标记, bit0  此轮硬件seek 是否结束    1:  已结束   0:  未结束
   31          //bit1  此轮硬件seek 找到的是否有效台   1:  有效台
   32          uint8 seekflag;
   33          
   34          //radio 城市电台列表结构信息
   35          radio_citylist_t g_city_station;
   36          
   37          /* 指向当前所播放的电台列表表首*/
   38          uint16 *pfreq_play;
   39          
   40          //RDS关闭打开状态
   41          radio_RDS_e use_RDS;
   42          
   43          //fm_play_status_t FMStatusUS;  //US电台信息暂存,8 bytes
   44          //fm_play_status_t FMStatusJP;  //Japan电台信息暂存,8bytes
   45          fm_status_t FMStatusUS =
   46          { USFREQ_MIN, 0, 0, Mono };
   47          fm_status_t FMStatusJP =
   48          { JPFREQ_MIN, 0, 0, Mono };
   49          
   50          //当前电台信息
   51          FMRADIO_param_t radio_param;
   52          
   53          uint8 flag_r; //搜台是否搜到第一个台之后返回标志位
   54          
   55          //从VRAM中读出的EQ,SRS参数表，通过EQ工具设置
   56          EQ_VM_t g_eq_para;
   57          
C251 COMPILER V4.55,  main                                                                 23/05/16  10:42:06  PAGE 2   

   58          int8 AuCodecRun = 0;
   59          int16 SentenceDectTime;
   60          uint8 SentenceDectEnergy;
   61          int16 SentenceDectTime_bak;
   62          int8 c_decEffectFlag;
   63          int8 SetenceFlag = 0;
   64          uint8 m_decSpdifTimer_Sav, m_decAnalogTimer_Sav;
   65          uint32 m_decSpdifddrSav;
   66          
   67          int8 last_SetenceFlag;
   68          
   69          #ifdef AP_RADIO_REPORT_EN
               char report_buf[16]; //存诸播报数据的buffer
               info_report_t info =
               {   report_buf, 0, TRUE};
               #endif
   74          
   75          uint8 report_enter_ap(uint8 report_msg);
   76          
   77          /*
   78           ********************************************************************************
   79           *                        uint16 main(uint16 param)
   80           *
   81           * Description : Radio UI 应用主函数
   82           *
   83           * Arguments   :
   84           param:
   85           0, 进入FM,进行电台收听
   86           1, Alarm进入FM
   87           2, 使FM进入Standby
   88           *
   89           * Returns     : 结果消息或0
   90           *
   91           * Notes       :
   92           *
   93           ********************************************************************************
   94           */
   95          uint16 main(uint16 param)
   96          {
   97   1          uint16 result = 0;
   98   1          uint8 KeyTone_bak = 0;
   99   1          read_var();
  100   1      #ifdef AP_RADIO_REPORT_EN
                   result = report_enter_ap(EXTEND_FM);
                   if(result != 0)
                   {
                       if(param != RESULT_RADIO)
                       {
                           fmSendCommand(FM_CLOSE, 0, NULL);
                       }
                       return result;
                   }
               #endif
  111   1      
  112   1          result = FMinit(param); //FM初始化
  113   1          if (result == RESULT_MAIN)
  114   1          {
  115   2              return result;
  116   2          }
  117   1      
  118   1          if (g_comval.KeyTone != 0)
  119   1          {
  120   2              KeyTone_bak = g_comval.KeyTone; //备份按键音
  121   2              g_comval.KeyTone = 0; //关闭按键音
  122   2          }
  123   1      
C251 COMPILER V4.55,  main                                                                 23/05/16  10:42:06  PAGE 3   

  124   1          result = FMdeal(param); //FM播放
  125   1          g_comval.KeyTone = KeyTone_bak; //恢复按键音
  126   1      
  127   1          fmSendCommand(FM_MID_SAVE, &radio_param, NULL); //保存变量
  128   1          exit_fmin_channel();
  129   1          if (result == RESULT_RECORD) //截获FM中所有Rec热键录音
  130   1          {
  131   2              result = RESULT_FMREC_START;
  132   2      #ifdef AP_RADIO_REPORT_EN
                       fmSendCommand(FM_MUTE, SetMUTE, NULL);
                       result = report_enter_ap(EXTEND_RECORD);
                       //init_fmin_channel();
                       if(result == 0)
                       {
                           //return result;
                           result = RESULT_FMREC_START;
                       }
                       if (g_comval.volume != 0)
                       {
                           fmSendCommand(FM_MUTE, releaseMUTE, NULL); //解除静音
                       }
                       fmSendCommand(FM_MID_SETVOLUME, (void *) g_comval.volume, NULL);
               #endif
  147   2          }
  148   1          FMexit(result); //FM退出处理
  149   1      
  150   1          return result;
  151   1      }
  152          /*
  153           ********************************************************************************
  154           *             void charge_pump_onoff(uint8 flag)
  155           *
  156           * Description : 打开和关闭charge pump
  157           *
  158           *
  159           * Arguments   : flag:0-关闭；1-打开
  160           *
  161           * Returns     : void
  162           *
  163           * Notes       :由于打开charge pump时，影响搜台效果，所以在自动和关自动搜索电台时
  164           *                 建议关闭charge pump,搜完台之后再打开,由于uhost依靠charge pump供电，关闭以后
  165           *                 如果插着usb，则会误发u盘插入消息，所以在搜台过程中需要过滤u盘插入消息
  166           *                       同时，由于重新打开charge pump后，系统检测到uhost消息需要一定的时间，所以得
  167           *                 延时至少500个ms才能正常检测，然后再过滤u盘消息
  168           *
  169           ********************************************************************************
  170           */
  171          
  172          void charge_pump_onoff(uint8 flag)
  173          {
  174   1          uint8 sfr_bak = SFR_BANK;
  175   1          //enable charge pump
  176   1          SFR_BANK = BANK_PMU;
  177   1          if(flag == 1)
  178   1          {
  179   2              CP_CTL0 |= 0x01; //电荷泵使能
  180   2              CP_CTL1 |= 0x08;        //charge pump直通功能使能
  181   2          }
  182   1          else
  183   1          {
  184   2              CP_CTL0 &= 0xFE; //电荷泵关闭
  185   2              CP_CTL1 &= 0xF7;
  186   2          }
  187   1          SFR_BANK = sfr_bak;
  188   1          //这里的延时是为了正确检测到u盘消息，以便过滤
  189   1          if(flag == 1)
C251 COMPILER V4.55,  main                                                                 23/05/16  10:42:06  PAGE 4   

  190   1          {
  191   2              TM_DelayMS(200);
  192   2              TM_DelayMS(200);
  193   2              TM_DelayMS(200);
  194   2          }
  195   1      
  196   1      }
  197          uint16 FMinit(uint16 param)
  198          {
  199   1          uint16 result = RESULT_NULL;
  200   1      
  201   1          SetPLL(PLL_24MHZ);
  202   1      
  203   1          if ((param == FM_TO_STANDBY) || (param == RESULT_FMREC2STANDBY)) //让FM模组进standby
  204   1          {
  205   2              fmSendCommand(FM_OPEN, SEARCHLEVEL, NULL); //fmSendCommand(MC_OPEN, SEARCHLEVEL);
  206   2              fmSendCommand(FM_MUTE, SetMUTE, NULL); //fmSendCommand(MC_MUTE, SetMUTE);
  207   2              fmSendCommand(FM_CLOSE, 0, NULL); //fmSendCommand(MC_CLOSE, 0);
  208   2              SetPLL(PLL_48MHZ);
  209   2              return RESULT_MAIN;
  210   2          }
  211   1      
  212   1          //-------安装ud驱动------------
  213   1          DRV_ActiveUD(0x00, MODE_SLOW);
  214   1          //OpenSPK(sfr_bak);
  215   1          EnterFlag = 0; //when fm  open,  open PA
  216   1          mute_flag = FALSE;
  217   1      
  218   1          SetCurUI_Type(FMFreq_UI);
  219   1      
  220   1          if (param == ALARM_TO_FM) //设置闹铃频率
  221   1          {
  222   2              alarmtimerflag = 0;
  223   2          }
  224   1      
  225   1          return result;
  226   1      }
  227          
  228          void read_var(void)
  229          {
  230   1      
  231   1          read_ap_comval();
  232   1          //   VMRead(&g_alarm, VM_ALARM, sizeof(g_alarm)); //读取闹钟全局变量
  233   1      
  234   1          VMRead(&g_radio_config, VM_AP_RADIO, sizeof(g_radio_config)); //读取配置信息
  235   1          if (g_radio_config.magic != MAGIC_FMRADIO) //判断是否需要初始化
  236   1          {
  237   2              memset(&g_radio_config, 0x0, sizeof(g_radio_config));
  238   2              g_radio_config.magic = MAGIC_FMRADIO;
  239   2              g_radio_config.band_mode = Bank_US_Europe; //默认 普通频道
  240   2              memcpy(&g_radio_config.FMStatus, &FMStatusUS, sizeof(fm_status_t)); //加载 普通频道 的数据
  241   2      
  242   2              memcpy(&g_FMStatus, &FMStatusUS, sizeof(fm_status_t)); //加载 普通频道 的数据
  243   2      
  244   2              //默认为使用RDS  电台功能
  245   2              use_RDS = RDS_Open;
  246   2          }
  247   1      }
  248          
  249          void FMexit(uint16 result)
  250          {
  251   1          if ((result != RESULT_FMREC_NOSTART) && (result != RESULT_FMREC_START)) //非电台录音退出！for FM reco
             -rd by ccm
  252   1          {
  253   2              //DealFadeInOut();
  254   2              fmSendCommand(FM_CLOSE, 0, NULL);
C251 COMPILER V4.55,  main                                                                 23/05/16  10:42:06  PAGE 5   

  255   2          }
  256   1          //TM_KillClock((int8) Timer_Sav); //关闭定时器
  257   1          //若是电台录音退出，此时FM还在工作，则不能对HOSC进行操作
  258   1          VMWrite(&g_radio_config, VM_AP_RADIO, sizeof(radio_config_t));
  259   1          VMWrite(&g_comval, VM_SYSTEM, sizeof(ap_comval_t));
  260   1          //    VMWrite(&g_alarm, VM_ALARM, sizeof(alarm_vars_t));
  261   1      
  262   1          SetPLL(PLL_48MHZ);
  263   1      }
  264          
  265          /* 保存电台*/
  266          uint16 fm_menu_save(uint16 *arg)
  267          {
  268   1          arg = arg;
  269   1          if (fmSendCommand(FM_MID_SAVESTATION, NULL, NULL) != FALSE) //保存当前电台对应的电台表项号。
  270   1          {
  271   2              fmSendCommand(FM_MID_SAVE, &radio_param, NULL); //保存当前电台
  272   2          }
  273   1          return RESULT_NULL;
  274   1      }
  275          
  276          /* 电台录音*/
  277          uint16 fm_menu_record(uint16 *arg)
  278          {
  279   1          arg = arg;
  280   1          return RESULT_FMREC_NOSTART; //RESULT_FMREC_START;
  281   1      }
  282          
  283          /* 删除电台*/
  284          uint16 fm_menu_delete(uint16 *arg)
  285          {
  286   1          arg = arg;
  287   1          if (fmSendCommand(FM_MID_DELETE, NULL, NULL) != FALSE)
  288   1          {
  289   2              fmSendCommand(FM_MID_SAVE, &radio_param, NULL);
  290   2          }
  291   1          fmSendCommand(FM_SEARCH, &g_FMStatus, UP);
  292   1          fmSendCommand(FM_GETSTATUS, &g_FMStatus, NULL);
  293   1          return RESULT_NULL;
  294   1      }
  295          
  296          /* 删除全部*/
  297          uint16 fm_menu_delete_all(uint16 *arg)
  298          {
  299   1          arg = arg;
  300   1          fmSendCommand(FM_MID_DELALL, NULL, NULL);
  301   1          fmSendCommand(FM_MID_SAVE, &radio_param, NULL);
  302   1          return RESULT_NULL;
  303   1      }
  304          
  305          /* 普通频段*/
  306          uint16 fm_menu_normal_band(uint16 *arg)
  307          {
  308   1          arg = arg;
  309   1          if (g_radio_config.band_mode == Bank_Japan)
  310   1          {
  311   2              g_radio_config.band_mode = Bank_US_Europe;
  312   2              radio_param.param1 = g_radio_config.fmstation_us; //US Tab  by ljs
  313   2      
  314   2              memcpy(&FMStatusJP, &g_FMStatus, sizeof(g_FMStatus)); //备份jp频道数据
  315   2              memcpy(&g_FMStatus, &FMStatusUS, sizeof(g_FMStatus)); //加载us频道数据
  316   2          }
  317   1          return RESULT_NULL;
  318   1      }
  319          
  320          /* 日本频段*/
C251 COMPILER V4.55,  main                                                                 23/05/16  10:42:06  PAGE 6   

  321          uint16 fm_menu_japan_band(uint16 *arg)
  322          {
  323   1          arg = arg;
  324   1          //如果原来是普通模式，就需要到日本模式
  325   1          if (g_radio_config.band_mode == Bank_US_Europe)
  326   1          {
  327   2              g_radio_config.band_mode = Bank_Japan;
  328   2              radio_param.param1 = g_radio_config.fmstation_jp; //JP Tab   by ljs
  329   2      
  330   2              memcpy(&FMStatusUS, &g_FMStatus, sizeof(fm_status_t)); //备份us频道数据
  331   2              memcpy(&g_FMStatus, &FMStatusJP, sizeof(fm_status_t)); //加载js频道数据
  332   2          }
  333   1          return RESULT_NULL;
  334   1      }
  335          
  336          /* RDS 功能*/
  337          uint16 fm_menu_rds(uint16 *arg)
  338          {
  339   1          arg = arg;
  340   1          return RESULT_NULL;
  341   1      }
  342          
  343          /* FM 录音*/
  344          uint16 fm_menu_fm_record(uint16 *arg)
  345          {
  346   1          arg = arg;
  347   1      
  348   1          return 0;
  349   1      }
  350          
  351          /* 退出*/
  352          uint16 fm_menu_exit(uint16 *arg)
  353          {
  354   1          arg = arg;
  355   1          //不需要处理直接退出
  356   1          return RESULT_NULL;
  357   1      }
  358          
  359          #ifdef AP_RADIO_REPORT_EN
               uint8 report_enter_ap(uint8 report_msg)
               {
                   uint8 retval = NULL;
                   if(g_comval.SuppTTS != 0)
                   {
                       report_buf[0] = ' ';
                       report_buf[1] = report_msg;
                       report_buf[2] = ' ';
                       report_buf[3] = 0;
                       check_report_state(&info);
                       retval = wait_report_end(NULL);
                   }
                   return retval;
               }
               #endif


Module Information          Static   Overlayable
------------------------------------------------
  code size            =    ------     ------
  ecode size           =       821     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       379     ------
  bit size             =    ------     ------
C251 COMPILER V4.55,  main                                                                 23/05/16  10:42:06  PAGE 7   

  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        35     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
