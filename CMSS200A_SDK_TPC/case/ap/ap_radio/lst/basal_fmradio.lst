C251 COMPILER V4.55,  basal_fmradio                                                        23/05/16  10:42:14  PAGE 1   


C251 COMPILER V4.55, COMPILATION OF MODULE basal_fmradio
OBJECT MODULE PLACED IN .\obj\basal_fmradio.obj
COMPILER INVOKED BY: C:\Keil\C251\BIN\C251.EXE basal_fmradio.c XSMALL FUNCTIONS(REENTRANT) ROM(HUGE) OPTIMIZE(9,SPEED) B
                    -ROWSE ORDER INCDIR(..\..\..\psp_rel\inc;..\..\inc;.\\FM_QN8035) I4 DEFINE(CHECKALARM) DEBUG PRINT(.\lst\basal_fmradio.ls
                    -t) OBJECT(.\obj\basal_fmradio.obj) 

stmt  level    source

    1          /*
    2           *******************************************************************************
    3           *                ACTOS AP
    4           *        FM tunner basal module implementation
    5           *
    6           *        (c) Copyright Actions Co,Ld.
    7           *
    8           *******************************************************************************
    9           */
   10          #include "ap_radio.h"
   11          
   12          #pragma name(MOD_BS_FMRADIO)
   13          
   14          uint16 m_FMStationTab[MAX_STATION_COUNT]; //电台频率对照表(注:频率范围87M-108M 以K为精度).
   15          
   16          static uint8 cmd_fm_mid_findstation(void *param1, void *param2);
   17          
   18          /*********************************************************
   19           *input:  buf---ptr point to buffer which is wait to deal
   20           *          curfreq----current freq which will be inserted to buffer
   21           *          totalnum---current total freq num in freq list
   22           *output: no
   23           *Description:  insert current freq into freq list
   24           *note:  freq list from small to large
   25           **********************************************************
   26           */
   27          bool SequenceFreqlist(uint16 *buf, uint16 curfreq, uint8 totalnum)
   28          {
   29   1          uint8 i, cur_pos;
   30   1          uint16 *dealbuf;
   31   1          int8 j;
   32   1      
   33   1          dealbuf = buf;
   34   1          cur_pos = 0;
   35   1      
   36   1          for (i = 0; i < MAX_STATION_COUNT; i++)
   37   1          {
   38   2              //dealbuf 的数据是从小到大排序
   39   2      
   40   2              if (curfreq < (*dealbuf)) //小与当前指向的，则把当前以后的往后移，并插入到当前
   41   2              {
   42   3                  cur_pos = i;
   43   3                  if (cur_pos == (MAX_STATION_COUNT - 1)) //如果是最后一项，直接替换
   44   3                  {
   45   4                      *dealbuf = curfreq;
   46   4                      g_FMStatus.station = i + 1;
   47   4                      break;
   48   4                  }
   49   3      
   50   3                  for (j = (MAX_STATION_COUNT - 2); j >= (int8) cur_pos; j--) //从小到大排序，插入中间，需要把
             -竺娴氖萃笠埔晃
   51   3                  {
   52   4                      *(buf + j + 1) = *(buf + j);
   53   4                  }
   54   3                  *dealbuf = curfreq; //插入在中间
   55   3                  g_FMStatus.station = i + 1;
   56   3      
C251 COMPILER V4.55,  basal_fmradio                                                        23/05/16  10:42:14  PAGE 2   

   57   3                  break;
   58   3              }
   59   2              else if (curfreq == (*dealbuf))
   60   2              {
   61   3                  return FALSE; //有重复，不更新表
   62   3              }
   63   2              else
   64   2              {
   65   3                  if ((*dealbuf == 0) && (i < totalnum)) //检测到最后了，直接插入到结尾
   66   3                  {
   67   4                      *dealbuf = curfreq;
   68   4                      g_FMStatus.station = i + 1;
   69   4                      break;
   70   4                  }
   71   3                  dealbuf++;
   72   3              }
   73   2          }
   74   1          return TRUE;
   75   1      }
   76          
   77          /*
   78           ********************************************************************************
   79           *             void FM_VolumeSet(uint8 Vol)
   80           *
   81           * Description : 设置PA音量
   82           *
   83           * Arguments   :          需设置的音量值
   84           *
   85           * Returns     :
   86           *
   87           * Notes       :
   88           *
   89           ********************************************************************************
   90           */
   91          void FM_VolumeSet(uint8 Vol)
   92          {
   93   1          set_dac_volume(Vol);
   94   1      }
   95          
   96          //安装fm驱动, 进行模组初始化
   97          uint8 cmd_fm_open(void *param1, void *param2)
   98          {
   99   1          //形参确认OK
  100   1          //param1 常数，暂时没用到的，仅仅传递进去
  101   1          uint8 mode = (uint8) param1;
  102   1          param2 = param2;
  103   1      
  104   1          BankSwitch((uint32) FMdrv_mute); //将常驻代码切换进来
  105   1          return FMdrv_Init(mode);
  106   1      }
  107          
  108          //模组进入standby, 并卸载fm驱动
  109          uint8 cmd_fm_close(void *param1, void *param2)
  110          {
  111   1          //形参确认OK
  112   1          param1 = param1;
  113   1          param2 = param2;
  114   1      
  115   1          BankSwitch((uint32) FMdrv_mute); //将常驻代码切换进来
  116   1          return FMdrv_Standby();
  117   1      }
  118          
  119          //FM 硬件相关设置
  120          uint8 cmd_fm_hardware(void *param1, void *param2)
  121          {
  122   1          //形参确认OK
C251 COMPILER V4.55,  basal_fmradio                                                        23/05/16  10:42:14  PAGE 3   

  123   1          uint8 onoff = (uint8) param1; //onoff:  1--打开FM时    0--关闭FM时
  124   1          uint8 PA_mode = (uint8) param2; //PA_mode:   1-- 要操作PA    0--不操作PA
  125   1      
  126   1          BankSwitch((uint32) FMdrv_mute); //将常驻代码切换进来
  127   1          return FMdrv_hardware(onoff, PA_mode);
  128   1      }
  129          
  130          //设置单个频点播放
  131          uint8 cmd_fm_setfreq(void *param1, void *param2)
  132          {
  133   1          //形参确认OK
  134   1          uint8 result;
  135   1          uint16 Freq = (uint16) param1;
  136   1          param2 = param2;
  137   1      
  138   1          result = FMdrv_setfreq((void *) Freq);
  139   1      
  140   1          return result;
  141   1      }
  142          
  143          //FM静音或解除静音
  144          uint8 cmd_fm_mute(void *param1, void *param2)
  145          {
  146   1          //形参确认OK
  147   1          FM_MUTE_e mode = (uint8) param1;
  148   1          param2 = param2;
  149   1          return FMdrv_mute(mode);
  150   1      }
  151          
  152          //设置波段
  153          uint8 cmd_fm_setband(void *param1, void *param2)
  154          {
  155   1          //形参确认OK
  156   1          radio_band_e band = (uint8) param1;
  157   1          param2 = param2;
  158   1          return FMdrv_setband(band);
  159   1      }
  160          
  161          //设置搜台门限
  162          uint8 cmd_fm_setth(void *param1, void *param2)
  163          {
  164   1          //形参确认OK
  165   1          uint8 level = (uint8) param1;
  166   1          param2 = param2;
  167   1      
  168   1          BankSwitch((uint32) FMdrv_mute); //将常驻代码切换进来
  169   1          return FMdrv_setthrod(level);
  170   1      }
  171          
  172          //设置软件搜台
  173          uint8 cmd_fm_search(void *param1, void *param2)
  174          {
  175   1          //形参确认OK
  176   1          fm_status_t *sptr = (fm_status_t *) param1;
  177   1          uint8 SeekDirect = (*(uint8 *) param2);
  178   1      
  179   1          return FMdrv_search(sptr->freq, SeekDirect);
  180   1      }
  181          
  182          //启动seek (硬件搜台)
  183          uint8 cmd_fm_seek(void *param1, void *param2)
  184          {
  185   1          //形参确认OK
  186   1          uint16 start = (uint16) param1;
  187   1          uint16 stop = (uint16) param2;
  188   1          uint8 step = 1;
C251 COMPILER V4.55,  basal_fmradio                                                        23/05/16  10:42:14  PAGE 4   

  189   1          return FMdrv_seek(start, stop, step);
  190   1      }
  191          
  192          //获取seek状态
  193          uint8 cmd_fm_getseekflag(void *param1, void *param2)
  194          {
  195   1          //形参确认OK
  196   1          uint8 *flag = param1;
  197   1          param2 = param2;
  198   1          return FMdrv_getseekflag(flag);
  199   1      }
  200          
  201          //退出seek
  202          uint8 cmd_fm_breakseek(void *param1, void *param2)
  203          {
  204   1          //形参确认OK
  205   1          param1 = param1;
  206   1          param2 = param2;
  207   1          return FMdrv_breakseek(); //退出硬件搜台
  208   1      }
  209          
  210          //获取当前频率值
  211          uint8 cmd_fm_getfreq(void *param1, void *param2)
  212          {
  213   1          //形参确认OK
  214   1          uint8 result;
  215   1          uint16 *pfreg = param1;
  216   1          param2 = param2;
  217   1          result = FMdrv_getfreq(pfreg);
  218   1          //根据电台频率找到电台号
  219   1          cmd_fm_mid_findstation(NULL, NULL);
  220   1          return result;
  221   1      }
  222          
  223          //获取当前电台信号强度
  224          uint8 cmd_fm_getintensity(void *param1, void *param2)
  225          {
  226   1          //形参确认OK
  227   1          uint8 *pvalue = param1;
  228   1          param2 = param2;
  229   1          return FMdrv_getintensity(pvalue);
  230   1      }
  231          
  232          //获取当前电台状态
  233          uint8 cmd_fm_getstatus(void *param1, void *param2)
  234          {
  235   1          //形参确认OK
  236   1          uint8 result;
  237   1          fm_status_t *pBuf = param1; //FMStatus_Tab_t 结构体类型也可以
  238   1          param2 = param2;
  239   1          result = FMdrv_getstatus(pBuf);
  240   1          //根据电台频率找到电台号
  241   1          cmd_fm_mid_findstation(NULL, NULL);
  242   1          return result;
  243   1      }
  244          
  245          //播放电台
  246          uint8 cmd_fm_mid_play(void *param1, void *param2)
  247          {
  248   1          //形参确认OK
  249   1          uint16 Tempfreq;
  250   1      
  251   1          param1 = param1;
  252   1          param2 = param2;
  253   1      
  254   1          //FMcmd(FM_MUTE, SetMUTE,NULL);   //静音
C251 COMPILER V4.55,  basal_fmradio                                                        23/05/16  10:42:14  PAGE 5   

  255   1          fmSendCommand(FM_MUTE, SetMUTE, NULL);
  256   1      
  257   1          {
  258   2              Tempfreq = g_FMStatus.freq; //(g_FMStatus.freq << 6) + 0x0010;
  259   2          }
  260   1      
  261   1          FMdrv_setfreq(Tempfreq);
  262   1      
  263   1          //应该延时一下
  264   1          ap_sleep(1);
  265   1      
  266   1          FMdrv_mute(releaseMUTE); //解除静音
  267   1      
  268   1          return 0;
  269   1      }
  270          
  271          //保存当前电台
  272          uint8 cmd_fm_mid_save(void *param1, void *param2)
  273          {
  274   1          //即旧代码里的:MC_BACKUP 命令
  275   1      
  276   1          param2 = param2;
  277   1      
  278   1      #ifndef PC
  279   1          memcpy(((FMRADIO_param_t *) param1)->param1, m_FMStationTab, sizeof(m_FMStationTab));
  280   1          memcpy(((FMRADIO_param_t *) param1)->param2, &g_FMStatus, sizeof(fm_status_t));
  281   1      #else
                   memcpy((void *)param1, m_FMStationTab, sizeof(m_FMStationTab));
                   memcpy((void *)(param1 + 2), &g_FMStatus, sizeof(fm_status_t));
               #endif
  285   1          return 0;
  286   1      }
  287          
  288          //保存当前电台对应的电台表项号。
  289          uint8 cmd_fm_mid_savestation(void *param1, void *param2)
  290          {
  291   1          //uint8 i,k;
  292   1          uint8 result = FALSE;
  293   1          param1 = param1;
  294   1          param2 = param2;
  295   1      
  296   1          if (g_FMStatus.station_count >= MAX_STATION_COUNT)
  297   1          {
  298   2              return FALSE;
  299   2          }
  300   1      
  301   1          //把电台频率保存到电台表，如果已经存在，会返回失败
  302   1          g_FMStatus.station_count++;
  303   1          if (SequenceFreqlist(m_FMStationTab, g_FMStatus.freq, g_FMStatus.station_count) == FALSE)
  304   1          {
  305   2              g_FMStatus.station_count--; //添加失败
  306   2              return FALSE;
  307   2          }
  308   1      
  309   1          return TRUE;
  310   1      
  311   1      }
  312          
  313          //查找当前电台对应的电台表项号。
  314          //保存在 g_FMStatus.station 里
  315          uint8 cmd_fm_mid_findstation(void *param1, void *param2)
  316          {
  317   1          uint8 i = g_FMStatus.station_count;
  318   1          param1 = param1;
  319   1          param2 = param2;
  320   1          while (i--)
C251 COMPILER V4.55,  basal_fmradio                                                        23/05/16  10:42:14  PAGE 6   

  321   1          {
  322   2              if (g_FMStatus.freq == m_FMStationTab[i])
  323   2              {
  324   3                  g_FMStatus.station = (i + 1);
  325   3                  return 0;
  326   3              }
  327   2          }
  328   1          g_FMStatus.station = 0;
  329   1          return 0;
  330   1      }
  331          
  332          //根据电台表项号加载频率。
  333          uint8 cmd_fm_mid_loadfreq(void *param1, void *param2)
  334          {
  335   1          uint8 i = g_FMStatus.station_count;
  336   1          param1 = param1;
  337   1          param2 = param2;
  338   1          if (g_FMStatus.station_count != 0)
  339   1          {
  340   2              g_FMStatus.freq = m_FMStationTab[g_FMStatus.station - 1];
  341   2          }
  342   1          return 0;
  343   1      }
  344          
  345          //还原当前电台
  346          uint8 cmd_fm_mid_restore(void *param1, void *param2)
  347          {
  348   1          param2 = param2;
  349   1      
  350   1      #ifndef PC
  351   1          memcpy(m_FMStationTab, ((FMRADIO_param_t *) param1)->param1, sizeof(m_FMStationTab));
  352   1          memcpy(&g_FMStatus, ((FMRADIO_param_t *) param1)->param2, sizeof(fm_status_t));
  353   1      #else
                   memcpy(m_FMStationTab, (void *)param1, sizeof(m_FMStationTab));
                   memcpy(&g_FMStatus, (void *)(param1 + 2), sizeof(fm_status_t));
               #endif
  357   1          return 0;
  358   1      }
  359          
  360          //切换下一个电台
  361          uint8 cmd_fm_mid_turn(void *param1, void *param2)
  362          {
  363   1          uint8 i;
  364   1      
  365   1          //param1 为 UP 或 DOWN
  366   1          param2 = param2;
  367   1      
  368   1          if (g_FMStatus.station_count >= 1) //有电台
  369   1          {
  370   2              if (g_FMStatus.station) //电台已经保存了
  371   2              {
  372   3                  if (param1 == UP)
  373   3                  {
  374   4                      g_FMStatus.station++;
  375   4                      if (g_FMStatus.station > g_FMStatus.station_count)
  376   4                      {
  377   5                          g_FMStatus.station = 1;
  378   5                      }
  379   4                  }
  380   3                  else if (param1 == DOWN)
  381   3                  {
  382   4                      g_FMStatus.station--;
  383   4                      if (g_FMStatus.station == 0)
  384   4                      {
  385   5                          g_FMStatus.station = g_FMStatus.station_count;
  386   5                      }
C251 COMPILER V4.55,  basal_fmradio                                                        23/05/16  10:42:14  PAGE 7   

  387   4                  }
  388   3              }
  389   2              else
  390   2              {
  391   3                  //电台还没保存，应该先求出电台在哪个台与台之间
  392   3                  i = g_FMStatus.station_count;
  393   3                  while (i)
  394   3                  {
  395   4                      //电台从小到大排序的，先找到小于此频道的电台
  396   4                      if (g_FMStatus.freq > m_FMStationTab[--i])
  397   4                      {
  398   5                          i++;
  399   5                          break;
  400   5                      }
  401   4                  }
  402   3                  //i == 0 时，频率比任何一个电台还低
  403   3                  //i == g_FMStatus.station_count ,则比任何一个电台还高
  404   3                  //否则电台在 i 与 i+ 1 之间
  405   3                  if (param1 == UP)
  406   3                  {
  407   4                      if (i == g_FMStatus.station_count)
  408   4                      {
  409   5                          g_FMStatus.station = 1;
  410   5                      }
  411   4                      else
  412   4                      {
  413   5                          g_FMStatus.station = i + 1;
  414   5                      }
  415   4                  }
  416   3                  else if (param1 == DOWN)
  417   3                  {
  418   4                      if (i == 0)
  419   4                      {
  420   5                          g_FMStatus.station = g_FMStatus.station_count;
  421   5                      }
  422   4                      else
  423   4                      {
  424   5                          g_FMStatus.station = i;
  425   5                      }
  426   4                  }
  427   3      
  428   3              }
  429   2              g_FMStatus.freq = m_FMStationTab[g_FMStatus.station - 1];
  430   2      
  431   2              FMdrv_setfreq((void *) g_FMStatus.freq);
  432   2      
  433   2              return TRUE;
  434   2          }
  435   1      
  436   1          return FALSE;
  437   1      }
  438          
  439          //删除当前电台
  440          //以g_FMStatus.station 为基准来删掉
  441          //如果g_FMStatus.station 为没保存，则以 g_FMStatus.freq 为基准
  442          uint8 cmd_fm_mid_delete(void *param1, void *param2)
  443          {
  444   1          //即旧代码里的:MC_DELONE 命令
  445   1      
  446   1          uint8 k;
  447   1      
  448   1          param1 = param1;
  449   1          param2 = param2;
  450   1      
  451   1          if (g_FMStatus.station == 0)
  452   1          {
C251 COMPILER V4.55,  basal_fmradio                                                        23/05/16  10:42:14  PAGE 8   

  453   2              cmd_fm_mid_findstation(NULL, NULL); //如果电台没保存，确认是否真的没保存
  454   2              if (g_FMStatus.station == 0)
  455   2              {
  456   3                  return FALSE;
  457   3              }
  458   2          }
  459   1          //m_FMStationTab[g_FMStatus.station-1]=0;
  460   1          //for (k = g_FMStatus.station; k < (g_FMStatus.station_count + 1); k++)
  461   1          for (k = g_FMStatus.station; k < (g_FMStatus.station_count); k++)
  462   1          {
  463   2              m_FMStationTab[k - 1] = m_FMStationTab[k]; //中间需要删除，所以后面的需要前移一位
  464   2          }
  465   1          g_FMStatus.station_count--;
  466   1          m_FMStationTab[g_FMStatus.station_count] = 0;
  467   1          g_FMStatus.station = 0;
  468   1      
  469   1          return TRUE;
  470   1      }
  471          
  472          //删除全部电台
  473          uint8 cmd_fm_mid_delall(void *param1, void *param2)
  474          {
  475   1          //即旧代码里的:MC_DELALL 命令
  476   1          uint8 i;
  477   1      
  478   1          param1 = param1;
  479   1          param2 = param2;
  480   1      
  481   1          for (i = 0; i < MAX_STATION_COUNT; i++)
  482   1          {
  483   2              m_FMStationTab[i] = 0;
  484   2          }
  485   1          g_FMStatus.station = 0;
  486   1          g_FMStatus.station_count = 0;
  487   1      
  488   1          return 0;
  489   1      }
  490          
  491          //确定所选城市的第一个城市电台
  492          uint8 cmd_fm_mid_selcityinit(void *param1, void *param2)
  493          {
  494   1          param1 = param1;
  495   1          param2 = param2;
  496   1      
  497   1          return 0;
  498   1      }
  499          
  500          //在所选城市中上下切换城市电台
  501          uint8 cmd_fm_mid_cityswitch(void *param1, void *param2)
  502          {
  503   1          param1 = param1;
  504   1          param2 = param2;
  505   1          return 0;
  506   1      }
  507          
  508          //设置声音
  509          uint8 cmd_fm_mid_setvolume(void *param1, void *param2)
  510          {
  511   1          uint8 Vol = (uint8) param1;
  512   1          param2 = param2;
  513   1      
  514   1          FM_VolumeSet(Vol);
  515   1          return 0;
  516   1      }
  517          
  518          //电台频率微调，以100KHZ为步进
C251 COMPILER V4.55,  basal_fmradio                                                        23/05/16  10:42:14  PAGE 9   

  519          uint8 cmd_fm_mid_stepgrid(void *param1, void *param2)
  520          {
  521   1          uint16 Tempfreq;
  522   1      
  523   1          uint8 dir = (uint8) param1;
  524   1      
  525   1          param2 = param2;
  526   1      
  527   1          switch (dir)
  528   1          {
  529   2          case UP:
  530   2              if (((g_FMStatus.freq + 1) > USFREQ_MAX) && (g_radio_config.band_mode == Bank_US_Europe))
  531   2              {
  532   3                  g_FMStatus.freq = USFREQ_MIN;
  533   3              }
  534   2              else if (((g_FMStatus.freq + 1) > JPFREQ_MAX) && (g_radio_config.band_mode == Bank_Japan))
  535   2              {
  536   3                  g_FMStatus.freq = JPFREQ_MIN;
  537   3              }
  538   2              else
  539   2              {
  540   3                  g_FMStatus.freq += 1;
  541   3              }
  542   2              break;
  543   2          case DOWN:
  544   2              if ((g_FMStatus.freq == USFREQ_MIN) && (g_radio_config.band_mode == Bank_US_Europe))
  545   2              {
  546   3                  g_FMStatus.freq = USFREQ_MAX;
  547   3              }
  548   2              else if ((g_FMStatus.freq == JPFREQ_MIN) && (g_radio_config.band_mode == Bank_Japan))
  549   2              {
  550   3                  g_FMStatus.freq = JPFREQ_MAX;
  551   3              }
  552   2              else
  553   2              {
  554   3                  g_FMStatus.freq -= 1;
  555   3              }
  556   2              break;
  557   2          default:
  558   2              break;
  559   2          }
  560   1      
  561   1          Tempfreq = g_FMStatus.freq; //(g_FMStatus.freq << 6) + 0x0010;
  562   1      
  563   1          FMdrv_setfreq(Tempfreq);
  564   1          return TRUE;
  565   1      }
  566          
  567          const pfunc_cmd far fm_cmd_pfunc[CMD_COUNT] =
  568          {
  569              /* FM 中间层命令宏, 部分涉及到调用FM驱动接口 */
  570              cmd_fm_open, //安装fm驱动, 进行模组初始化
  571              cmd_fm_close, //模组进入standby, 并卸载fm驱动
  572              cmd_fm_hardware, //FM 硬件相关设置
  573              cmd_fm_setfreq, //设置单个频点播放
  574              cmd_fm_mute, //FM静音或解除静音
  575              cmd_fm_setband, //设置波段
  576              cmd_fm_setth, //设置搜台门限
  577              cmd_fm_search, //设置软件搜台
  578              cmd_fm_seek, //启动seek (硬件搜台)
  579              cmd_fm_getseekflag, //获取seek状态
  580              cmd_fm_breakseek, //退出seek
  581          
  582              cmd_fm_getfreq, //获取当前频率值
  583              cmd_fm_getintensity, //获取当前电台信号强度
  584              cmd_fm_getstatus, //获取当前电台状态
C251 COMPILER V4.55,  basal_fmradio                                                        23/05/16  10:42:14  PAGE 10  

  585          
  586              //中间逻辑层:与FM驱动无关
  587              cmd_fm_mid_play,
  588              cmd_fm_mid_save, //保存当前电台
  589              cmd_fm_mid_savestation,
  590              cmd_fm_mid_findstation, //查找当前电台对应的电台表项号。
  591              cmd_fm_mid_loadfreq, //根据电台表项号加载频率。
  592              cmd_fm_mid_restore, //还原当前电台
  593              cmd_fm_mid_turn, //换台
  594              cmd_fm_mid_delete, //删除当前电台
  595              cmd_fm_mid_delall, //删除全部电台
  596              cmd_fm_mid_selcityinit, //确定所选城市的第一个城市电台
  597              cmd_fm_mid_cityswitch, //在所选城市中上下切换城市电台
  598          
  599              cmd_fm_mid_setvolume, //设置声音
  600              cmd_fm_mid_stepgrid
  601          };
  602          
  603          /*
  604           ********************************************************************************
  605           *             uint8 FMcmd(uint8 cmd, uint16 param1, void *param2)
  606           *
  607           * Description : FM命令处理
  608           *
  609           * Arguments   :
  610           *
  611           * Returns     :
  612           *
  613           * Notes       :
  614           *
  615           ********************************************************************************
  616           */
  617          uint8 fmSendCommand(radio_cmd_e cmd, void *param1, void *param2)
  618          {
  619   1          uint8 ret = 0;
  620   1          if (cmd < CMD_COUNT)
  621   1          {
  622   2              ret = (fm_cmd_pfunc[(uint16) cmd]) (param1, param2);
  623   2          }
  624   1      
  625   1          return ret;
  626   1      }
  627          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =    ------     ------
  ecode size           =      1056     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        80     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       108     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
