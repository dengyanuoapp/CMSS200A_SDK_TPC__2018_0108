C251 COMPILER V4.55,  function                                                             23/05/16  10:41:37  PAGE 1   


C251 COMPILER V4.55, COMPILATION OF MODULE function
OBJECT MODULE PLACED IN .\Obj\function.obj
COMPILER INVOKED BY: C:\Keil\C251\BIN\C251.EXE function.c XSMALL FUNCTIONS(REENTRANT) ROM(HUGE) OPTIMIZE(9,SPEED) BROWSE
                    - INCDIR(..\..\..\psp_rel\inc;..\..\inc) I4 DEBUG PRINT(.\Lst\function.lst) OBJECT(.\Obj\function.obj) 

stmt  level    source

    1          #include "ap_linein.h"
    2          #include "actos.h"
    3          #include "ap_common.h"
    4          
    5          #pragma name(FUNCTION)
    6          //从VRAM中读出的EQ,SRS参数表，通过EQ工具设置
    7          EQ_VM_t g_eq_para;
    8          const uint8 EQtemp[eq_max][10] =
    9          {
   10              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, //none
   11              5, 3, -1, -2, 0, 1, 3, 6, 0, 0, //rock
   12              0, 3, 4, 3, 0, -1, -2, 6, 0, 0, //Pop
   13              6, 4, 2, 0, 1, 3, 5, 6, 0, 0, //Classic
   14              0, 0, 1, 2, 0, 2, 4, 6, 0, 0, //Soft
   15              2, 1, 0, -1, -2, 0, 3, 6, 0, 0, //Jazz
   16              6, 5, 3, 2, 1, 0, 0, 6, 0, 0,//Dbb
   17              6, 6, 5, 4, 6, 1, 0, 6, 1, 0 //user
   18          };
   19          
   20          void volume_callback(uint16 Vol)
   21          {
   22   1          //实时改变音量的值
   23   1          //   g_comval.volume = (uint8) Vol * SOFTVOL_MAX / g_comval.VolumeMax;
   24   1          OutPutVolume(g_comval.volume);
   25   1      }
*** WARNING C47 IN LINE 20 OF FUNCTION.C: 'Vol': unreferenced parameter
   26          
   27          /*===========================================
   28           functions: OutPutVolume(int vol)
   29           input:    int vol: 要输出的音量
   30           output:  void
   31           功能： 把音量值送到IO口，
   32           ============================================*/
   33          void OutPutVolume(uint16 vol)
   34          {
   35   1          set_dac_volume(vol);
   36   1      }
   37          /********************************************************************************
   38           * Description : Callback eq function
   39           *
   40           * Arguments  :
   41           *
   42           * Returns     :
   43           *            无
   44           * Notes       :
   45           *
   46           ********************************************************************************/
   47          uint8 callback_eq(eq_t eq_type, uint8 *buf)
   48          {
   49   1          if ((eq_type == 0) && (buf == NULL))
   50   1          {
   51   2              g_decControlInfor.EQFlag = 0x00;
   52   2              decEffectDeal();
   53   2          }
   54   1          else
   55   1          {
   56   2              g_decControlInfor.EQFlag = 0x67;
   57   2      
C251 COMPILER V4.55,  function                                                             23/05/16  10:41:37  PAGE 2   

   58   2              if (buf == NULL)
   59   2              {
   60   3                  //从VRAM读，保存的参数及时生效
   61   3                  VMRead(&g_eq_para, VM_PCSET_EQ, sizeof(EQ_VM_t));
   62   3      
   63   3                  if (g_eq_para.magic != EQ_VRAM_MAGIC)
   64   3                  {
   65   4                      //使用代码默认EQ表
   66   4                      memcpy(g_decControlInfor.EQVal, (void *) EQtemp[(uint8) eq_type],
   67   4                             sizeof(g_decControlInfor.EQVal));
   68   4                  }
   69   3                  else
   70   3                  {
   71   4                      //使用工具设置EQ表
   72   4                      memcpy(g_decControlInfor.EQVal, (void *) &g_eq_para.left_eq_para[(uint8) ONE_EQPARA_BYTE 
             -* eq_type],
   73   4                             ONE_EQPARA_BYTE);
   74   4                  }
   75   3              }
   76   2              else
   77   2              {
   78   3                  memcpy(g_decControlInfor.EQVal, (void *) buf, sizeof(g_decControlInfor.EQVal));
   79   3              }
   80   2      
   81   2              if (AuCodecRun)
   82   2              {
   83   3                  decEffectDeal();
   84   3              }
   85   2              g_decControlInfor.EQFlag = 0x87;
   86   2              if (buf == NULL)
   87   2              {
   88   3                  if (g_eq_para.magic != EQ_VRAM_MAGIC)
   89   3                  {
   90   4                      //使用代码默认EQ表
   91   4                      memcpy(g_decControlInfor.EQVal, (void *) EQtemp[(uint8) eq_type],
   92   4                             sizeof(g_decControlInfor.EQVal));
   93   4                  }
   94   3                  else
   95   3                  {
   96   4                      //使用工具设置EQ表
   97   4                      memcpy(g_decControlInfor.EQVal, (void *) &g_eq_para.right_eq_para[(uint8) ONE_EQPARA_BYTE
             - * eq_type],
   98   4                             ONE_EQPARA_BYTE);
   99   4                  }
  100   3              }
  101   2              else
  102   2              {
  103   3                  memcpy(g_decControlInfor.EQVal, (void *) buf, sizeof(g_decControlInfor.EQVal));
  104   3              }
  105   2              if (AuCodecRun)
  106   2              {
  107   3                  decEffectDeal();
  108   3              }
  109   2          }
  110   1          return 0;
  111   1      }
  112          /********************************************************************************
  113           * Description : Callback eq function
  114           *
  115           * Arguments  :
  116           *
  117           * Returns     :
  118           *            无
  119           * Notes       :
  120           *
  121           ********************************************************************************/
C251 COMPILER V4.55,  function                                                             23/05/16  10:41:37  PAGE 3   

  122          uint8 EQMode_callback(void)
  123          {
  124   1          uint8 tmp_eqdata[12];
  125   1          memcpy(tmp_eqdata, (void *) EQtemp[(uint8) g_comval.eq_type], 10);
  126   1          callback_eq(g_comval.eq_type, (void *) tmp_eqdata);
  127   1          return 0;
  128   1      }
  129          
  130          /*
  131           ********************************************************************************
  132           *             void deal_eq_msg(void)
  133           *
  134           * Description : 处理EQ模式调节消息
  135           *
  136           *
  137           * Arguments   :
  138           *
  139           * Returns     : void
  140           *
  141           * Notes       :
  142           *
  143           *
  144           *
  145           ********************************************************************************
  146           */
  147          
  148          uint8 deal_eq_msg(uint8 key)
  149          {
  150   1          if (key == Key_None)
  151   1          {
  152   2              if (CurUI_Type != EQ_UI)
  153   2              {
  154   3                  LEDClearScreen();
  155   3                  SetCurUI_Type(EQ_UI);
  156   3                  return NULL;
  157   3              }
  158   2              key = Key_Next;
  159   2          }
  160   1      
  161   1          if (key == Key_Next)
  162   1          {
  163   2              if (g_comval.eq_type < (eq_max - 1))
  164   2              {
  165   3                  g_comval.eq_type++;
  166   3              }
  167   2              else
  168   2              {
  169   3                  g_comval.eq_type = 0;
  170   3              }
  171   2          }
  172   1          else
  173   1          {
  174   2              if (g_comval.eq_type > 0)
  175   2              {
  176   3                  g_comval.eq_type--;
  177   3              }
  178   2              else
  179   2              {
  180   3                  g_comval.eq_type = eq_max - 1;
  181   3              }
  182   2      
  183   2          }
  184   1          EQMode_callback();
  185   1          need_draw = TRUE;
  186   1          return NULL;
  187   1      }
C251 COMPILER V4.55,  function                                                             23/05/16  10:41:37  PAGE 4   

  188          #if 0
               /********************************************************************************
                * Description : 处理音量键
                *
                * Arguments  :
                *
                * Returns     :
                *            无
                * Notes       :
                *
                ********************************************************************************/
               uint8 deal_vol_msg(uint8 key)
               {
                   if (key == Key_None)
                   {
                       if (CurUI_Type != Volume_UI)
                       {
                           LEDClearScreen();
                           SetCurUI_Type(Volume_UI);
                       }
                       else
                       {
                           SetCurUI_Type(Linein_UI);
                       }
                   }
                   else
                   {
                       if (CurUI_Type != Volume_UI)
                       {
                           LEDClearScreen();
                           SetCurUI_Type(Volume_UI);
                       }
                       if (key == Key_Next)
                       {
                           if (g_comval.volume < g_comval.VolumeMax)
                           {
                               g_comval.volume++;
                           }
                       }
                       else
                       {
                           if (g_comval.volume > 0)
                           {
                               g_comval.volume--;
                           }
                       }
                       volume_callback(g_comval.volume);
                   }
                   need_draw = TRUE;
                   return NULL;
               }
               #endif


Module Information          Static   Overlayable
------------------------------------------------
  code size            =    ------     ------
  ecode size           =       434     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       114     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
C251 COMPILER V4.55,  function                                                             23/05/16  10:41:37  PAGE 5   

  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        80     ------
End of Module Information.


C251 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
