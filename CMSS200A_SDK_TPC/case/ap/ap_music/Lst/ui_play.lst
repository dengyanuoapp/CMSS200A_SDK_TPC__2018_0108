C251 COMPILER V4.55,  ui_play                                                              23/05/16  10:41:53  PAGE 1   


C251 COMPILER V4.55, COMPILATION OF MODULE ui_play
OBJECT MODULE PLACED IN .\Obj\ui_play.obj
COMPILER INVOKED BY: C:\Keil\C251\BIN\C251.EXE ui_play.c XSMALL NOALIAS FUNCTIONS(REENTRANT) ROM(HUGE) OPTIMIZE(9,SPEED)
                    - BROWSE INCDIR(..\..\inc;..\..\..\psp_rel\inc) I4 DEBUG PRINT(.\Lst\ui_play.lst) OBJECT(.\Obj\ui_play.obj) 

stmt  level    source

    1          /*
    2           ******************************************************************************
    3           *                               AS211A
    4           *                            Module: music
    5           *                 Copyright(c) 2002-2010 Actions Semiconductor,
    6           *                            All Rights Reserved.
    7           *
    8           * Descripton: play status module
    9           *
   10           * History:
   11           *      <author>    <time>           <version >             <desc>
   12           *       xusong    2010-07-15 15:00     1.0             build this file
   13           ******************************************************************************
   14           */
   15          #include "ap_music.h"
   16          #define IntCntValDef 10
   17          
   18          extern bool g_light_flag;
   19          uint8 fast_switch_music(void);
   20          
   21          #pragma name(AP_UI_PLY)
   22          /*
   23           ********************************************************************************
   24           *             uint16 ui_play( void )
   25           *
   26           * Description : 显示时间，滚屏, AB闪
   27           *
   28           * Arguments   : void
   29           *
   30           * Returns     : void
   31           *
   32           * Notes       :
   33           *
   34           ********************************************************************************
   35           */
   36          uint8 ui_play(void)
   37          {
   38   1          uint8 retval;
   39   1          FF_flag = 0;
   40   1          while (ap_get_message() != NULL)
   41   1              ;
   42   1      #ifdef MUSIC_AP
                   if(g_comval.SuppTTS != 0)
                   {
                       retval = report_disk_info();
                       if(retval > 1)
                       {
                           return retval;
                       }
                   }
               #endif
   52   1          while (1)
   53   1          {
   54   2              ClearWatchDog();
   55   2              retval = get_file_info();
   56   2              if (retval != NULL)
   57   2              {
   58   3                  return retval;
C251 COMPILER V4.55,  ui_play                                                              23/05/16  10:41:53  PAGE 2   

   59   3              }
   60   2              if (no_device_flag == TRUE)
   61   2              {
   62   3                  return RESULT_MAIN;
   63   3              }
   64   2              if (need_draw != 0)
   65   2              {
   66   3                  RefreshMainScreen();
   67   3                  need_draw = FALSE;
   68   3              }
   69   2              //处理EQ工具调节EQ请求
   70   2              deal_pc_eqsrs(0);
   71   2              retval = deal_key_msg();
   72   2              if (retval != NULL)
   73   2              {
   74   3                  return retval;
   75   3              }
   76   2              retval = deal_play_status();
   77   2              if (retval != NULL)
   78   2              {
   79   3                  return retval;
   80   3              }
   81   2              retval = fast_switch_music();
   82   2              if (retval != NULL)
   83   2              {
   84   3                  return retval;
   85   3              }
   86   2              retval = fast_switch_dir();
   87   2              if (retval != NULL)
   88   2              {
   89   3                  return retval;
   90   3              }
   91   2          }/* end of while(1) */
   92   1          return 0;
   93   1      }
   94          /*
   95           ********************************************************************************
   96           *             void save_dir_info(void)
   97           *
   98           * Description : 保存备份当前的路径信息，主要对于exfat文件系统，对于fat16/32
   99           *                              不起任何作用
  100           *
  101           * Arguments   : void
  102           *
  103           * Returns     : void
  104           *
  105           * Notes       :
  106           *
  107           ********************************************************************************
  108           */
  109          
  110          void save_dir_info(void)
  111          {
  112   1          uint8 dir_buf[74];
  113   1          memset(dir_buf, 0x0, 74);
  114   1          FS_GetCurDir_layer(dir_buf);
  115   1          if (CurUselocation.disk == disk_char[0])
  116   1          {
  117   2              VMWrite(dir_buf, VM_EXFAT_INFO_UH, sizeof(dir_buf));
  118   2          }
  119   1          else
  120   1          {
  121   2              VMWrite(dir_buf, VM_EXFAT_INFO_CARD, sizeof(dir_buf));
  122   2          }
  123   1      }
  124          /*
C251 COMPILER V4.55,  ui_play                                                              23/05/16  10:41:53  PAGE 3   

  125           ********************************************************************************
  126           *             void get_music_location(void)
  127           *
  128           * Description : 获取当前歌曲的location信息，当前磁盘的文件总数，当前的文件序号;
  129           *                              获取文件的ID3信息，以及将信息保存到vram中。
  130           *
  131           * Arguments   : void
  132           *
  133           * Returns     : void
  134           *
  135           * Notes       :
  136           *
  137           ********************************************************************************
  138           */
  139          
  140          void get_music_location(uint8 flag)
  141          {
  142   1          stop_music_play(TRUE);
  143   1          FSELGetLocation(&CurUselocation);
  144   1          save_dir_info();
  145   1          if (flag != 0)
  146   1          {
  147   2              read_breakpoint();
  148   2          }
  149   1          //    g_musicamount = FSELGetTotal();
  150   1          g_musicsequence = FSELGetNo();
  151   1          GetInformation(); //取文件信息
  152   1          g_music_vars.cur_disk = CurUselocation.disk;
  153   1          CurUselocation.fselTotal = g_musicamount;
  154   1          CurUselocation.fselFileNo = g_musicsequence;
  155   1          if (CurUselocation.disk == disk_char[0])
  156   1          {
  157   2              memcpy(&g_music_vars.location[0], &CurUselocation, sizeof(file_location_t));
  158   2              memcpy(&g_music_vars.BreakPoit[0], &g_music_vars.BreakPTSave, sizeof(breakPT_t));
  159   2          }
  160   1          else
  161   1          {
  162   2              memcpy(&g_music_vars.location[1], &CurUselocation, sizeof(file_location_t));
  163   2              memcpy(&g_music_vars.BreakPoit[1], &g_music_vars.BreakPTSave, sizeof(breakPT_t));
  164   2          }
  165   1          VMWrite(&g_music_vars, VM_AP_MUSIC_CARD, sizeof(g_music_vars));
  166   1          VMWrite(&g_comval, VM_SYSTEM, sizeof(g_comval));
  167   1          if (max_music_err >= g_musicamount)
  168   1          {
  169   2              max_music_err = g_musicamount;
  170   2          }
  171   1          PlayStatus = PauseSta; //暂停时不会去获取当前时间，使用之前保存的断点时间
  172   1          need_draw = TRUE;
  173   1      }
  174          /*
  175           ********************************************************************************
  176           *             void fast_switch_music(void)
  177           *
  178           * Description : 快速切换文件，切换过程中获取文件信息，不打开播放文件
  179           *
  180           *
  181           * Arguments   : void
  182           *
  183           * Returns     : void
  184           *
  185           * Notes       :
  186           *
  187           ********************************************************************************
  188           */
  189          
  190          uint8 fast_switch_music(void)
C251 COMPILER V4.55,  ui_play                                                              23/05/16  10:41:53  PAGE 4   

  191          {
  192   1          uint8 retval = NULL;
  193   1          if ((FF_flag == 0) || (CurUI_Type != FileNo_UI))
  194   1          {
  195   2              return retval;
  196   2          }
  197   1          if(holdkey_flag == FALSE)
  198   1          {
  199   2              deal_long_keyup();
  200   2              return retval;
  201   2          }
  202   1          err_music_count = 0;
  203   1      get_next_continue:
  204   1          retval = deal_change_music_msg(FF_flag);
  205   1          if ((retval == RESULT_UI_STOP) && (g_music_vars.repeat_mode == FSEL_ALL_RANDOM))
  206   1          {
  207   2              goto get_next_continue;
  208   2          }
  209   1          get_fileinfo_flag = FALSE;
  210   1          itoa4(g_musicsequence, temp_buffer);
  211   1          LEDPuts(NUMBER1, temp_buffer, 1);
  212   1          return retval;
  213   1      }
  214          /*
  215           ********************************************************************************
  216           *             void fast_switch_dir(void)
  217           *
  218           * Description : 快速切换目录，切换过程中只获取文件信息，不打开播放文件
  219           *
  220           *
  221           * Arguments   : void
  222           *
  223           * Returns     : void
  224           *
  225           * Notes       :
  226           *
  227           ********************************************************************************
  228           */
  229          
  230          uint8 fast_switch_dir(void)
  231          {
  232   1          uint8 retval = NULL;
  233   1          if ((FF_flag == 0) || (CurUI_Type != DIRNAME_UI))
  234   1          {
  235   2              return retval;
  236   2          }
  237   1          if(holdkey_flag == FALSE)
  238   1          {
  239   2              deal_long_keyup();
  240   2              return retval;
  241   2          }
  242   1          err_music_count = 0;
  243   1          retval = deal_folder_key(FF_flag);
  244   1          itoa4(dir_no, temp_buffer);
  245   1          LEDPuts(NUMBER1, temp_buffer, 1);
  246   1          get_fileinfo_flag = FALSE;
  247   1          return retval;
  248   1      }
  249          /*
  250           ********************************************************************************
  251           *             void deal_next_prev_msg(void)
  252           *
  253           * Description : 处理不同场景下短按next,prev key的功能
  254           *
  255           *
  256           * Arguments   : void
C251 COMPILER V4.55,  ui_play                                                              23/05/16  10:41:53  PAGE 5   

  257           *
  258           * Returns     : void
  259           *
  260           * Notes       :1.在音量界面实现调节音量功能
  261           *                         2.在EQ调节界面实现EQ切换功能
  262           *                         3.在循环模式界面实现切换循环方式功能
  263           *                         4.在设置自动关机界面实现调节自动关机时间界功能
  264           *                         5.其他情况下实现切换歌曲功能
  265           *
  266           ********************************************************************************
  267           */
  268          
  269          uint8 deal_next_prev_msg(uint8 key)
  270          {
  271   1          uint8 retval = NULL;
  272   1          FF_flag = 0;
  273   1          switch (CurUI_Type)
  274   1          {
  275   2          case Volume_UI:
  276   2              retval = deal_vol_msg(key, Music_UI);
  277   2              break;
  278   2          case EQ_UI:
  279   2              retval = deal_eq_msg(key);
  280   2              break;
  281   2          case Repeat_UI:
  282   2              retval = deal_repeat_msg(key);
  283   2              break;
  284   2          case STANDBY_UI:
  285   2              set_autosleep_time(key);
  286   2              break;
  287   2          default:
  288   2              prev_key_direc = key;
  289   2              err_music_count = 0;
  290   2      get_next_continue:
  291   2              retval = deal_change_music_msg(key);
  292   2              if ((retval == RESULT_UI_STOP) && (g_music_vars.repeat_mode == FSEL_ALL_RANDOM))
  293   2              {
  294   3                  goto get_next_continue;
  295   3              }
  296   2              if (prev_PlayStatus != PlaySta)
  297   2              {
  298   3                  get_fileinfo_flag = FALSE;
  299   3              }
  300   2              break;
  301   2          }
  302   1          return retval;
  303   1      }
  304          /*
  305           ********************************************************************************
  306           *             void deal_play_key(void)
  307           *
  308           * Description : 处理不同场景下短按play key的功能
  309           *
  310           *
  311           * Arguments   : void
  312           *
  313           * Returns     : void
  314           *
  315           * Notes       :1.在非播放时间显示界面下切回播放时间显示界面
  316           *                         2.在播放时间显示界面暂停状态下，切换到播放状态
  317           *                         3.在播放时间显示界面播放状态下，切换到暂停状态
  318           *
  319           ********************************************************************************
  320           */
  321          
  322          uint8 deal_play_key(void)
C251 COMPILER V4.55,  ui_play                                                              23/05/16  10:41:53  PAGE 6   

  323          {
  324   1          if (CurUI_Type == Digital_UI)
  325   1          {
  326   2              SelMusicByDigital();
  327   2              return NULL;
  328   2          }
  329   1          if (CurUI_Type != Music_UI)
  330   1          {
  331   2              SetCurUI_Type(Music_UI);
  332   2              return NULL;
  333   2          }
  334   1          if (PlayStatus != PlaySta)
  335   1          {
  336   2              if (g_Openparam.typeerror == 1)
  337   2              {
  338   3                  get_next_prev_music(Music_Next, Auto_Sel);
  339   3              }
  340   2              get_fileinfo_flag = TRUE;
  341   2          }
  342   1          else
  343   1          {
  344   2              stop_music_play(TRUE);
  345   2              g_music_vars.MusicOpenMod = Nor_Break_open;
  346   2              PlayStatus = PauseSta;
  347   2              prev_PlayStatus = StopSta;
  348   2          }
  349   1          need_draw = TRUE;
  350   1          return NULL;//退回到停止状态
  351   1      }
  352          
  353          /*
  354           ********************************************************************************
  355           *             void deal_key_msg(void)
  356           *
  357           * Description : 处理系统消息和按键消息
  358           *
  359           *
  360           * Arguments   : void
  361           *
  362           * Returns     : void
  363           *
  364           * Notes       :1.将接受到的系统消息和按键消息转换为实际功能实现
  365           *
  366           ********************************************************************************
  367           */
  368          
  369          uint8 deal_key_msg(void)
  370          {
  371   1          uint8 key;
  372   1          uint8 result = NULL;
  373   1          key = ap_get_message(); //读键值
  374   1          switch (key)
  375   1          {
  376   2          case AP_MSG_RTC:
  377   2      #if 0
                       if (PlayStatus == PlaySta)
                       {
                           result = check_plug_device_msg(&micin_status, MIC_IN);
                           if ((result == AP_MSG_MIC_IN) && (mic_on_flag == 0))
                           {
                               mic_on_flag = 1;
                               OpenMicRoute(MIC_GAIN_VAL);
                           }
                           else if ((result == AP_MSG_MIC_OUT) && (mic_on_flag == 1))
                           {
                               mic_on_flag = 0;
C251 COMPILER V4.55,  ui_play                                                              23/05/16  10:41:53  PAGE 7   

                               CloseMicRoute();
                           }
                           result = NULL;
                       }
               #endif
  394   2              if (show_ui_flag != 0)
  395   2              {
  396   3                  show_count++;
  397   3                  if (show_count >= 4)
  398   3                  {
  399   4                      show_ui_flag = 0;
  400   4                      show_count = 0;
  401   4                      SetCurUI_Type(Music_UI);
  402   4                  }
  403   3              }
  404   2              break;
  405   2          case AP_MSG_WAIT_TIMEOUT:
  406   2              if (CurUI_Type == Digital_UI)
  407   2              {
  408   3                  SelMusicByDigital();
  409   3                  return NULL;
  410   3              }
  411   2              else if (CurUI_Type != Music_UI)
  412   2              {
  413   3                  SetCurUI_Type(Music_UI);
  414   3              }
  415   2              break;
  416   2          case AP_KEY_NEXT | AP_KEY_LONG: //快进
  417   2              key = Key_Next;
  418   2          case AP_KEY_PREV | AP_KEY_LONG: //快退
  419   2              if(FF_flag == 0)
  420   2              {
  421   3                  result = deal_next_prev_longmsg(key);
  422   3              }
  423   2              break;
  424   2      
  425   2          case AP_KEY_NEXT | AP_KEY_UP:
  426   2              key = Key_Next;
  427   2          case AP_KEY_PREV | AP_KEY_UP:
  428   2              result = deal_next_prev_msg(key);
  429   2              break;
  430   2          case AP_KEY_PLAY | AP_KEY_UP:
  431   2              result = deal_play_key();
  432   2              break;
  433   2          case AP_KEY_MODE | AP_KEY_UP:
  434   2              result = deal_mode_msg();
  435   2              if(result == 1)
  436   2              {
  437   3                  result = NULL;
  438   3              }
  439   2              break;
  440   2          case AP_KEY_LONGUP:
  441   2              deal_long_keyup();
  442   2              break;
  443   2          case AP_KEY_CLOCK | AP_KEY_UP:
  444   2              result = set_clock_ui(1);
  445   2              break;
  446   2          case AP_KEY_CLOCK | AP_KEY_LONG:
  447   2      #ifdef MUSIC_AP
                       longkey_flag = TRUE;
                       result = deal_clock_report();
                       if(result == 1)
                       {
                           result = 0;
                       }
               #endif
C251 COMPILER V4.55,  ui_play                                                              23/05/16  10:41:53  PAGE 8   

  455   2              break;
  456   2          case AP_KEY_VOL | AP_KEY_UP:
  457   2              key = Key_None;
  458   2              goto dealvolkey;
  459   2          case AP_KEY_VOLADD | AP_KEY_UP:
  460   2          case AP_KEY_VOLADD | AP_KEY_LONG:
  461   2              key = Key_Next;
  462   2          case AP_KEY_VOLSUB | AP_KEY_UP:
  463   2          case AP_KEY_VOLSUB | AP_KEY_LONG:
  464   2      dealvolkey:
  465   2              result = deal_vol_msg(key, Music_UI);
  466   2              break;
  467   2          case AP_KEY_VOL | AP_KEY_LONG:
  468   2      #ifdef MUSIC_AP
                       longkey_flag = TRUE;
                       result = deal_play_report();
               #endif
  472   2              break;
  473   2          case AP_KEY_EQ | AP_KEY_UP:
  474   2              result = deal_eq_msg(Key_None);
  475   2              break;
  476   2          case AP_KEY_LOOP | AP_KEY_UP:
  477   2              result = deal_repeat_msg(Key_None);
  478   2              break;
  479   2          case AP_MSG_SD_IN:
  480   2          case AP_MSG_SD_OUT:
  481   2          case AP_MSG_UH_IN:
  482   2          case AP_MSG_UH_OUT:
  483   2              deal_device_msg(key);
  484   2              break;
  485   2          case AP_KEY_FOLDERADD | AP_KEY_LONG:
  486   2              key = Key_Next;
  487   2          case AP_KEY_FOLDERSUB | AP_KEY_LONG:
  488   2              result = deal_folder_longmsg(key);
  489   2              break;
  490   2          case AP_KEY_FOLDERADD | AP_KEY_UP:
  491   2              key = Key_Next;
  492   2          case AP_KEY_FOLDERSUB | AP_KEY_UP:
  493   2              result = deal_folder_key(key);
  494   2              break;
  495   2          case AP_KEY_KARAOKE | AP_KEY_UP: /* 作为卡拉OK功能的快捷开关键 */
  496   2              g_music_vars.karaoke_flag = !g_music_vars.karaoke_flag;
  497   2              deal_caraok_msg();
  498   2              break;
  499   2          case AP_KEY_MICIN | AP_KEY_UP:
  500   2              //        mic_on_flag = !mic_on_flag;
  501   2              //        deal_mic_msg();
  502   2              break;
  503   2          case AP_KEY_MUTE | AP_KEY_UP:
  504   2              mute_flag = !mute_flag;
  505   2              deal_mute_msg();
  506   2              break;
  507   2          case AP_KEY_AUTOSLEEP | AP_KEY_UP:
  508   2              set_autosleep_time(Key_None);
  509   2              break;
  510   2          default:
  511   2              if ((key >= (AP_KEY_NUM0 | AP_KEY_UP)) && (key <= (AP_KEY_NUM9 | AP_KEY_UP)))
  512   2              {
  513   3                  result = deal_digital_key(key);
  514   3              }
  515   2              else
  516   2              {
  517   3                  result = ap_handle_hotkey(key);
  518   3              }
  519   2              break;
  520   2          }
C251 COMPILER V4.55,  ui_play                                                              23/05/16  10:41:53  PAGE 9   

  521   1          return (uint16) result;
  522   1      }
  523          void reinit_file_location(void)
  524          {
  525   1          if (CurUselocation.disk == disk_char[0])
  526   1          {
  527   2              memset(&g_music_vars.location[0], 0x0, sizeof(file_location_t));
  528   2              memset(&g_music_vars.BreakPoit[0], 0x0, sizeof(breakPT_t));
  529   2              strcpy(g_music_vars.location[0].path, FS_CD_ROOT);
  530   2              g_music_vars.location[0].disk = disk_char[0];
  531   2              memcpy(&CurUselocation, &g_music_vars.location[0], sizeof(file_location_t));
  532   2              memcpy(&g_music_vars.BreakPTSave, &g_music_vars.BreakPoit[0], sizeof(breakPT_t));
  533   2          }
  534   1          else
  535   1          {
  536   2              memset(&g_music_vars.location[1], 0x0, sizeof(file_location_t));
  537   2              memset(&g_music_vars.BreakPoit[1], 0x0, sizeof(breakPT_t));
  538   2              strcpy(g_music_vars.location[1].path, FS_CD_ROOT);
  539   2              g_music_vars.location[1].disk = disk_char[1];
  540   2              memcpy(&CurUselocation, &g_music_vars.location[1], sizeof(file_location_t));
  541   2              memcpy(&g_music_vars.BreakPTSave, &g_music_vars.BreakPoit[1], sizeof(breakPT_t));
  542   2          }
  543   1          get_fileinfo_flag = TRUE;
  544   1          PlayStatus = StopSta;
  545   1      }
  546          /*
  547           ********************************************************************************
  548           *             void get_file_info(void)
  549           *
  550           * Description : 获取文件信息和转换播放状态
  551           *
  552           *
  553           * Arguments   : void
  554           *
  555           * Returns     : void
  556           *
  557           * Notes       :1.根据get_fileinfo_flag判断是否需要获取文件系统及转换播放状态
  558           *                         2.如果是暂停状态下则不再更新文件系统及获取断点信息
  559           *                         3.打开文件然后开始播放
  560           *
  561           ********************************************************************************
  562           */
  563          
  564          uint8 get_file_info(void)
  565          {
  566   1          uint8 retval = NULL;
  567   1          uint8 reinit_flag = FALSE;
  568   1          uint16 tmp_musicsequence;
  569   1      get_info_continue:
  570   1          if ((get_fileinfo_flag == 0) || (no_device_flag == TRUE))
  571   1          {
  572   2              return NULL;
  573   2          }
  574   1          get_fileinfo_flag = FALSE;
  575   1          if (Read_VMflag)
  576   1          {
  577   2              //        read_VM();
  578   2              Read_VMflag = FALSE;
  579   2              //如果重新初始化以后，VRAM保存的文件总数与实际计算的文件总数不同，
  580   2              //说明对磁盘有过操作，则清除断点信息，从头开始播放
  581   2              if(g_musicamount != CurUselocation.fselTotal)
  582   2              {
  583   3                  reinit_file_location();
  584   3                  goto get_info_continue;
  585   3              }
  586   2              tmp_musicsequence = CurUselocation.fselFileNo;
C251 COMPILER V4.55,  ui_play                                                              23/05/16  10:41:53  PAGE 10  

  587   2              reinit_flag = TRUE;
  588   2          }
  589   1          /*暂停状态不去更新文件信息，加快暂停速度*/
  590   1          if (PlayStatus != PauseSta)
  591   1          {
  592   2              if (UpdateFileSelector() == 0)
  593   2              {
  594   3                  need_draw = FALSE;
  595   3                  no_device_flag = TRUE;
  596   3                  return NULL;
  597   3              }
  598   2              //        read_breakpoint();
  599   2              auto_switch_device_flag = 0;
  600   2              get_music_location(TRUE);
  601   2              //如果重新初始化以后，VRAM保存的文件序号与实际计算的文件序号不同，
  602   2              //说明对磁盘有过操作，则清除断点信息，从头开始播放
  603   2              if((reinit_flag == TRUE) && (tmp_musicsequence != CurUselocation.fselFileNo))
  604   2              {
  605   3                  reinit_file_location();
  606   3                  reinit_flag = FALSE;
  607   3                  goto get_info_continue;
  608   3              }
  609   2              reinit_flag = FALSE;
  610   2              g_music_vars.karaoke_flag = 0;
  611   2              show_ui_flag = TRUE;
  612   2              prev_PlayStatus = PlaySta;
  613   2              SetCurUI_Type(FileNo_UI);
  614   2      
  615   2          }
  616   1          else
  617   1          {
  618   2              show_ui_flag = FALSE;
  619   2          }
  620   1      #if 0
                   if((g_musicamount == 0) || (g_musicamount < g_musicsequence))
                   {
                       reinit_file_location();
                       goto get_info_continue;
                   }
               #endif
  627   1          if (g_Openparam.typeerror == 1)
  628   1          {
  629   2              err_music_count++;
  630   2              retval = get_next_prev_music(Music_Next, Auto_Sel);
  631   2              get_fileinfo_flag = FALSE;
  632   2              //正在获取下一首时拔卡或u盘的情况
  633   2              if (retval == RESULT_UI_STOP)
  634   2              {
  635   3                  if (CurUselocation.disk == disk_char[1] && (DRV_DetectUD(1) == 0x20))
  636   3                  {
  637   4                  }
  638   3                  else if ((CurUselocation.disk == disk_char[0]) && (USBH_Check_Udisk() != 0))
  639   3                  {
  640   4                  }
  641   3                  else
  642   3                  {
  643   4                      return RESULT_MAIN;
  644   4                  }
  645   3                  reinit_file_info();
  646   3                  need_draw = TRUE;
  647   3                  goto get_info_continue;
  648   3              }
  649   2          }
  650   1      #ifdef MUSIC_AP
                   if(show_ui_flag == TRUE)
                   {
C251 COMPILER V4.55,  ui_play                                                              23/05/16  10:41:53  PAGE 11  

                       show_fileno_ui();
                   }
                   if(g_Openparam.typeerror == 1)
                   {
                       retval = 0;
                   }
                   else
                   {
                       retval = deal_play_report();
                   }
                   if((retval == 1)||(Read_VMflag==TRUE))
                   {
                       need_draw = TRUE;
                       retval = 0;
                       goto get_info_continue;
                   }
                   else if(retval != 0)
                   {
                       return retval;
                   }
                   //如果有TTS播报则不在延时显示文件序号
                   if((show_ui_flag == TRUE) && (g_TagInfoBuf[0] != 0x0))
                   {
                       show_ui_flag = FALSE;
                       SetCurUI_Type(Music_UI);
                   }
               #endif
  680   1          retval = switch_play_status(1);
  681   1          //正在解码过程中拔卡或u盘的情况
  682   1          if (retval != 0)
  683   1          {
  684   2              if (CurUselocation.disk == disk_char[1] && (DRV_DetectUD(1) == 0x20))
  685   2              {
  686   3                  reinit_file_info();
  687   3                  retval = NULL;
  688   3              }
  689   2              else if ((CurUselocation.disk == disk_char[0]) && (USBH_Check_Udisk() != 0))
  690   2              {
  691   3                  reinit_file_info();
  692   3                  retval = NULL;
  693   3              }
  694   2              else
  695   2              {
  696   3                  retval = deal_playing_err();
  697   3              }
  698   2              if (retval == NULL)
  699   2              {
  700   3                  need_draw = TRUE;
  701   3                  goto get_info_continue;
  702   3              }
  703   2          }
  704   1          return retval;
  705   1      
  706   1      }
  707          void get_check_sum(void)
  708          {
  709   1          uint8 check_sum;
  710   1          uint8 i;
  711   1          if (CurUselocation.filename[11] != 0xfe)
  712   1          {
  713   2              return;
  714   2          }
  715   1          check_sum = FS_GetCheckSum();
  716   1          if (g_music_vars.MusicOpenMod != Nor_open)
  717   1          {
  718   2              return;
C251 COMPILER V4.55,  ui_play                                                              23/05/16  10:41:53  PAGE 12  

  719   2          }
  720   1          for (i = 0; i < 2; i++)
  721   1          {
  722   2              if (CurUselocation.disk == disk_char[i])
  723   2              {
  724   3                  if (check_sum != g_music_vars.check_sum[i])
  725   3                  {
  726   4                      g_music_vars.check_sum[i] = check_sum;
  727   4                      ClearTimePara();
  728   4                  }
  729   3                  else
  730   3                  {
  731   4                      break;
  732   4                  }
  733   3              }
  734   2          }
  735   1      }
  736          /*
  737           ********************************************************************************
  738           *             void switch_play_status(void)
  739           *
  740           * Description : 将文件切换到播放状态
  741           *
  742           *
  743           * Arguments   : void
  744           *
  745           * Returns     : void
  746           *
  747           * Notes       :1.如果支持语言,则先播放歌曲的ID3信息，没有ID3时播放歌曲文件名
  748           *
  749           *
  750           *
  751           *
  752           ********************************************************************************
  753           */
  754          
  755          uint8 switch_play_status(uint8 report_flag)
  756          {
  757   1          report_flag = report_flag;
  758   1          if ((no_device_flag == TRUE) || (g_Openparam.typeerror == 1))
  759   1          {
  760   2              return RESULT_MAIN;
  761   2          }
  762   1          stop_music_play(FALSE);
  763   1          write_poweroff_flag(1);
  764   1          musicpSendCommand_bank(MC_OPEN, (void *) &g_Openparam);
  765   1          //对于exfat文件系统，需要获取文件名的校验和，以便断点继播时
  766   1          //用来判断是否为同一个文件
  767   1          get_check_sum();
  768   1          if (!musicpSendCommand_bank(MC_LOAD, NULL))
  769   1          {
  770   2              return 1;
  771   2          }
  772   1          musicpSendCommand_bank(MC_SETPOWERCOUNT, 5);
  773   1      
  774   1          if (!musicpSendCommand_bank(MC_PLAY, (void *) (g_music_vars.MusicOpenMod)))
  775   1          {
  776   2              musicpSendCommand_bank(MC_STOP, NULL);
  777   2              return 1;
  778   2          }
  779   1          volume_callback(g_comval.volume);
  780   1          prev_PlayStatus = PlaySta;
  781   1          return 0;
  782   1      }
  783          

C251 COMPILER V4.55,  ui_play                                                              23/05/16  10:41:53  PAGE 13  


Module Information          Static   Overlayable
------------------------------------------------
  code size            =    ------     ------
  ecode size           =      2131     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =         2     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
