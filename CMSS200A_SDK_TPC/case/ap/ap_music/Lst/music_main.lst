C251 COMPILER V4.55,  music_main                                                           23/05/16  10:41:52  PAGE 1   


C251 COMPILER V4.55, COMPILATION OF MODULE music_main
OBJECT MODULE PLACED IN .\Obj\music_main.obj
COMPILER INVOKED BY: C:\Keil\C251\BIN\C251.EXE music_main.c XSMALL NOALIAS FUNCTIONS(REENTRANT) ROM(HUGE) OPTIMIZE(9,SPE
                    -ED) BROWSE INCDIR(..\..\inc;..\..\..\psp_rel\inc) I4 DEBUG PRINT(.\Lst\music_main.lst) OBJECT(.\Obj\music_main.obj) 

stmt  level    source

    1          /*
    2           ******************************************************************************
    3           *                               AS211A
    4           *                            Module: music
    5           *                 Copyright(c) 2002-2010 Actions Semiconductor,
    6           *                            All Rights Reserved.
    7           *
    8           * Descripton: main module of music
    9           *
   10           * History:
   11           *      <author>    <time>           <version >             <desc>
   12           *       xusong    2010-07-15 15:00     1.0             build this file
   13           ******************************************************************************
   14           */
   15          #include "ap_music.h"
   16          
   17          #pragma name(AP_MAIN)
   18          /*常量段定义*/
   19          uint8 g_TagInfoBuf[92];//用于放TAG信息的BUF
   20          uint16 g_musicamount = 0;//当前目录歌曲总数
   21          uint16 g_musicsequence = 0;//当前歌曲序号
   22          /*全局数据段定义*/
   23          bool g_PAOpenFlag = FALSE; //标志PA的开关状态
   24          bool Read_VMflag = TRUE;//FALSE:不读VM ,TRUE:读VM
   25          music_vars_t g_music_vars;//本AP的公共变量
   26          file_location_t CurUselocation;//当前正在使用的location信息
   27          Open_param_t g_Openparam;
   28          Play_status_t PlayStatus = StopSta; //停止状态
   29          Play_status_t prev_PlayStatus = StopSta; //上一次的播放状态
   30          
   31          Music_type_t g_currentMusicType = Music_NON;//标志当前音乐的类型(mp3/wma/asf/wmv)
   32          
   33          uint8 FF_flag;//当前处理快进状态标记
   34          uint8 get_fileinfo_flag;//是否需要获取文件信息标志
   35          uint8 auto_switch_device_flag;//自动切换磁盘标志
   36          uint8 no_device_flag;//无磁盘或磁盘无文件标志
   37          uint16 dir_no;//当前目录序号
   38          uint8 scan_flag = TRUE;//是否需要扫描全盘标志
   39          //记录上一次的按键，主要是区分上一次是next还是prev,以
   40          //便在切换上一曲遇到非法文件时可以继续向上切换，而不是继续切换到下一首
   41          uint8 prev_key_direc = Key_Next;
   42          uint8 micin_status;//mic是否插入状态。0-不存在mic.1-mic已经插着
   43          uint16 err_music_count;//出错歌曲计数
   44          uint16 max_music_err = MAX_ERR_MUSIC_NUM; //最大歌曲出错数
   45          uint8 g_power_flag = 0;//是否突然断电标志
   46          uint8 first_init = TRUE;//卡和u盘切换情况，防止卡和u盘都没文件时进入不断切换状态
   47          
   48          uint8 disk_char[MAX_DISK_NUM] = //存储盘符信息,分别为u盘，卡盘，卡base
   49          { 'U', 'H', 'C' };
   50          uint8 load_str[5] =
   51          { "LOAD" };
   52          uint8 err_str[5] =
   53          { "ERRZ" };
   54          uint8  support_fav = 0;          //是否支持收藏夹,默认不支持
   55          EQ_VM_t g_eq_para;
   56          
   57          //for analog mic
   58          int8 AuCodecRun = 0;
C251 COMPILER V4.55,  music_main                                                           23/05/16  10:41:52  PAGE 2   

   59          int16 SentenceDectTime;
   60          uint8 SentenceDectEnergy;
   61          int16 SentenceDectTime_bak;
   62          int8 c_decEffectFlag;
   63          int8 SetenceFlag = 0;
   64          uint8 m_decSpdifTimer_Sav, m_decAnalogTimer_Sav;
   65          uint32 m_decSpdifddrSav;
   66          
   67          int16 main(int16 param)
   68          {
   69   1          int16 main_result;
   70   1          bool card_exist = FALSE, uhost_exist = FALSE;
   71   1          auto_switch_device_flag = 1;
   72   1          /* 读入公共变量 */
   73   1          read_var();
   74   1          read_VM();
   75   1          //    SetPAVolume(g_comval.volume);
   76   1          if (param == RESULT_MUSIC)
   77   1          {
   78   2              if (g_music_vars.cur_disk == disk_char[1])
   79   2              {
   80   3                  param = RESULT_MUSIC_CPLAY;
   81   3              }
   82   2              else
   83   2              {
   84   3                  param = RESULT_MUSIC_UPLAY;
   85   3              }
   86   2          }
   87   1          if (param == RESULT_MUSIC_CPLAY)
   88   1          {
   89   2              /* 选择卡盘播放 */
   90   2              if (DRV_DetectUD(1) == 0x20)
   91   2              {
   92   3                  CurUselocation.disk = disk_char[1];
   93   3              }
   94   2              else if (USBH_Check_Udisk())
   95   2              {
   96   3                  CurUselocation.disk = disk_char[0];
   97   3              }
   98   2              else
   99   2              {
  100   3                  return RESULT_MAIN;
  101   3              }
  102   2          }
  103   1          else
  104   1          {
  105   2              /* 选择U盘播放 */
  106   2              if (USBH_Check_Udisk())
  107   2              {
  108   3                  CurUselocation.disk = disk_char[0];
  109   3              }
  110   2              else if (DRV_DetectUD(1) == 0x20)
  111   2              {
  112   3                  CurUselocation.disk = disk_char[1];
  113   3              }
  114   2              else
  115   2              {
  116   3                  return RESULT_MAIN;
  117   3              }
  118   2          }
  119   1          g_music_vars.cur_disk = CurUselocation.disk;
  120   1      
  121   1          CurUselocation.fselTotal = 0;
  122   1          CurUselocation.ID3buffer = g_TagInfoBuf;
  123   1          g_Openparam.filename = CurUselocation.filename;//文件名地址
  124   1          g_Openparam.BreakPTSave = &g_music_vars.BreakPTSave;//备份参数地址
C251 COMPILER V4.55,  music_main                                                           23/05/16  10:41:52  PAGE 3   

  125   1          g_Openparam.typeerror = 0;//默认为正常格式文件
  126   1          g_Openparam.SoftVolumeMax = 0;
  127   1          g_Openparam.FadeInTime = 0x03;
  128   1      
  129   1          g_music_vars.fselmod = FSEL_TYPE_COMMONDIR;//每次进入都是设为目录选择器
  130   1          LEDClearScreen();
  131   1          LEDPuts(NUMBER1, load_str, 1);
  132   1          if (InitFileSelector() == 0)
  133   1          {
  134   2              no_device_flag = TRUE;
  135   2              LEDPuts(NUMBER1, err_str, 1);
  136   2              ap_sleep(4);
  137   2              return RESULT_MAIN;
  138   2          }
  139   1          else
  140   1          {
  141   2              PlayStatus = StopSta;
  142   2              need_draw = TRUE;/* 需要画screen */
  143   2              get_fileinfo_flag = TRUE;
  144   2          }
  145   1          // OpenPA();
  146   1          //  openDAC();
  147   1          //    SetPAVolume_LR(g_comval.volume, g_comval.volume);
  148   1          // init_mic_in_gpio();
  149   1          //先过滤所有的消息，以免检测到不必要的消息
  150   1          while (ap_get_message() != NULL)
  151   1          {
  152   2          };
  153   1          main_result = (uint16) ui_play();// =============> 进入界面
  154   1          stop_music_play(TRUE);
  155   1          write_poweroff_flag(0);
  156   1          if(mute_flag != 0)
  157   1          {
  158   2              mute_flag = 0;
  159   2              set_dac_volume(g_comval.volume);
  160   2          }
  161   1          // DisablePA();
  162   1          mic_on_flag = 0;
  163   1          //    deal_mic_msg();
  164   1          g_music_vars.cur_disk = CurUselocation.disk;
  165   1          if (CurUselocation.disk == disk_char[0])
  166   1          {
  167   2              memcpy(&g_music_vars.location[0], &CurUselocation, sizeof(file_location_t));
  168   2          }
  169   1          else
  170   1          {
  171   2              memcpy(&g_music_vars.location[1], &CurUselocation, sizeof(file_location_t));
  172   2          }
  173   1          if(main_result == RESULT_MUSIC_UPLAY)
  174   1          {
  175   2              main_result = RESULT_MAIN;
  176   2              g_music_vars.cur_disk = disk_char[0];
  177   2          }
  178   1          VMWrite(&g_music_vars, VM_AP_MUSIC_CARD, sizeof(music_vars_t));
  179   1          VMWrite(&g_comval, VM_SYSTEM, sizeof(g_comval));
  180   1          //    VMWrite(&g_alarm, VM_ALARM, sizeof(alarm_vars_t));
  181   1          return main_result;
  182   1      }
  183          
  184          /*
  185           ********************************************************************************
  186           *             void read_var(void)
  187           *
  188           * Description : 读系统变量和ap局部变量
  189           *
  190           * Arguments   : void
C251 COMPILER V4.55,  music_main                                                           23/05/16  10:41:52  PAGE 4   

  191           *
  192           * Returns     : void
  193           *
  194           * Notes       :
  195           *
  196           ********************************************************************************
  197           */
  198          void read_var(void)
  199          {
  200   1          int16 result;
  201   1          uint8 sfr_bak;
  202   1      
  203   1          sfr_bak = SFR_BANK;
  204   1          SFR_BANK = BANK_CMU_RMU;
  205   1          HOSC_CTL |= 0x06;
  206   1      
  207   1          SFR_BANK = 0x0c;
  208   1          g_power_flag = RTCRDM22;
  209   1          SFR_BANK = sfr_bak;
  210   1          //    VMRead(&g_alarm, VM_ALARM, sizeof(alarm_vars_t));
  211   1          result = read_ap_comval();
  212   1      
  213   1      }
  214          /*
  215           ********************************************************************************
  216           *             void read_var(void)
  217           *
  218           * Description : 读music应用系统变量
  219           *
  220           * Arguments   : void
  221           *
  222           * Returns     : void
  223           *
  224           * Notes       :
  225           *
  226           ********************************************************************************
  227           */
  228          
  229          void read_VM(void)
  230          {
  231   1          int16 result;
  232   1          result = VMRead(&g_music_vars, VM_AP_MUSIC_CARD, sizeof(g_music_vars));
  233   1          if (g_music_vars.magic != MAGIC_MUSIC)
  234   1          {
  235   2              memset(&g_music_vars, 0x0, sizeof(music_vars_t));
  236   2              g_music_vars.magic = MAGIC_MUSIC;
  237   2              g_music_vars.repeat_mode = FSEL_ALL_REPEATALL;
  238   2              g_music_vars.cur_disk = disk_char[0];
  239   2              g_music_vars.location[0].disk = disk_char[0];
  240   2              g_music_vars.location[1].disk = disk_char[1];
  241   2              strcpy(g_music_vars.location[0].path, FS_CD_ROOT);
  242   2              strcpy(g_music_vars.location[1].path, FS_CD_ROOT);
  243   2              VMWrite(&g_music_vars, VM_AP_MUSIC_CARD, sizeof(g_music_vars));
  244   2              ClearTimePara();
  245   2              write_poweroff_flag(0);
  246   2          }
  247   1          if (CurUselocation.disk == disk_char[0])
  248   1          {
  249   2              memcpy(&CurUselocation, &g_music_vars.location[0], sizeof(file_location_t));
  250   2              memcpy(&g_music_vars.BreakPTSave, &g_music_vars.BreakPoit[0], sizeof(breakPT_t));
  251   2          }
  252   1          else
  253   1          {
  254   2              memcpy(&CurUselocation, &g_music_vars.location[1], sizeof(file_location_t));
  255   2              memcpy(&g_music_vars.BreakPTSave, &g_music_vars.BreakPoit[1], sizeof(breakPT_t));
  256   2          }
C251 COMPILER V4.55,  music_main                                                           23/05/16  10:41:52  PAGE 5   

  257   1          g_music_vars.karaoke_flag = 0;
  258   1      
  259   1      }
  260          
  261          void OpenPA(void)
  262          {
  263   1          pa_t pa =
  264   1          { 0 };
  265   1      
  266   1          if (!g_PAOpenFlag)
  267   1          {
  268   2              g_PAOpenFlag = TRUE;//标志PA已打开
  269   2      
  270   2              pa.pa_in.dacin = 1;//默认
  271   2              pa.pa_in.micin = 1;
  272   2              pa.volume = g_comval.volume;
  273   2              pa.reserve[0] = g_comval.volume;
  274   2              EnablePA(&pa);
  275   2          }
  276   1          //openDAC();
  277   1      }
  278          void openDAC(void)
  279          {
  280   1          dac_t dacattr;
  281   1          dacattr.dacselect = 0;
  282   1          dacattr.rate = FS_44K1;//默认
  283   1          EnableDAC(&dacattr);
  284   1      }
  285          /*
  286           ********************************************************************************
  287           * Description : init GPIOC4(check mic in)as input
  288           *
  289           * Arguments   :
  290           *
  291           * Returns     :
  292           *
  293           * Notes       :
  294           *
  295           ********************************************************************************
  296           */
  297          
  298          void init_mic_in_gpio(void)
  299          {
  300   1          uint8 sfr_bak;
  301   1          sfr_bak = SFR_BANK;
  302   1          SFR_BANK = BANK_GPIO;
  303   1          MIC_IN_GPIO_OUTPUT &= ~ (1 << MIC_IN_GPIO_NUM);
  304   1          MIC_IN_GPIO_INPUT |=  (1 << MIC_IN_GPIO_NUM);
  305   1          SFR_BANK = sfr_bak;
  306   1          micin_status = 0;
  307   1          mic_on_flag = 0;
  308   1          //    check_plug_device_msg(&micin_status, MIC_IN);
  309   1      }
  310          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =    ------     ------
  ecode size           =       843     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       553     ------
  bit size             =    ------     ------
C251 COMPILER V4.55,  music_main                                                           23/05/16  10:41:52  PAGE 6   

  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       112     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
