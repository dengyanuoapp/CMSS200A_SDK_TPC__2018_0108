C251 COMPILER V4.55,  deal_EQTool_cmd                                                      23/05/16  10:41:58  PAGE 1   


C251 COMPILER V4.55, COMPILATION OF MODULE deal_EQTool_cmd
OBJECT MODULE PLACED IN .\Obj\deal_EQTool_cmd.obj
COMPILER INVOKED BY: C:\Keil\C251\BIN\C251.EXE ..\common\deal_EQTool_cmd.c XSMALL NOALIAS FUNCTIONS(REENTRANT) ROM(HUGE)
                    - OPTIMIZE(9,SPEED) BROWSE INCDIR(..\..\inc;..\..\..\psp_rel\inc) I4 DEBUG PRINT(.\Lst\deal_EQTool_cmd.lst) OBJECT(.\Obj\
                    -deal_EQTool_cmd.obj) 

stmt  level    source

    1          /*
    2           *******************************************************************************
    3           *                ACTOS AP
    4           *        ap common lib file, udisk use this file too
    5           *
    6           *        (c) Copyright, Actions Co,Ld.
    7           *             All Right Reserved
    8           *
    9           *  $Id: deal_EQTool_cmd.c,v 1.1.1.1 2006/05/22 03:23:59 selina Exp $
   10           *******************************************************************************
   11           */
   12          
   13          #include "eqtool.h"
   14          
   15          #pragma name(COM_EQTOOL)
   16          
   17          extern void volume_callback(uint16 Vol);
   18          
   19          void callback_pc_eq(EQ_Channel_e left_right, uint8 *buf, uint8 aptype)
   20          {
   21   1          if (buf == NULL)
   22   1          {
   23   2              //关闭EQ
   24   2              g_decControlInfor.EQFlag = 0x00;
   25   2              decEffectDeal();
   26   2          }
   27   1          else
   28   1          {
   29   2              if (left_right == Left_EQ)
   30   2              {
   31   3                  //left
   32   3                  g_decControlInfor.EQFlag = 0x67;
   33   3                  memcpy(g_decControlInfor.EQVal, (void *) buf, sizeof(g_decControlInfor.EQVal));
   34   3      
   35   3                  if (aptype == 0) //music ap
   36   3                  {
   37   4                      decEffectDeal();
   38   4                  }
   39   3                  else
   40   3                  {
   41   4                      if (AuCodecRun)
   42   4                      {
   43   5                          decEffectDeal();
   44   5                      }
   45   4                  }
   46   3              }
   47   2              else
   48   2              {
   49   3                  //right
   50   3                  g_decControlInfor.EQFlag = 0x87;
   51   3                  memcpy(g_decControlInfor.EQVal, (void *) buf, sizeof(g_decControlInfor.EQVal));
   52   3      
   53   3                  if (aptype == 0) //music ap
   54   3                  {
   55   4                      decEffectDeal();
   56   4                  }
   57   3                  else
C251 COMPILER V4.55,  deal_EQTool_cmd                                                      23/05/16  10:41:58  PAGE 2   

   58   3                  {
   59   4                      if (AuCodecRun)
   60   4                      {
   61   5                          decEffectDeal();
   62   5                      }
   63   4                  }
   64   3              }
   65   2          }
   66   1      }
   67          void deal_pc_eqsrs_sub(uint8 aptype)
   68          {
   69   1          uint8 eqcmd;
   70   1          uint8 *usbtestcmd_p;
   71   1          uint8 status;
   72   1      
   73   1          status = 0;
   74   1          usbtestcmd_p = (uint8 *) USBTESTABUFFER;
   75   1          eqcmd = *usbtestcmd_p;
   76   1      
   77   1          usbtestcmd_p++;
   78   1          *usbtestcmd_p = 1; //Status: not ready
   79   1      
   80   1          usbtestcmd_p++; // point to infor
   81   1          if (eqcmd == EQSET)
   82   1          {
   83   2              uint8 tmp[7];
   84   2              memcpy(tmp, usbtestcmd_p, 7);
   85   2              Set_Onechannel_EQ(tmp, 7, Left_EQ, aptype);
   86   2              usbtestcmd_p += 7;
   87   2              memcpy(tmp, usbtestcmd_p, 7);
   88   2              Set_Onechannel_EQ(tmp, 7, Right_EQ, aptype);
   89   2          }
   90   1          else if (eqcmd == VOLUMESET)
   91   1          {
   92   2      
   93   2              //add: 外挂PA音量设置
   94   2              usbtestcmd_p++;
   95   2              volume_callback(*usbtestcmd_p * 32 / 100);
   96   2              //}
   97   2          }
   98   1          else if (eqcmd == EQSAVE)
   99   1          {
  100   2              status = deal_eqsave_check(usbtestcmd_p);
  101   2          }
  102   1          else
  103   1          {
  104   2          }
  105   1      
  106   1          //处理完命令
  107   1          usbtestcmd_p = (uint8 *) USBTESTABUFFER;
  108   1          *usbtestcmd_p = 0x00; //清除cmd
  109   1          *(usbtestcmd_p + 1) = status;
  110   1      
  111   1          return;
  112   1      }
  113          
  114          bool check_allbuf0(uint8 *buf, uint8 len)
  115          {
  116   1          uint8 i;
  117   1      
  118   1          for (i = 0; i < len; i++)
  119   1          {
  120   2              if (buf[i] != 0)
  121   2              {
  122   3                  break;
  123   3              }
C251 COMPILER V4.55,  deal_EQTool_cmd                                                      23/05/16  10:41:58  PAGE 3   

  124   2          }
  125   1          if (i >= len)
  126   1          {
  127   2              return TRUE;
  128   2          }
  129   1          return FALSE;
  130   1      }
  131          
  132          void Set_Onechannel_EQ(uint8 *buf, uint8 len, EQ_Channel_e left_right, uint8 aptype)
  133          {
  134   1          bool isall0;
  135   1          isall0 = check_allbuf0(buf, len);
  136   1          if (isall0 == TRUE)
  137   1          {
  138   2              callback_pc_eq(left_right, NULL, aptype);
  139   2          }
  140   1          else
  141   1          {
  142   2              callback_pc_eq(left_right, buf, aptype);
  143   2          }
  144   1      }
  145          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =    ------     ------
  ecode size           =       454     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
