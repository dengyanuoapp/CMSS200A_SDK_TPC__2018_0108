C251 COMPILER V4.55,  uart_msg                                                             25/07/16  15:11:38  PAGE 1   


C251 COMPILER V4.55, COMPILATION OF MODULE uart_msg
OBJECT MODULE PLACED IN .\Obj\uart_msg.obj
COMPILER INVOKED BY: E:\Keil\C251\BIN\C251.EXE uart_msg.c XSMALL FUNCTIONS(REENTRANT) ROM(HUGE) OPTIMIZE(9,SPEED) BROWSE
                    - INCDIR(..\..\..\psp_rel\inc;..\..\inc) I4 DEBUG PRINT(.\Lst\uart_msg.lst) OBJECT(.\Obj\uart_msg.obj) 

stmt  level    source

    1          /********************************************************************************
    2           *                              AS260A
    3           *                            Module: USB Sound
    4           *                 Copyright(c) 2001-2012 Actions Semiconductor,
    5           *                            All Rights Reserved.
    6           *
    7           * History:
    8           *      <author>    <time>            <version >             <desc>
    9           *      dengtaiping 2012-10-23 16:40     1.0                build this file
   10           ********************************************************************************/
   11          /*!
   12           * \file     usound_init.c
   13           * \brief    .
   14           * \author   dengtaiping
   15           * \par      GENERAL DESCRIPTION:
   16           *               usb、AUDIO等模块初始化
   17           * \par      EXTERNALIZED FUNCTIONS:
   18           *               这里描述调用到外面的模块
   19           *
   20           *      Copyright(c) 2001-2012 Actions Semiconductor, All Rights Reserved.
   21           *
   22           * \version 1.0
   23           * \date  2012/10/23
   24           *******************************************************************************/
   25          #include "uart.h"
   26          
   27          
   28          #pragma name(UART_MSG)
   29          
   30          #define max_send_byte 2
   31          void uart_send_msg(uint8* msg_buf)
   32          {
   33   1              uint8 sfr_temp = SFR_BANK;
   34   1              SFR_BANK = BANK_UART;
   35   1          while((*msg_buf)!=0)
   36   1          {        
   37   2              while((UART_STA&(0x01<<6))!=0)
   38   2              {
   39   3                  
   40   3              }
   41   2              UART_TXDAT=*msg_buf;
   42   2              msg_buf++;
   43   2          }
   44   1              //UART_TXDAT = c;
   45   1              while (UART_STA & 0x08)
   46   1          {
   47   2              
   48   2          }   
   49   1              SFR_BANK = sfr_temp;
   50   1              return;
   51   1      }
   52          
   53          void uart_send_msg_hex(uint8* str,uint16 length)
   54          {
   55   1          uint16 i;
   56   1          uint8 dat, t1, t2;
   57   1          uint8 remain_read;
   58   1          uint8 sfr_temp = SFR_BANK;
C251 COMPILER V4.55,  uart_msg                                                             25/07/16  15:11:38  PAGE 2   

   59   1          SFR_BANK = BANK_UART;
   60   1          while((UART_STA&(0x01<<6))!=0)
   61   1          {   
   62   2          }
   63   1          if(data_read_buf,uart_fifo.putP >= max_send_byte)
   64   1          {
   65   2              remain_read = max_send_byte;  
   66   2              uart_fifo.putP = uart_fifo.putP - max_send_byte;
   67   2          }
   68   1          else
   69   1          {
   70   2              remain_read = uart_fifo.putP;
   71   2              uart_fifo.putP = 0;
   72   2          }
   73   1          uart_fifo.used += remain_read;
   74   1          for (i = 0; i < remain_read; i++)
   75   1          {
   76   2              dat = *(str + i);
   77   2              #if 0
                       t1 = dat & 0x0f;
                       t2 = (dat & (uint8)0xf0) >> 4;
                       if (t2 < 10)
                       {
                           UART_TXDAT=t2 + '0';
                       }
                       else
                       {
                           UART_TXDAT=t2 - 10 + 'a';
                       }
                       if (t1 < 10)
                       {
                           UART_TXDAT=t1 + '0';
                       }
                       else
                       {
                           UART_TXDAT=t1 - 10 + 'a';
                       }
                       #else
   97   2              UART_TXDAT=dat;
   98   2              #endif
   99   2          }
  100   1          UART_DRQ |= 0x08;
  101   1              SFR_BANK = sfr_temp;
  102   1      }
*** WARNING C47 IN LINE 53 OF UART_MSG.C: 'length': unreferenced parameter
*** WARNING C47 IN LINE 56 OF UART_MSG.C: 't1': unreferenced local variable
*** WARNING C47 IN LINE 56 OF UART_MSG.C: 't2': unreferenced local variable
  103          
  104          
  105          void send_last_uart_msg(void)
  106          {
  107   1              uint8 sfr_temp = SFR_BANK;
  108   1      
  109   1          SFR_BANK = BANK_UART;
  110   1          UART_DRQ |= 0x0a;
  111   1              UART_CTL &=~(1<<6);
  112   1          UART_STA |=1<<1;
  113   1              SFR_BANK = sfr_temp;
  114   1              get_uart_data(8);
  115   1          uart_fifo.time_count=0;
  116   1          uart_fifo.flags=2;
  117   1      }
  118          void uart_timer_count(void)
  119          {
  120   1              uint8 sfr_temp = SFR_BANK;
  121   1              TM_KillTimer(uart_timer_id);
C251 COMPILER V4.55,  uart_msg                                                             25/07/16  15:11:38  PAGE 3   

  122   1          SFR_BANK = BANK_UART;
  123   1              UART_DRQ |= 0x0a;
  124   1              SFR_BANK = sfr_temp;
  125   1      }
  126          
  127          
  128          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =    ------     ------
  ecode size           =       183     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  3 WARNING(S),  0 ERROR(S)
