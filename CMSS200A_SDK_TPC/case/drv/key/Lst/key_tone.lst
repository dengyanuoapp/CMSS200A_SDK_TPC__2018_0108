C251 COMPILER V4.55,  key_tone                                                             13/12/18  16:28:33  PAGE 1   


C251 COMPILER V4.55, COMPILATION OF MODULE key_tone
OBJECT MODULE PLACED IN .\Obj\key_tone.obj
COMPILER INVOKED BY: C:\Keil\C251\BIN\C251.EXE key_tone.c XSMALL FUNCTIONS(REENTRANT) ROM(HUGE) OPTIMIZE(9,SPEED) BROWSE
                    - INCDIR(..\..\..\psp_rel\inc;..\..\inc) I4 DEBUG PRINT(.\Lst\key_tone.lst) OBJECT(.\Obj\key_tone.obj) 

stmt  level    source

    1          #include "actos.h"
    2          #include "irq.h"
    3          #include "key.h"
    4          
    5          #define MAX_KEY_TONE_TIME 100
    6          #pragma name(BAC_KT)
    7          const uint8 Tonedate[2][2] = {0x26, 0x40, 0xda, 0xbf};
    8          //const uint8 Tonedate[2][2] = {0x7F, 0x7F, 0x7F, 0x7F};
    9          const uint8 Fout_44K_256fs[8] = {0, 0, 44, 0, 22, 0, 11, 0}; //i2S输出时是256fs
   10          const uint8 Fout_48K_256fs[8] = {96, 0, 48, 32, 24, 16, 12, 8};
   11          const uint8 Fout_44K_512fs[8] = {44, 0, 22, 0, 11, 0, 0, 0}; //i2s加ADC或只有ADC输出时是512fs
   12          const uint8 Fout_48K_512fs[8] = {48, 32, 24, 16, 12, 8, 0, 0};
   13          
   14          void Delay10ms(void); //24Mhz，延时500ms
   15          extern void _nop_(void);
   16          void ADC_DAC_loop(void);
   17          /*
   18           **************************************************************
   19           *  void sKY_Beep(char value)           output BeepTone                 *
   20           **************************************************************
   21           */
   22          bool sKY_Beep(uint8 api_no, uint8 value)
   23          {
   24   1          api_no = api_no;
   25   1      #if 0
                   if(value == 1)
                   {
                       switch_blue_light(1);
                       switch_red_light(0);
                   }
                   else
                   {
                       switch_blue_light(0);
                       switch_red_light(1);
                   }
               #endif
   37   1          value = value;
   38   1          //romDI();
   39   1          ADC_DAC_loop();
   40   1          //romEI();
   41   1          return TRUE;
   42   1      }
   43          void config_sr_fine_tune(uint8 value)
   44          {
   45   1          uint8 SFR_BANK_bak;
   46   1          uint8 i;
   47   1          SFR_BANK_bak = SFR_BANK;
   48   1          SFR_BANK = BANK_CMU_RMU;
   49   1          // reset asrc module
   50   1          MRCR3_ASRCReset = 0;
   51   1          // enable asrc module clock
   52   1          CLKENCTL2_ASRCCLKEN = 1;
   53   1          // select asrc clock source
   54   1          ADC_DAC_CLK_CTL_ASRCCLKSEL = 1;
   55   1          // set fir_rds_ram clk
   56   1          MEMCLKENCTL0_FIR_RDS_RAMClkEn = 1;
   57   1          // select fir_rds_ram as cpu clock
   58   1          MEMCLKSELCTL1 &= (~0xc);
C251 COMPILER V4.55,  key_tone                                                             13/12/18  16:28:33  PAGE 2   

   59   1      
   60   1          for (i = 0; i < 0xC0; i++) //fir_rds_ram_l
   61   1          {
   62   2              *((uint8 *) (0x9640 + i)) = 0;
   63   2              *((uint8 *) (0x9740 + i)) = 0;
   64   2          }
   65   1          // select fir_rds_ram as asrc clock
   66   1          MEMCLKSELCTL1 = (MEMCLKSELCTL1 & (~0xc)) | 0x4;
   67   1          SFR_BANK = 0x13;
   68   1          // disable DAC Channel 0 SR Fine Tune
   69   1          DAC_CH0_SRFT_CTL0 = 0;
   70   1      
   71   1          DAC_CH0_SR_CTL = (DAC_CH0_SR_CTL & 0xf8);
   72   1      
   73   1          DAC_CH0_SR_CTL = value;
   74   1      
   75   1          SFR_BANK = BANK_CMU_RMU;
   76   1          // enable asrc module
   77   1          MRCR3_ASRCReset = 1;
   78   1          SFR_BANK = SFR_BANK_bak;
   79   1      }
   80          void ADC_DAC_loop(void)
   81          {
   82   1          uint16 i, j, k;
   83   1          uint8 sfr_temp = SFR_BANK;
   84   1          uint8 temp, tonedata1, tonedata2;
   85   1          //    uint8 ADCSR;
   86   1          uint8 cur_samplerate, data_length;
   87   1              uint16 data_length1;
   88   1      #if 0
                   SFR_BANK = BANK_CMU_RMU;
               
                           {
                               goto exit;
                               //直接退出
                           }
                       }
                       //200ms延迟后，仍等不到kt finish，直接退出
                       break; //退出
                   }
               
               exit:
                   SetPAVolume(paVolBak);
                   SFR_BANK = sfr_bak;
               #endif
  104   1          SFR_BANK = BANK_DAC_ADC;
  105   1          DAC_CH1_FIFO_CTL0 |= 0x20;
  106   1          DAC_CH0_FIFO_CTL0 |= 0x20;
  107   1          DAC_CH0_FIFO_CTL0 &= 0xF1;
  108   1          DAC_CH0_FIFO_CTL0 |= 0x01;
  109   1          DAC_CTL |= 0x11;
  110   1          //    config_sr_fine_tune(srcnum);
  111   1          SFR_BANK = BANK_CMU_RMU;
  112   1          cur_samplerate = AUDIO_PLL_CTL & 0x0e;
  113   1          temp = (ADC_DAC_CLK_CTL & 0x07);
  114   1          //  ADCSR=ADC_DAC_CLK_CTL & 0x70;
  115   1      
  116   1          if(cur_samplerate <= 0x06) //44.1k
  117   1          {
  118   2      
  119   2              //         data_length=44;//14;//22;//14;
  120   2              data_length = Fout_44K_512fs[0];
  121   2              data_length1 = 32*MAX_KEY_TONE_TIME;
  122   2          }
  123   1          else                        //48k
  124   1          {
C251 COMPILER V4.55,  key_tone                                                             13/12/18  16:28:33  PAGE 3   

  125   2              //         data_length=44;//16;//24;//16;
  126   2              data_length = Fout_48K_512fs[0];
  127   2              data_length1 = 32*MAX_KEY_TONE_TIME;
  128   2          }
  129   1          SFR_BANK = BANK_DAC_ADC;
  130   1          for(j = 0; j < data_length1; j++)
  131   1          {
  132   2              k = 0;
  133   2              for (i = 0; i < data_length; i++)
  134   2              {
  135   3                  if(i >= (data_length / 2))
  136   3                  {
  137   4                      k = 1;
  138   4                  }
  139   3                  tonedata1 = Tonedate[k][0];
  140   3                  tonedata2 = Tonedate[k][1];
  141   3                  while ((DAC_CH0_FIFO_CTL1 & 0x08) == 0x08)
  142   3                  {
  143   4                      ;
  144   4                  }
  145   3                  //左声道
  146   3                  DAC_CH0_PCML = 0x00;
  147   3                  DAC_CH0_PCMM = tonedata1;
  148   3                  DAC_CH0_PCMH = tonedata2;
  149   3                  while ((DAC_CH0_FIFO_CTL1 & 0x08) == 0x08)
  150   3                  {
  151   4                      ;
  152   4                  }
  153   3                  //右声道
  154   3                  DAC_CH0_PCML = 0x00;
  155   3                  DAC_CH0_PCMM = tonedata1;
  156   3                  DAC_CH0_PCMH = tonedata2;
  157   3              }
  158   2                      ClearWatchDog();
  159   2          }
  160   1      #if 1
  161   1          for (i = 0; i < data_length * 12; i++)
  162   1          {
  163   2              i++;
  164   2              while ((DAC_CH0_FIFO_CTL1 & 0x08) == 0x08)
  165   2              {
  166   3      
  167   3                  ;//ClearWatchDog();
  168   3              }
  169   2              DAC_CH0_PCML = 0x00;
  170   2              DAC_CH0_PCMM = 0;
  171   2      
  172   2              DAC_CH0_PCMH = 0;
  173   2      
  174   2              while ((DAC_CH0_FIFO_CTL1 & 0x08) == 0x08)
  175   2              {
  176   3                  ;//ClearWatchDog();
  177   3              }
  178   2              DAC_CH0_PCML = 0x00;
  179   2              DAC_CH0_PCMM = 0;
  180   2      
  181   2              DAC_CH0_PCMH = 0;
  182   2          }
  183   1      #endif
  184   1          SFR_BANK = BANK_DAC_ADC;
  185   1          DAC_CTL &= 0xEF;
  186   1          DAC_CH0_FIFO_CTL0 &= 0xFE;
  187   1          DAC_CH0_FIFO_CTL0 |= 0x20;
  188   1          SFR_BANK = BANK_CMU_RMU;
  189   1          // reset asrc module
  190   1          MRCR3_ASRCReset = 0;
C251 COMPILER V4.55,  key_tone                                                             13/12/18  16:28:33  PAGE 4   

  191   1          SFR_BANK = sfr_temp;
  192   1      }
  193          
  194          void Delay10ms(void)
  195          {
  196   1          uint8 i, j;
  197   1          for (i = 0; i < 255; i++)
  198   1          {
  199   2              for (j = 0; j < 255; j++)
  200   2              {
  201   3                  _nop_();
  202   3                  _nop_();
  203   3              }
  204   2          }
  205   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =    ------     ------
  ecode size           =       416     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        36     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
