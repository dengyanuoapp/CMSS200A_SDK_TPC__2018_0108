C251 COMPILER V4.55,  key_IR                                                               13/12/18  16:28:33  PAGE 1   


C251 COMPILER V4.55, COMPILATION OF MODULE key_IR
OBJECT MODULE PLACED IN .\Obj\key_IR.obj
COMPILER INVOKED BY: C:\Keil\C251\BIN\C251.EXE key_IR.c XSMALL FUNCTIONS(REENTRANT) ROM(HUGE) OPTIMIZE(9,SPEED) BROWSE I
                    -NCDIR(..\..\..\psp_rel\inc;..\..\inc) I4 DEBUG PRINT(.\Lst\key_IR.lst) OBJECT(.\Obj\key_IR.obj) 

stmt  level    source

    1          #include "drv_key.h"
    2          
    3          #pragma name(KY_IR)
    4          
    5          extern uint8 oldkey;
    6          extern uint8 IR_KEY;
    7          extern uint8 tmp_count;
    8          
    9          #define key_260c
   10          
   11          #ifdef key_260c
   12          #define    MAX_KEY_NUM    36
   13          uint8 const IrcKeyValueTab_0x00bf[MAX_KEY_NUM] =
   14          {
   15              0x0d, /*0x1c, 0x1b, 0x4d, 0x4f, 0x12,0x1f,*/ 0x56,
   16              0x13, 0x58, 0x4e, 0x59, 0x5a, 0x57, 0x5e, /*0x52, */
   17              /* 0x53, 0x54, 0x55,*/0x14, 0x16, 0x5c, 0x19, 0x15,
   18              0x18, 0x0e, 0x17, /*0x1e, */0x44, 0x11, 0x4a, 0x43,
   19              0x10, 0x4b, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06,
   20              0x07, 0x08, 0x09, 0x0c, 0x00, 0x0b/*, 0x0f, 0x1a, */
   21              /*0x48, 0x1d, 0x49, 0x4c , 0x5d*/
   22          };
   23          uint8 const IrcKeyMsgTab_0x00bf[MAX_KEY_NUM] =
   24          {
   25              Msg_KeyPower, /*Msg_KeyNull,Msg_KeyNull, Msg_KeyNull, Msg_KeyNull, Msg_KeyNull, Msg_KeyNull,*/Msg_Key
             -ChanSub,
   26              Msg_KeyUSBTest, Msg_KeyFolderSub, Msg_KeyPlayPause, Msg_KeyFolderAdd, Msg_KeyMicIn, Msg_KeyChanAdd, M
             -sg_KeyREC, /*Msg_KeyPa0_1VolAdd,*/
   27              /*Msg_KeyPa0_1VolSub, Msg_KeyPaBassAdd, Msg_KeyPaBassSub, */Msg_KeyClock, Msg_KeyLast, Msg_KeyVol, Ms
             -g_KeyVolSub, Msg_KeyMenu,
   28              Msg_KeyVolAdd, Msg_KeyMute, Msg_KeyNext, /*Msg_KeyMute, */Msg_KeyVolSub, Msg_KeyCaraOk, Msg_KeyLast, 
             -Msg_KeyVolAdd,
   29              Msg_KeyEQ, Msg_KeyNext, Msg_KeyNum1, Msg_KeyNum2, Msg_KeyNum3, Msg_KeyNum4,  Msg_KeyNum5, Msg_KeyNum6
             -,
   30              Msg_KeyNum7, Msg_KeyNum8, Msg_KeyNum9, Msg_KeyLoop, Msg_KeyNum0, Msg_Keyautosleep /*, Msg_KeyBassAdd,
             - Msg_KeyMidAdd,*/
   31              /*Msg_KeyTrebAdd, Msg_KeyBassSub, Msg_KeyMidSub, Msg_KeyTrebSub ,Msg_KeyNull*/
   32          };
   33          #else
               #define    MAX_KEY_NUM    21
               uint8 const IrcKeyValueTab_0x00bf[MAX_KEY_NUM] =
               {
                   0x00, 0x01, 0x02, 0x04, 0x05, 0x06, 0x08, 0x09, 0x0a, 0x0c, 0x0d, 0x0e, 0x10, 0x11, 0x12, 0x14, 0x15,
             - 0x16, 0x18,
                   0x19, 0x1a
               };
               uint8 const IrcKeyMsgTab_0x00bf[MAX_KEY_NUM] =
               {
                   Msg_KeyClock, Msg_KeyMenu, Msg_KeyPlayPause, Msg_KeyLoop, Msg_KeyFolderSub, Msg_KeyFolderAdd, Msg_Key
             -EQ,
                   Msg_KeyVolSub, Msg_KeyVolAdd, Msg_KeyNum0, Msg_KeyLast, Msg_KeyNext, Msg_KeyNum1, Msg_KeyNum2, Msg_Ke
             -yNum3,
                   Msg_KeyNum4, Msg_KeyNum5, Msg_KeyNum6, Msg_KeyNum7, Msg_KeyNum8, Msg_KeyNum9
               };
               #endif
   47          #if 0
               uint8 const IrcKeyValueTab_0x00ff[MAX_KEY_NUM] =
               {
C251 COMPILER V4.55,  key_IR                                                               13/12/18  16:28:33  PAGE 2   

                   0x45, 0x46, 0x47, 0x44, 0x40, 0x43, 0x07, 0x15, 0x09, 0x16, 0x19, 0x0d, 0x0c, 0x18, 0x5e, 0x08, 0x1c,
             - 0x5a, 0x42,
                   0x52, 0x4a
               };
               uint8 const IrcKeyMsgTab_0x00ff[MAX_KEY_NUM] =
               {
                   Msg_KeyPower, Msg_KeyMenu, Msg_KeyMute, Msg_KeyPlayPause, Msg_KeyLast, Msg_KeyNext, Msg_KeyEQ, Msg_Ke
             -yVolSub,
                   Msg_KeyVolAdd, Msg_KeyNum0, Msg_KeyLoop, Msg_KeyClock, Msg_KeyNum1, Msg_KeyNum2, Msg_KeyNum3, Msg_Key
             -Num4,
                   Msg_KeyNum5, Msg_KeyNum6, Msg_KeyNum7, Msg_KeyNum8, Msg_KeyNum9
               };
               
               uint8 const IrcKeyValueTab_0x807f[MAX_KEY_NUM] =
               {
                   0x12, 0x1a, 0x1e, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x1b, 0x1f, 0x0c, 0x0d,
             - 0x0e, 0x00,
                   0x0f, 0x19
               };
               uint8 const IrcKeyMsgTab_0x807f[MAX_KEY_NUM] =
               {
                   Msg_KeyPower, Msg_KeyMenu, Msg_KeyMute, Msg_KeyPlayPause, Msg_KeyLast, Msg_KeyNext, Msg_KeyEQ, Msg_Ke
             -yVolSub,
                   Msg_KeyVolAdd, Msg_KeyNum0, Msg_KeyFolderSub, Msg_KeyFolderAdd, Msg_KeyNum1, Msg_KeyNum2, Msg_KeyNum3
             -,
                   Msg_KeyNum4, Msg_KeyNum5, Msg_KeyNum6, Msg_KeyNum7, Msg_KeyNum8, Msg_KeyNum9
               };
               #endif
   72          void IR_Interrupt(void)
   73          {
   74   1          uint8 i;
   75   1          uint8 key_data;
   76   1          uint8 sfr_bak = SFR_BANK;
   77   1          uint8 *keyval, *keymsg;
   78   1          uint8 tmp_ir_sta;
   79   1          SFR_BANK = BANK_IR;
   80   1          tmp_ir_sta = IR_STA;
   81   1          IR_STA |= 0x08; //clear irq pending
   82   1          key_data = IR_KDC; //read key data value
   83   1          //接受到错误的按键码
   84   1          if ((tmp_ir_sta & 0x02) != 0)
   85   1          {
   86   2              IR_STA |= 0x0B;//clear error msg,clear irq pending
   87   2              SFR_BANK = sfr_bak;
   88   2              return;
   89   2          }
   90   1          //接受到重复码时，直接用旧码值
   91   1          if ((tmp_ir_sta & 0x01) != 0)
   92   1          {
   93   2              //        IR_STA |= 0x09;          //clear repeat flag,clear irq pending
   94   2              tmp_count = 0;
   95   2              IR_KEY = 1;
   96   2              PutSysMsg(oldkey);
   97   2              SFR_BANK = sfr_bak;
   98   2              return;
   99   2          }
  100   1      #if 0
                   if (IR_HUC == 0xff)
                   {
                       keyval = (uint8 *) IrcKeyValueTab_0x00ff;
                       keymsg = (uint8 *) IrcKeyMsgTab_0x00ff;
                   }
                   else if (IR_HUC == 0x7f)
                   {
                       keyval = (uint8 *) IrcKeyValueTab_0x807f;
                       keymsg = (uint8 *) IrcKeyMsgTab_0x807f;
C251 COMPILER V4.55,  key_IR                                                               13/12/18  16:28:33  PAGE 3   

                   }
                   else
                   {
                       keyval = (uint8 *) IrcKeyValueTab_0x00bf;
                       keymsg = (uint8 *) IrcKeyMsgTab_0x00bf;
                       //        max_keynum = 36;
                   }
               #else
  118   1          keyval = (uint8 *) IrcKeyValueTab_0x00bf;
  119   1          keymsg = (uint8 *) IrcKeyMsgTab_0x00bf;
  120   1      #endif
  121   1          for (i = 0; i < MAX_KEY_NUM; i++)
  122   1          {
  123   2              if (keyval[i] == key_data)
  124   2              {
  125   3                  oldkey = keymsg[i];
  126   3                  IR_KEY = 1;
  127   3                  PutSysMsg(oldkey);
  128   3                  break;
  129   3              }
  130   2          }
  131   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =    ------     ------
  ecode size           =       124     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        72     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
