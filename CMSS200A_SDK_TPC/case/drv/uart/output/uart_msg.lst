C251 COMPILER V4.55,  uart_msg                                                             13/12/18  16:28:36  PAGE 1   


C251 COMPILER V4.55, COMPILATION OF MODULE uart_msg
OBJECT MODULE PLACED IN .\output\uart_msg.obj
COMPILER INVOKED BY: C:\Keil\C251\BIN\C251.EXE uart_msg.c XSMALL FUNCTIONS(REENTRANT) ROM(HUGE) BROWSE INCDIR(..\..\..\p
                    -sp_rel\inc;..\..\inc) I4 DEBUG PRINT(.\output\uart_msg.lst) OBJECT(.\output\uart_msg.obj) 

stmt  level    source

    1          /********************************************************************************
    2           *                              AS260A
    3           *                            Module: USB Sound
    4           *                 Copyright(c) 2001-2012 Actions Semiconductor,
    5           *                            All Rights Reserved.
    6           *
    7           * History:
    8           *      <author>    <time>            <version >             <desc>
    9           *      dengtaiping 2012-10-23 16:40     1.0                build this file
   10           ********************************************************************************/
   11          /*!
   12           * \file     usound_init.c
   13           * \brief    .
   14           * \author   dengtaiping
   15           * \par      GENERAL DESCRIPTION:
   16           *               usb、AUDIO等模块初始化
   17           * \par      EXTERNALIZED FUNCTIONS:
   18           *               这里描述调用到外面的模块
   19           *
   20           *      Copyright(c) 2001-2012 Actions Semiconductor, All Rights Reserved.
   21           *
   22           * \version 1.0
   23           * \date  2012/10/23
   24           *******************************************************************************/
   25          #include "uart.h"
   26          
   27          #pragma name(UART_MSG)
   28          #define max_send_byte 2
   29          
   30          const uint8 uart_start_block[8] = 
   31                  {0xFF, 0x55, 0x04, 0x00, 0x38, 0x03, 0xE9, 0xD8};
   32          
   33          void uart_send_msg(uint8* msg_buf)
   34          {
   35   1              uint8 sfr_temp = SFR_BANK;
   36   1              SFR_BANK = BANK_UART;
   37   1          while((*msg_buf)!=0)
   38   1          {        
   39   2              while((UART_STA&(0x01<<6))!=0)
   40   2              {
   41   3                  
   42   3              }
   43   2              UART_TXDAT=*msg_buf;
   44   2              msg_buf++;
   45   2          }
   46   1              //UART_TXDAT = c;
   47   1              while (UART_STA & 0x08)
   48   1          {   // wait uart idle
   49   2              ;
   50   2          }   
   51   1              SFR_BANK = sfr_temp;
   52   1              return;
   53   1      }
   54          
   55          void uart_send_msg_hex(uint8* str)
   56          {
   57   1          uint16 i;
   58   1          uint8 dat;
C251 COMPILER V4.55,  uart_msg                                                             13/12/18  16:28:36  PAGE 2   

   59   1          uint8 remain_read;
   60   1          uint8 sfr_temp = SFR_BANK;
   61   1          SFR_BANK = BANK_UART;
   62   1          while((UART_STA&(0x01<<6))!=0)
   63   1          {   
   64   2          }
   65   1          if(uart_fifo.putP >= max_send_byte)
   66   1          {
   67   2              remain_read = max_send_byte;  
   68   2              uart_fifo.putP = uart_fifo.putP - max_send_byte;
   69   2          }
   70   1          else
   71   1          {
   72   2              remain_read = uart_fifo.putP;
   73   2              uart_fifo.putP = 0;
   74   2          }
   75   1          uart_fifo.used += remain_read;
   76   1          for (i = 0; i < remain_read; i++)
   77   1          {
   78   2              dat = *(str + i);
   79   2              UART_TXDAT = dat;
   80   2          }
   81   1          UART_DRQ |= 0x08;   // enable tx irq
   82   1              SFR_BANK = sfr_temp;
   83   1      }
   84          
   85          void send_first_msg(void)
   86          {
   87   1              uint8 sfr_bak = SFR_BANK;
   88   1              uint8 i;
   89   1              SFR_BANK = BANK_UART;                   
   90   1              while((UART_STA&(0x01<<6)) != 0)
   91   1              {       // wait until TX FIFO is not full.                        
   92   2                      ;
   93   2              }
   94   1              
   95   1              UART_TXDAT = 0xFF;      // trans the 1st uart data.     
   96   1              while (UART_STA & 0x08) 
   97   1              {       // wait uart idle                       
   98   2                      ;
   99   2              }               
  100   1              
  101   1              TM_DelayMS(20);
  102   1              for (i=0; i<8; i++)
  103   1              {
  104   2                      UART_TXDAT = uart_start_block[i];
  105   2              }       
  106   1              while (UART_STA & 0x08) 
  107   1              {       //wait uart idle
  108   2                      ;
  109   2              }
  110   1              
  111   1              SFR_BANK = sfr_bak;
  112   1      }
  113          
  114          void uart_timer_count(void)
  115          {
  116   1              uint8 sfr_temp = SFR_BANK;
  117   1              TM_KillTimer(uart_timer_id);
  118   1          SFR_BANK = BANK_UART;
  119   1              UART_DRQ |= 0x0a;       // enable TX IRQ
  120   1              SFR_BANK = sfr_temp;
  121   1      }
  122          
  123          void uart_charge_count(void)
  124          {
C251 COMPILER V4.55,  uart_msg                                                             13/12/18  16:28:36  PAGE 3   

  125   1              uint8 sfr_temp = SFR_BANK;
  126   1              TM_KillTimer(uart_timer_id);
  127   1          SFR_BANK = BANK_UART;
  128   1              UART_CTL |= 1<<6;       // enable RX
  129   1              SFR_BANK = sfr_temp;
  130   1      }
  131          
  132          void delay_timer_count(void)
  133          {
  134   1              uint8 sfr_temp = SFR_BANK;
  135   1              TM_KillTimer(delay_timer_id);
  136   1          SFR_BANK = BANK_UART;
  137   1              UART_CTL |= 1<<6;       // enable RX
  138   1              SFR_BANK = sfr_temp;
  139   1      }
  140          
  141          void deal_send_msg(void)
  142          {
  143   1              uint8 sfr_temp = SFR_BANK;
  144   1              
  145   1              SFR_BANK = BANK_UART;
  146   1              while (UART_STA & 0x08)
  147   1          {   // wait uart idle
  148   2              ;
  149   2          }
  150   1          UART_DRQ &= ~(1<<1);        // not TX IRQ pending
  151   1              
  152   1          /* transmit not completed */
  153   1          if(uart_fifo.putP!=0)
  154   1          {
  155   2              UART_DRQ &= 0xF7;       // disable TX IRQ
  156   2              uart_send_msg_hex(data_read_buf + uart_fifo.used);
  157   2          }
  158   1          else
  159   1          {   // transform finished.
  160   2                      if(trans_last_data_flag == TRUE)
  161   2                      {
  162   3                              trans_last_data_flag = FALSE;                   
  163   3                              SFR_BANK = BANK_UART;
  164   3                              UART_DRQ &= 0xF3;       // disable TX IRQ & RX IRQ
  165   3                              UART_CTL &=~(1<<6);     // disable RX
  166   3                              UART_STA |= 1<<1;       // reset the RX FIFO
  167   3                              SFR_BANK = sfr_temp;
  168   3      
  169   3                              get_uart_data(uart_fifo.rx_count);
  170   3                              uart_timer_id = TM_SetTimer((uint32) uart_timer_count, uart_data->time_delay);
  171   3                              uart_fifo.rx_count = 0xff;
  172   3                              uart_fifo.flags = 2;
  173   3                              return;
  174   3                      }
  175   2      
  176   2              if(uart_fifo.rx_count != 0xff)
  177   2              {
  178   3                      UART_CTL |= 1<<6;       // enable RX
  179   3              }           
  180   2              uart_fifo.flags = 0;
  181   2              uart_fifo.used = 0;
  182   2              uart_fifo.time_count = 0;
  183   2              UART_DRQ &= 0xF7;       // disable TX IRQ
  184   2          }
  185   1              SFR_BANK = sfr_temp;
  186   1      }
  187          


Module Information          Static   Overlayable
------------------------------------------------
C251 COMPILER V4.55,  uart_msg                                                             13/12/18  16:28:36  PAGE 4   

  code size            =    ------     ------
  ecode size           =       433     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =         8     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
