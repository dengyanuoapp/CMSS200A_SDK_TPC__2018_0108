C251 COMPILER V4.55,  uart_rcode                                                           13/12/18  16:28:37  PAGE 1   


C251 COMPILER V4.55, COMPILATION OF MODULE uart_rcode
OBJECT MODULE PLACED IN .\output\uart_rcode.obj
COMPILER INVOKED BY: C:\Keil\C251\BIN\C251.EXE uart_rcode.c XSMALL FUNCTIONS(REENTRANT) ROM(HUGE) BROWSE INCDIR(..\..\..
                    -\psp_rel\inc;..\..\inc) I4 DEBUG PRINT(.\output\uart_rcode.lst) OBJECT(.\output\uart_rcode.obj) 

stmt  level    source

    1          /********************************************************************************
    2           *                              AS260A
    3           *                            Module: USB Sound
    4           *                 Copyright(c) 2001-2012 Actions Semiconductor,
    5           *                            All Rights Reserved.
    6           *
    7           * History:
    8           *      <author>    <time>            <version >             <desc>
    9           *      dengtaiping 2012-10-23 16:40     1.0                build this file
   10           ********************************************************************************/
   11          /*!
   12           * \file     usound_init.c
   13           * \brief    .
   14           * \author   dengtaiping
   15           * \par      GENERAL DESCRIPTION:
   16           *               usb、AUDIO等模块初始化
   17           * \par      EXTERNALIZED FUNCTIONS:
   18           *               这里描述调用到外面的模块
   19           *
   20           *      Copyright(c) 2001-2012 Actions Semiconductor, All Rights Reserved.
   21           *
   22           * \version 1.0
   23           * \date  2012/10/23
   24           *******************************************************************************/
   25          #include "uart.h"
   26          
   27          #pragma name(UART_RCODE)
   28          //const uint8 charge_command[]={0xFF,0x55,0x05,0x06,0x04};
   29          const uint8 two_stage_command[]={0xFF,0x55,0x04,0x00,0x14};
   30          
   31          void uart_isr(void)
   32          {
   33   1              uint8 sfr_temp = SFR_BANK;
   34   1              uint8 need_clr;   
   35   1      
   36   1          SFR_BANK = BANK_UART;
   37   1          if(uart_fifo.flags == 2)
   38   1          {
   39   2                      deal_send_msg();
   40   2              return;        
   41   2          }
   42   1       
   43   1              need_clr = FALSE;
   44   1              
   45   1              drop_flag = FALSE;
   46   1          while ((UART_STA & 0x20) == 0)
   47   1              {       // RX fifo not empty.
   48   2                      uart_fifo.buf[tmp_count] = UART_RXDAT;
   49   2                      need_clr = TRUE;      
   50   2                      
   51   2                      if((trans_1st_finish_flag==TRUE) && (trans_2nd_start_flag==FALSE))
   52   2                      {
   53   3                              /* compare whether or not the 2nd stage 1st command */
   54   3                              if(uart_fifo.buf[tmp_count] != two_stage_command[tmp_count])
   55   3                              {        
   56   4                                      drop_flag = TRUE;
   57   4                                      tmp_count = 5;
   58   4                                      break;
C251 COMPILER V4.55,  uart_rcode                                                           13/12/18  16:28:37  PAGE 2   

   59   4                              }
   60   3                              else
   61   3                              {
   62   4                                      drop_flag = FALSE;
   63   4                              }                               
   64   3      
   65   3                              tmp_count++;
   66   3                              if(tmp_count >= 5)
   67   3                      {       // compare 5 bytes.
   68   4                              if(drop_flag == FALSE)
   69   4                              {
   70   5                                      trans_2nd_start_flag = TRUE;
   71   5                              }
   72   4                          break;
   73   4                      }
   74   3                      }
   75   2                      else
   76   2                      {
   77   3                              drop_flag = FALSE;
   78   3                              tmp_count = 5;
   79   3                              break;
   80   3                      }                                                                                     
   81   2              } 
   82   1              
   83   1              if(need_clr == TRUE)
   84   1              {
   85   2                      if((trans_1st_finish_flag==TRUE) && (tmp_count<5))
   86   2                      {       // not recieve enough RX data.
   87   3                              SFR_BANK = sfr_temp; 
   88   3                              return;
   89   3                      }
   90   2                      UART_CTL &= ~(1<<6);    // disable RX
   91   2                  UART_STA |= 1<<1;           // reset the RX FIFO
   92   2                  while ((UART_STA & 0x20) == 0)
   93   2                  {   // RX fifo not empty.                                                      
   94   3                      ;
   95   3                  }   
   96   2      
   97   2                      if((drop_flag==TRUE) && (tmp_count>=5))
   98   2                      {       // not transmit TX data.
   99   3                              UART_DRQ &= 0xF7;       // disable TX IRQ
  100   3                      UART_DRQ |= 0x01;       // clear RX IRQ pending bit     
  101   3                              memset(uart_fifo.buf, 0x0, 6);
  102   3                              uart_fifo.flags = 0;
  103   3                              tmp_count = 0;
  104   3                              uart_timer_id = TM_SetTimer((uint32) uart_charge_count, 10);
  105   3                              SFR_BANK = sfr_temp; 
  106   3                              return;
  107   3                      }
  108   2                      uart_fifo.flags = 1;
  109   2              }       
  110   1              SFR_BANK = sfr_temp; 
  111   1              
  112   1          if(uart_fifo.flags == 1)
  113   1          {
  114   2                      tmp_count = 0;
  115   2                      drop_flag = FALSE;
  116   2                      if ((uart_fifo.rx_count==SKIP_COUNT_NUM) && (trans_1st_finish_flag==FALSE))
  117   2                      {
  118   3                              SFR_BANK = BANK_UART;
  119   3                              UART_DRQ &= 0xF7;       // disable TX IRQ
  120   3                      UART_DRQ |= 0x01;       // clear RX IRQ pending bit
  121   3                      SFR_BANK = sfr_temp; 
  122   3                              trans_1st_finish_flag = TRUE;
  123   3                              uart_fifo.flags = 0;
  124   3                              delay_timer_id = TM_SetTimer((uint32)delay_timer_count, 20);
C251 COMPILER V4.55,  uart_rcode                                                           13/12/18  16:28:37  PAGE 3   

  125   3              
  126   3                              return;
  127   3                      }
  128   2              if(uart_fifo.rx_count == LAST_COUNT_NUM)
  129   2              {
  130   3                      trans_last_data_flag = TRUE;
  131   3              }
  132   2                      
  133   2              SFR_BANK = BANK_UART;
  134   2              UART_DRQ |= 0x01;       // clear RX IRQ pending bit
  135   2              SFR_BANK = sfr_temp; 
  136   2              get_uart_data(uart_fifo.rx_count);
  137   2                      uart_timer_id = TM_SetTimer((uint32) uart_timer_count, uart_data->time_delay);
  138   2              uart_fifo.rx_count++;           
  139   2              uart_fifo.flags = 2;
  140   2          }   
  141   1      }
  142          
  143          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =    ------     ------
  ecode size           =       415     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =         5     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
